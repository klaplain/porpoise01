
Porpoise01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f24c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800f518  0800f518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8d0  0800f8d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f8d8  0800f8d8  000108d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f8dc  0800f8dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800f8e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000538  2400006c  0800f94c  0001106c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005a4  0800f94c  000115a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000212ff  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e34  00000000  00000000  00032399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018e8  00000000  00000000  000361d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001329  00000000  00000000  00037ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039753  00000000  00000000  00038de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000232ec  00000000  00000000  00072534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d4be  00000000  00000000  00095820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00202cde  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007020  00000000  00000000  00202d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  00209d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400006c 	.word	0x2400006c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f500 	.word	0x0800f500

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000070 	.word	0x24000070
 8000308:	0800f500 	.word	0x0800f500

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b988 	b.w	8000634 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	468e      	mov	lr, r1
 8000344:	4604      	mov	r4, r0
 8000346:	4688      	mov	r8, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d962      	bls.n	8000418 <__udivmoddi4+0xdc>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	b14e      	cbz	r6, 800036c <__udivmoddi4+0x30>
 8000358:	f1c6 0320 	rsb	r3, r6, #32
 800035c:	fa01 f806 	lsl.w	r8, r1, r6
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	40b7      	lsls	r7, r6
 8000366:	ea43 0808 	orr.w	r8, r3, r8
 800036a:	40b4      	lsls	r4, r6
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fbb8 f1fe 	udiv	r1, r8, lr
 8000378:	0c23      	lsrs	r3, r4, #16
 800037a:	fb0e 8811 	mls	r8, lr, r1, r8
 800037e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000382:	fb01 f20c 	mul.w	r2, r1, ip
 8000386:	429a      	cmp	r2, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x62>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000390:	f080 80ea 	bcs.w	8000568 <__udivmoddi4+0x22c>
 8000394:	429a      	cmp	r2, r3
 8000396:	f240 80e7 	bls.w	8000568 <__udivmoddi4+0x22c>
 800039a:	3902      	subs	r1, #2
 800039c:	443b      	add	r3, r7
 800039e:	1a9a      	subs	r2, r3, r2
 80003a0:	b2a3      	uxth	r3, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ae:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b2:	459c      	cmp	ip, r3
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x8e>
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	f080 80d6 	bcs.w	800056c <__udivmoddi4+0x230>
 80003c0:	459c      	cmp	ip, r3
 80003c2:	f240 80d3 	bls.w	800056c <__udivmoddi4+0x230>
 80003c6:	443b      	add	r3, r7
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ce:	eba3 030c 	sub.w	r3, r3, ip
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11d      	cbz	r5, 80003de <__udivmoddi4+0xa2>
 80003d6:	40f3      	lsrs	r3, r6
 80003d8:	2200      	movs	r2, #0
 80003da:	e9c5 3200 	strd	r3, r2, [r5]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d905      	bls.n	80003f2 <__udivmoddi4+0xb6>
 80003e6:	b10d      	cbz	r5, 80003ec <__udivmoddi4+0xb0>
 80003e8:	e9c5 0100 	strd	r0, r1, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4608      	mov	r0, r1
 80003f0:	e7f5      	b.n	80003de <__udivmoddi4+0xa2>
 80003f2:	fab3 f183 	clz	r1, r3
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d146      	bne.n	8000488 <__udivmoddi4+0x14c>
 80003fa:	4573      	cmp	r3, lr
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xc8>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 8105 	bhi.w	800060e <__udivmoddi4+0x2d2>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb6e 0203 	sbc.w	r2, lr, r3
 800040a:	2001      	movs	r0, #1
 800040c:	4690      	mov	r8, r2
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e5      	beq.n	80003de <__udivmoddi4+0xa2>
 8000412:	e9c5 4800 	strd	r4, r8, [r5]
 8000416:	e7e2      	b.n	80003de <__udivmoddi4+0xa2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	f000 8090 	beq.w	800053e <__udivmoddi4+0x202>
 800041e:	fab2 f682 	clz	r6, r2
 8000422:	2e00      	cmp	r6, #0
 8000424:	f040 80a4 	bne.w	8000570 <__udivmoddi4+0x234>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000430:	b280      	uxth	r0, r0
 8000432:	b2bc      	uxth	r4, r7
 8000434:	2101      	movs	r1, #1
 8000436:	fbb2 fcfe 	udiv	ip, r2, lr
 800043a:	fb0e 221c 	mls	r2, lr, ip, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb04 f20c 	mul.w	r2, r4, ip
 8000446:	429a      	cmp	r2, r3
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x11e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x11c>
 8000452:	429a      	cmp	r2, r3
 8000454:	f200 80e0 	bhi.w	8000618 <__udivmoddi4+0x2dc>
 8000458:	46c4      	mov	ip, r8
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000460:	fb0e 3312 	mls	r3, lr, r2, r3
 8000464:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000468:	fb02 f404 	mul.w	r4, r2, r4
 800046c:	429c      	cmp	r4, r3
 800046e:	d907      	bls.n	8000480 <__udivmoddi4+0x144>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f102 30ff 	add.w	r0, r2, #4294967295
 8000476:	d202      	bcs.n	800047e <__udivmoddi4+0x142>
 8000478:	429c      	cmp	r4, r3
 800047a:	f200 80ca 	bhi.w	8000612 <__udivmoddi4+0x2d6>
 800047e:	4602      	mov	r2, r0
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000486:	e7a5      	b.n	80003d4 <__udivmoddi4+0x98>
 8000488:	f1c1 0620 	rsb	r6, r1, #32
 800048c:	408b      	lsls	r3, r1
 800048e:	fa22 f706 	lsr.w	r7, r2, r6
 8000492:	431f      	orrs	r7, r3
 8000494:	fa0e f401 	lsl.w	r4, lr, r1
 8000498:	fa20 f306 	lsr.w	r3, r0, r6
 800049c:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a4:	4323      	orrs	r3, r4
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	fa1f fc87 	uxth.w	ip, r7
 80004ae:	fbbe f0f9 	udiv	r0, lr, r9
 80004b2:	0c1c      	lsrs	r4, r3, #16
 80004b4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004bc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	fa02 f201 	lsl.w	r2, r2, r1
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1a0>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 3aff 	add.w	sl, r0, #4294967295
 80004ce:	f080 809c 	bcs.w	800060a <__udivmoddi4+0x2ce>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8099 	bls.w	800060a <__udivmoddi4+0x2ce>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	eba4 040e 	sub.w	r4, r4, lr
 80004e0:	fa1f fe83 	uxth.w	lr, r3
 80004e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004e8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1ce>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f103 3eff 	add.w	lr, r3, #4294967295
 80004fe:	f080 8082 	bcs.w	8000606 <__udivmoddi4+0x2ca>
 8000502:	45a4      	cmp	ip, r4
 8000504:	d97f      	bls.n	8000606 <__udivmoddi4+0x2ca>
 8000506:	3b02      	subs	r3, #2
 8000508:	443c      	add	r4, r7
 800050a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	fba0 ec02 	umull	lr, ip, r0, r2
 8000516:	4564      	cmp	r4, ip
 8000518:	4673      	mov	r3, lr
 800051a:	46e1      	mov	r9, ip
 800051c:	d362      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 800051e:	d05f      	beq.n	80005e0 <__udivmoddi4+0x2a4>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x1fe>
 8000522:	ebb8 0203 	subs.w	r2, r8, r3
 8000526:	eb64 0409 	sbc.w	r4, r4, r9
 800052a:	fa04 f606 	lsl.w	r6, r4, r6
 800052e:	fa22 f301 	lsr.w	r3, r2, r1
 8000532:	431e      	orrs	r6, r3
 8000534:	40cc      	lsrs	r4, r1
 8000536:	e9c5 6400 	strd	r6, r4, [r5]
 800053a:	2100      	movs	r1, #0
 800053c:	e74f      	b.n	80003de <__udivmoddi4+0xa2>
 800053e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000542:	0c01      	lsrs	r1, r0, #16
 8000544:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000548:	b280      	uxth	r0, r0
 800054a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800054e:	463b      	mov	r3, r7
 8000550:	4638      	mov	r0, r7
 8000552:	463c      	mov	r4, r7
 8000554:	46b8      	mov	r8, r7
 8000556:	46be      	mov	lr, r7
 8000558:	2620      	movs	r6, #32
 800055a:	fbb1 f1f7 	udiv	r1, r1, r7
 800055e:	eba2 0208 	sub.w	r2, r2, r8
 8000562:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000566:	e766      	b.n	8000436 <__udivmoddi4+0xfa>
 8000568:	4601      	mov	r1, r0
 800056a:	e718      	b.n	800039e <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e72c      	b.n	80003ca <__udivmoddi4+0x8e>
 8000570:	f1c6 0220 	rsb	r2, r6, #32
 8000574:	fa2e f302 	lsr.w	r3, lr, r2
 8000578:	40b7      	lsls	r7, r6
 800057a:	40b1      	lsls	r1, r6
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	430a      	orrs	r2, r1
 8000586:	fbb3 f8fe 	udiv	r8, r3, lr
 800058a:	b2bc      	uxth	r4, r7
 800058c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb08 f904 	mul.w	r9, r8, r4
 800059a:	40b0      	lsls	r0, r6
 800059c:	4589      	cmp	r9, r1
 800059e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a2:	b280      	uxth	r0, r0
 80005a4:	d93e      	bls.n	8000624 <__udivmoddi4+0x2e8>
 80005a6:	1879      	adds	r1, r7, r1
 80005a8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005ac:	d201      	bcs.n	80005b2 <__udivmoddi4+0x276>
 80005ae:	4589      	cmp	r9, r1
 80005b0:	d81f      	bhi.n	80005f2 <__udivmoddi4+0x2b6>
 80005b2:	eba1 0109 	sub.w	r1, r1, r9
 80005b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ba:	fb09 f804 	mul.w	r8, r9, r4
 80005be:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c2:	b292      	uxth	r2, r2
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	4542      	cmp	r2, r8
 80005ca:	d229      	bcs.n	8000620 <__udivmoddi4+0x2e4>
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d2:	d2c4      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d4:	4542      	cmp	r2, r8
 80005d6:	d2c2      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d8:	f1a9 0102 	sub.w	r1, r9, #2
 80005dc:	443a      	add	r2, r7
 80005de:	e7be      	b.n	800055e <__udivmoddi4+0x222>
 80005e0:	45f0      	cmp	r8, lr
 80005e2:	d29d      	bcs.n	8000520 <__udivmoddi4+0x1e4>
 80005e4:	ebbe 0302 	subs.w	r3, lr, r2
 80005e8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005ec:	3801      	subs	r0, #1
 80005ee:	46e1      	mov	r9, ip
 80005f0:	e796      	b.n	8000520 <__udivmoddi4+0x1e4>
 80005f2:	eba7 0909 	sub.w	r9, r7, r9
 80005f6:	4449      	add	r1, r9
 80005f8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005fc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000600:	fb09 f804 	mul.w	r8, r9, r4
 8000604:	e7db      	b.n	80005be <__udivmoddi4+0x282>
 8000606:	4673      	mov	r3, lr
 8000608:	e77f      	b.n	800050a <__udivmoddi4+0x1ce>
 800060a:	4650      	mov	r0, sl
 800060c:	e766      	b.n	80004dc <__udivmoddi4+0x1a0>
 800060e:	4608      	mov	r0, r1
 8000610:	e6fd      	b.n	800040e <__udivmoddi4+0xd2>
 8000612:	443b      	add	r3, r7
 8000614:	3a02      	subs	r2, #2
 8000616:	e733      	b.n	8000480 <__udivmoddi4+0x144>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	443b      	add	r3, r7
 800061e:	e71c      	b.n	800045a <__udivmoddi4+0x11e>
 8000620:	4649      	mov	r1, r9
 8000622:	e79c      	b.n	800055e <__udivmoddi4+0x222>
 8000624:	eba1 0109 	sub.w	r1, r1, r9
 8000628:	46c4      	mov	ip, r8
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	e7c4      	b.n	80005be <__udivmoddi4+0x282>

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800063c:	f000 fc5c 	bl	8000ef8 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000640:	f001 f8ba 	bl	80017b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000644:	f000 f832 	bl	80006ac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000648:	f000 f8a0 	bl	800078c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064c:	f000 fb34 	bl	8000cb8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000650:	f000 faae 	bl	8000bb0 <MX_DMA_Init>
	MX_MDMA_Init();
 8000654:	f000 facc 	bl	8000bf0 <MX_MDMA_Init>
	MX_ADC1_Init();
 8000658:	f000 f8ca 	bl	80007f0 <MX_ADC1_Init>
	MX_RTC_Init();
 800065c:	f000 f944 	bl	80008e8 <MX_RTC_Init>
	MX_SDMMC1_SD_Init();
 8000660:	f000 f99e 	bl	80009a0 <MX_SDMMC1_SD_Init>
	MX_SPI6_Init();
 8000664:	f000 f9ba 	bl	80009dc <MX_SPI6_Init>
	MX_UART4_Init();
 8000668:	f000 fa08 	bl	8000a7c <MX_UART4_Init>
	MX_USART3_UART_Init();
 800066c:	f000 fa54 	bl	8000b18 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 8000670:	f00d fff6 	bl	800e660 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\nProgram Start\r\n");
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <main+0x6c>)
 8000676:	f00e fc5d 	bl	800ef34 <puts>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <main+0x70>)
 8000680:	f005 fd1a 	bl	80060b8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000684:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000688:	f001 f928 	bl	80018dc <HAL_Delay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <main+0x70>)
 8000692:	f005 fd11 	bl	80060b8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069a:	f001 f91f 	bl	80018dc <HAL_Delay>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800069e:	bf00      	nop
 80006a0:	e7eb      	b.n	800067a <main+0x42>
 80006a2:	bf00      	nop
 80006a4:	0800f518 	.word	0x0800f518
 80006a8:	58020400 	.word	0x58020400

080006ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	@ 0x70
 80006b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	224c      	movs	r2, #76	@ 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00e fd1a 	bl	800f0f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00e fd14 	bl	800f0f4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f005 ff97 	bl	8006600 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemClock_Config+0xdc>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a2b      	ldr	r2, [pc, #172]	@ (8000788 <SystemClock_Config+0xdc>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <SystemClock_Config+0xdc>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ee:	bf00      	nop
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <SystemClock_Config+0xdc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006fc:	d1f8      	bne.n	80006f0 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_LSI;
 80006fe:	2318      	movs	r3, #24
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.CSICalibrationValue = 16;
 800070a:	2310      	movs	r3, #16
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000712:	2301      	movs	r3, #1
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000716:	2301      	movs	r3, #1
 8000718:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 100;
 800071a:	2364      	movs	r3, #100	@ 0x64
 800071c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800072a:	2308      	movs	r3, #8
 800072c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800072e:	2300      	movs	r3, #0
 8000730:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	4618      	mov	r0, r3
 800073c:	f005 ffba 	bl	80066b4 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000746:	f000 fc03 	bl	8000f50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	233f      	movs	r3, #63	@ 0x3f
 800074c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000756:	2308      	movs	r3, #8
 8000758:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800075a:	2340      	movs	r3, #64	@ 0x40
 800075c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075e:	2340      	movs	r3, #64	@ 0x40
 8000760:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000766:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000768:	2340      	movs	r3, #64	@ 0x40
 800076a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f006 fb79 	bl	8006e68 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800077c:	f000 fbe8 	bl	8000f50 <Error_Handler>
	}
}
 8000780:	bf00      	nop
 8000782:	3770      	adds	r7, #112	@ 0x70
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	58024800 	.word	0x58024800

0800078c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0ae      	sub	sp, #184	@ 0xb8
 8000790:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	22b8      	movs	r2, #184	@ 0xb8
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f00e fcab 	bl	800f0f4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 800079e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 48;
 80007ae:	2330      	movs	r3, #48	@ 0x30
 80007b0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80007be:	2380      	movs	r3, #128	@ 0x80
 80007c0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80007ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ce:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 fed1 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <PeriphCommonClock_Config+0x5c>
	{
		Error_Handler();
 80007e4:	f000 fbb4 	bl	8000f50 <Error_Handler>
	}
}
 80007e8:	bf00      	nop
 80007ea:	37b8      	adds	r7, #184	@ 0xb8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2224      	movs	r2, #36	@ 0x24
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00e fc73 	bl	800f0f4 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800080e:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000810:	4a32      	ldr	r2, [pc, #200]	@ (80008dc <MX_ADC1_Init+0xec>)
 8000812:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000814:	4b30      	ldr	r3, [pc, #192]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800081a:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000820:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000828:	2204      	movs	r2, #4
 800082a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800082c:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000832:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000834:	2201      	movs	r2, #1
 8000836:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000838:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800083a:	2201      	movs	r2, #1
 800083c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000854:	2203      	movs	r2, #3
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800086e:	2201      	movs	r2, #1
 8000870:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	4819      	ldr	r0, [pc, #100]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 8000874:	f001 fb64 	bl	8001f40 <HAL_ADC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 800087e:	f000 fb67 	bl	8000f50 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 800088e:	f002 fdc7 	bl	8003420 <HAL_ADCEx_MultiModeConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000898:	f000 fb5a 	bl	8000f50 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_ADC1_Init+0xf0>)
 800089e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a0:	2306      	movs	r3, #6
 80008a2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_ADC1_Init+0xf4>)
 80008aa:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ac:	2304      	movs	r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_ADC1_Init+0xe8>)
 80008c0:	f001 ff94 	bl	80027ec <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xde>
	{
		Error_Handler();
 80008ca:	f000 fb41 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	@ 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000088 	.word	0x24000088
 80008dc:	40022000 	.word	0x40022000
 80008e0:	14f00020 	.word	0x14f00020
 80008e4:	47ff0000 	.word	0x47ff0000

080008e8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000900:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000902:	4a26      	ldr	r2, [pc, #152]	@ (800099c <MX_RTC_Init+0xb4>)
 8000904:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000906:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800090c:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_RTC_Init+0xb0>)
 800090e:	227f      	movs	r2, #127	@ 0x7f
 8000910:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000914:	22ff      	movs	r2, #255	@ 0xff
 8000916:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_RTC_Init+0xb0>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_RTC_Init+0xb0>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000930:	4819      	ldr	r0, [pc, #100]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000932:	f009 fa0b 	bl	8009d4c <HAL_RTC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_RTC_Init+0x58>
	{
		Error_Handler();
 800093c:	f000 fb08 	bl	8000f50 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000940:	2300      	movs	r3, #0
 8000942:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8000944:	2300      	movs	r3, #0
 8000946:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000948:	2300      	movs	r3, #0
 800094a:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_RTC_Init+0xb0>)
 800095c:	f009 fa78 	bl	8009e50 <HAL_RTC_SetTime>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_RTC_Init+0x82>
	{
		Error_Handler();
 8000966:	f000 faf3 	bl	8000f50 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800096a:	2301      	movs	r3, #1
 800096c:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800096e:	2301      	movs	r3, #1
 8000970:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8000972:	2301      	movs	r3, #1
 8000974:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8000976:	2300      	movs	r3, #0
 8000978:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_RTC_Init+0xb0>)
 8000982:	f009 fb03 	bl	8009f8c <HAL_RTC_SetDate>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_RTC_Init+0xa8>
	{
		Error_Handler();
 800098c:	f000 fae0 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000170 	.word	0x24000170
 800099c:	58004000 	.word	0x58004000

080009a0 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009a6:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <MX_SDMMC1_SD_Init+0x38>)
 80009a8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009bc:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <MX_SDMMC1_SD_Init+0x34>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	24000194 	.word	0x24000194
 80009d8:	52007000 	.word	0x52007000

080009dc <MX_SPI6_Init>:
 * @brief SPI6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI6_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI6_Init 1 */

	/* USER CODE END SPI6_Init 1 */
	/* SPI6 parameter configuration*/
	hspi6.Instance = SPI6;
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_SPI6_Init+0x98>)
 80009e2:	4a25      	ldr	r2, [pc, #148]	@ (8000a78 <MX_SPI6_Init+0x9c>)
 80009e4:	601a      	str	r2, [r3, #0]
	hspi6.Init.Mode = SPI_MODE_SLAVE;
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <MX_SPI6_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
	hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_SPI6_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
	hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_SPI6_Init+0x98>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	60da      	str	r2, [r3, #12]
	hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_SPI6_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
	hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
	hspi6.Init.NSS = SPI_NSS_SOFT;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a0a:	619a      	str	r2, [r3, #24]
	hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
	hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi6.Init.CRCPolynomial = 0x0;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_SPI6_Init+0x98>)
 8000a62:	f00b f835 	bl	800bad0 <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI6_Init+0x94>
	{
		Error_Handler();
 8000a6c:	f000 fa70 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI6_Init 2 */

	/* USER CODE END SPI6_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	24000210 	.word	0x24000210
 8000a78:	58001400 	.word	0x58001400

08000a7c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <MX_UART4_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 576000;
 8000a86:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000a88:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <MX_UART4_Init+0x98>)
 8000a8a:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	@ 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ac2:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000ac4:	f00b f943 	bl	800bd4e <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_UART4_Init+0x56>
	{
		Error_Handler();
 8000ace:	f000 fa3f 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000ad6:	f00c ff2f 	bl	800d938 <HAL_UARTEx_SetTxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_UART4_Init+0x68>
	{
		Error_Handler();
 8000ae0:	f000 fa36 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000ae8:	f00c ff64 	bl	800d9b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_UART4_Init+0x7a>
	{
		Error_Handler();
 8000af2:	f000 fa2d 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_UART4_Init+0x90>)
 8000af8:	f00c fee5 	bl	800d8c6 <HAL_UARTEx_DisableFifoMode>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_UART4_Init+0x8a>
	{
		Error_Handler();
 8000b02:	f000 fa25 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	24000298 	.word	0x24000298
 8000b10:	40004c00 	.word	0x40004c00
 8000b14:	0008ca00 	.word	0x0008ca00

08000b18 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <MX_USART3_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b62:	f00b f8f4 	bl	800bd4e <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8000b6c:	f000 f9f0 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f00c fee0 	bl	800d938 <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8000b7e:	f000 f9e7 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b86:	f00c ff15 	bl	800d9b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8000b90:	f000 f9de 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b96:	f00c fe96 	bl	800d8c6 <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8000ba0:	f000 f9d6 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400032c 	.word	0x2400032c
 8000bac:	40004800 	.word	0x40004800

08000bb0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_DMA_Init+0x3c>)
 8000bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000bec <MX_DMA_Init+0x3c>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_DMA_Init+0x3c>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	200b      	movs	r0, #11
 8000bda:	f002 fdde 	bl	800379a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bde:	200b      	movs	r0, #11
 8000be0:	f002 fdf5 	bl	80037ce <HAL_NVIC_EnableIRQ>

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400

08000bf0 <MX_MDMA_Init>:
 * Enable MDMA controller clock
 * Configure MDMA for global transfers
 *   hmdma_mdma_channel0_dma1_stream0_tc_0
 */
static void MX_MDMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

	/* MDMA controller clock enable */
	__HAL_RCC_MDMA_CLK_ENABLE();
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <MX_MDMA_Init+0xbc>)
 8000bf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000cac <MX_MDMA_Init+0xbc>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c06:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <MX_MDMA_Init+0xbc>)
 8000c08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
	/* Local variables */

	/* Configure MDMA channel MDMA_Channel0 */
	/* Configure MDMA request hmdma_mdma_channel0_dma1_stream0_tc_0 on MDMA_Channel0 */
	hmdma_mdma_channel0_dma1_stream0_tc_0.Instance = MDMA_Channel0;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c16:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <MX_MDMA_Init+0xc4>)
 8000c18:	601a      	str	r2, [r3, #0]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.Request = MDMA_REQUEST_DMA1_Stream0_TC;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	615a      	str	r2, [r3, #20]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	619a      	str	r2, [r3, #24]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c50:	625a      	str	r2, [r3, #36]	@ 0x24
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.BufferTransferLength = 1;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	@ 0x30
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.SourceBlockAddressOffset = 0;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	635a      	str	r2, [r3, #52]	@ 0x34
	hmdma_mdma_channel0_dma1_stream0_tc_0.Init.DestBlockAddressOffset = 0;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_MDMA_Init(&hmdma_mdma_channel0_dma1_stream0_tc_0) != HAL_OK)
 8000c70:	480f      	ldr	r0, [pc, #60]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c72:	f005 fa3a 	bl	80060ea <HAL_MDMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_MDMA_Init+0x90>
	{
		Error_Handler();
 8000c7c:	f000 f968 	bl	8000f50 <Error_Handler>
	}

	/* Configure post request address and data masks */
	if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_dma1_stream0_tc_0, 0, 0) != HAL_OK)
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <MX_MDMA_Init+0xc0>)
 8000c86:	f005 fa7c 	bl	8006182 <HAL_MDMA_ConfigPostRequestMask>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_MDMA_Init+0xa4>
	{
		Error_Handler();
 8000c90:	f000 f95e 	bl	8000f50 <Error_Handler>
	}

	/* MDMA interrupt initialization */
	/* MDMA_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	207a      	movs	r0, #122	@ 0x7a
 8000c9a:	f002 fd7e 	bl	800379a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000c9e:	207a      	movs	r0, #122	@ 0x7a
 8000ca0:	f002 fd95 	bl	80037ce <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	240003c0 	.word	0x240003c0
 8000cb4:	52000040 	.word	0x52000040

08000cb8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	@ 0x30
 8000cbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b64      	ldr	r3, [pc, #400]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a62      	ldr	r2, [pc, #392]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b60      	ldr	r3, [pc, #384]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cec:	4b5c      	ldr	r3, [pc, #368]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b55      	ldr	r3, [pc, #340]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a53      	ldr	r2, [pc, #332]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b51      	ldr	r3, [pc, #324]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b4d      	ldr	r3, [pc, #308]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b46      	ldr	r3, [pc, #280]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a44      	ldr	r2, [pc, #272]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b42      	ldr	r3, [pc, #264]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b3a      	ldr	r3, [pc, #232]	@ (8000e60 <MX_GPIO_Init+0x1a8>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Acq_Busy_GPIO_Port, Acq_Busy_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d88:	4836      	ldr	r0, [pc, #216]	@ (8000e64 <MX_GPIO_Init+0x1ac>)
 8000d8a:	f005 f995 	bl	80060b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GAINA0_Pin|GAINA1_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000d94:	4834      	ldr	r0, [pc, #208]	@ (8000e68 <MX_GPIO_Init+0x1b0>)
 8000d96:	f005 f98f 	bl	80060b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GAINB0_Pin|GAINB1_Pin|GAINB2_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000da0:	4832      	ldr	r0, [pc, #200]	@ (8000e6c <MX_GPIO_Init+0x1b4>)
 8000da2:	f005 f989 	bl	80060b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4831      	ldr	r0, [pc, #196]	@ (8000e70 <MX_GPIO_Init+0x1b8>)
 8000dac:	f005 f984 	bl	80060b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_Card_Detect_Pin */
	GPIO_InitStruct.Pin = SD_Card_Detect_Pin;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(SD_Card_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	482c      	ldr	r0, [pc, #176]	@ (8000e74 <MX_GPIO_Init+0x1bc>)
 8000dc4:	f004 ffb8 	bl	8005d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : Record_Enable_Pin */
	GPIO_InitStruct.Pin = Record_Enable_Pin;
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(Record_Enable_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <MX_GPIO_Init+0x1ac>)
 8000ddc:	f004 ffac 	bl	8005d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : Acq_Busy_Pin */
	GPIO_InitStruct.Pin = Acq_Busy_Pin;
 8000de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Acq_Busy_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481a      	ldr	r0, [pc, #104]	@ (8000e64 <MX_GPIO_Init+0x1ac>)
 8000dfa:	f004 ff9d 	bl	8005d38 <HAL_GPIO_Init>

	/*Configure GPIO pins : GAINA0_Pin GAINA1_Pin */
	GPIO_InitStruct.Pin = GAINA0_Pin|GAINA1_Pin;
 8000dfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <MX_GPIO_Init+0x1b0>)
 8000e18:	f004 ff8e 	bl	8005d38 <HAL_GPIO_Init>

	/*Configure GPIO pins : GAINB0_Pin GAINB1_Pin GAINB2_Pin */
	GPIO_InitStruct.Pin = GAINB0_Pin|GAINB1_Pin|GAINB2_Pin;
 8000e1c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_GPIO_Init+0x1b4>)
 8000e36:	f004 ff7f 	bl	8005d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : RED_LED_Pin */
	GPIO_InitStruct.Pin = RED_LED_Pin;
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_GPIO_Init+0x1b8>)
 8000e52:	f004 ff71 	bl	8005d38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	@ 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58021000 	.word	0x58021000
 8000e68:	58020c00 	.word	0x58020c00
 8000e6c:	58020800 	.word	0x58020800
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58020000 	.word	0x58020000

08000e78 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_write+0x28>
	{
		HAL_UART_Transmit(&huart4,(uint8_t*)ptr++,1,1);// Sending in normal mode
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	1c4b      	adds	r3, r1, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	2201      	movs	r2, #1
 8000e94:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <_write+0x3c>)
 8000e96:	f00a ffaa 	bl	800bdee <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_write+0x12>
	}
	return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000298 	.word	0x24000298

08000eb8 <HAL_ADC_ConvCpltCallback>:
		ADC_overrun=1; //Set overrun flag
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	adc_upper_status = BUFFER_FULL;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x30>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	801a      	strh	r2, [r3, #0]
	if(adc_lower_status == BUFFER_FULL)  // Overflow detect
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_ADC_ConvCpltCallback+0x34>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000ed4:	f005 f8f0 	bl	80060b8 <HAL_GPIO_WritePin>
		ADC_overrun=1; //Set overrun flag
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
	}
	//
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2400042e 	.word	0x2400042e
 8000eec:	2400042c 	.word	0x2400042c
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	24000430 	.word	0x24000430

08000ef8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000f0a:	f002 fc7b 	bl	8003804 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000f1e:	2387      	movs	r3, #135	@ 0x87
 8000f20:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fc99 	bl	8003874 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f002 fc76 	bl	8003834 <HAL_MPU_Enable>

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f68:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_MspInit+0x5c>)
 8000f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 fcc0 	bl	8001924 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000fa4:	f000 fce6 	bl	8001974 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fccf 	bl	800194c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400

08000fbc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a34      	ldr	r2, [pc, #208]	@ (80010ac <HAL_ADC_MspInit+0xf0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d161      	bne.n	80010a2 <HAL_ADC_MspInit+0xe6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 8000fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe4:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fee:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	4a2b      	ldr	r2, [pc, #172]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100c:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <HAL_ADC_MspInit+0xf4>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <HAL_ADC_MspInit+0xf8>)
 800102e:	f004 fe83 	bl	8005d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <HAL_ADC_MspInit+0x100>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800103a:	2209      	movs	r2, #9
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800106a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 8001078:	f002 fc3c 	bl	80038f4 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001082:	f7ff ff65 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800108a:	659a      	str	r2, [r3, #88]	@ 0x58
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_ADC_MspInit+0xfc>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2012      	movs	r0, #18
 8001098:	f002 fb7f 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800109c:	2012      	movs	r0, #18
 800109e:	f002 fb96 	bl	80037ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	@ 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020400 	.word	0x58020400
 80010b8:	240000f8 	.word	0x240000f8
 80010bc:	40020010 	.word	0x40020010

080010c0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0b0      	sub	sp, #192	@ 0xc0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	22b8      	movs	r2, #184	@ 0xb8
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00e f80f 	bl	800f0f4 <memset>
  if(hrtc->Instance==RTC)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <HAL_RTC_MspInit+0x5c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d119      	bne.n	8001114 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fa41 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001104:	f7ff ff24 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_RTC_MspInit+0x60>)
 800110a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_RTC_MspInit+0x60>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001112:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001114:	bf00      	nop
 8001116:	37c0      	adds	r7, #192	@ 0xc0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58004000 	.word	0x58004000
 8001120:	58024400 	.word	0x58024400

08001124 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a3e      	ldr	r2, [pc, #248]	@ (800123c <HAL_SD_MspInit+0x118>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d175      	bne.n	8001232 <HAL_SD_MspInit+0x10e>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001146:	4b3e      	ldr	r3, [pc, #248]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001148:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800114c:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001152:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001156:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116a:	4a35      	ldr	r2, [pc, #212]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001174:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a26      	ldr	r2, [pc, #152]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_SD_MspInit+0x11c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011d0:	230c      	movs	r3, #12
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	481a      	ldr	r0, [pc, #104]	@ (8001244 <HAL_SD_MspInit+0x120>)
 80011dc:	f004 fdac 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011e0:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011f2:	230c      	movs	r3, #12
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <HAL_SD_MspInit+0x124>)
 80011fe:	f004 fd9b 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001202:	2304      	movs	r3, #4
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001212:	230c      	movs	r3, #12
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <HAL_SD_MspInit+0x128>)
 800121e:	f004 fd8b 	bl	8005d38 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2031      	movs	r0, #49	@ 0x31
 8001228:	f002 fab7 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800122c:	2031      	movs	r0, #49	@ 0x31
 800122e:	f002 face 	bl	80037ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	@ 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	52007000 	.word	0x52007000
 8001240:	58024400 	.word	0x58024400
 8001244:	58020400 	.word	0x58020400
 8001248:	58020800 	.word	0x58020800
 800124c:	58020c00 	.word	0x58020c00

08001250 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0b8      	sub	sp, #224	@ 0xe0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	22b8      	movs	r2, #184	@ 0xb8
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00d ff3f 	bl	800f0f4 <memset>
  if(hspi->Instance==SPI6)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <HAL_SPI_MspInit+0xc4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d145      	bne.n	800130c <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001280:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f006 f972 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012a2:	f7ff fe55 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI6_CLK_ENABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	4a13      	ldr	r2, [pc, #76]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <HAL_SPI_MspInit+0xc8>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI6 GPIO Configuration
    PA5     ------> SPI6_SCK
    PA6     ------> SPI6_MISO
    PA7     ------> SPI6_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23e0      	movs	r3, #224	@ 0xe0
 80012e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80012fa:	2308      	movs	r3, #8
 80012fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <HAL_SPI_MspInit+0xcc>)
 8001308:	f004 fd16 	bl	8005d38 <HAL_GPIO_Init>

    /* USER CODE END SPI6_MspInit 1 */

  }

}
 800130c:	bf00      	nop
 800130e:	37e0      	adds	r7, #224	@ 0xe0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58001400 	.word	0x58001400
 8001318:	58024400 	.word	0x58024400
 800131c:	58020000 	.word	0x58020000

08001320 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ba      	sub	sp, #232	@ 0xe8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	22b8      	movs	r2, #184	@ 0xb8
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f00d fed7 	bl	800f0f4 <memset>
  if(huart->Instance==UART4)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a51      	ldr	r2, [pc, #324]	@ (8001490 <HAL_UART_MspInit+0x170>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d14e      	bne.n	80013ee <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001350:	f04f 0202 	mov.w	r2, #2
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4618      	mov	r0, r3
 8001368:	f006 f90a 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001372:	f7ff fded 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001376:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800137c:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <HAL_UART_MspInit+0x174>)
 800137e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001382:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001386:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800138c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b3f      	ldr	r3, [pc, #252]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139a:	4a3e      	ldr	r2, [pc, #248]	@ (8001494 <HAL_UART_MspInit+0x174>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <HAL_UART_MspInit+0x174>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013ca:	2308      	movs	r3, #8
 80013cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4830      	ldr	r0, [pc, #192]	@ (8001498 <HAL_UART_MspInit+0x178>)
 80013d8:	f004 fcae 	bl	8005d38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2034      	movs	r0, #52	@ 0x34
 80013e2:	f002 f9da 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013e6:	2034      	movs	r0, #52	@ 0x34
 80013e8:	f002 f9f1 	bl	80037ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ec:	e04b      	b.n	8001486 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <HAL_UART_MspInit+0x17c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d146      	bne.n	8001486 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013f8:	f04f 0202 	mov.w	r2, #2
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f006 f8b6 	bl	8007580 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_UART_MspInit+0xfe>
      Error_Handler();
 800141a:	f7ff fd99 	bl	8000f50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001424:	4a1b      	ldr	r2, [pc, #108]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001426:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800142a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_UART_MspInit+0x174>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <HAL_UART_MspInit+0x174>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_UART_MspInit+0x174>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800145a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800145e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001474:	2307      	movs	r3, #7
 8001476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <HAL_UART_MspInit+0x178>)
 8001482:	f004 fc59 	bl	8005d38 <HAL_GPIO_Init>
}
 8001486:	bf00      	nop
 8001488:	37e8      	adds	r7, #232	@ 0xe8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40004c00 	.word	0x40004c00
 8001494:	58024400 	.word	0x58024400
 8001498:	58020c00 	.word	0x58020c00
 800149c:	40004800 	.word	0x40004800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f6:	f000 f9d1 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <DMA1_Stream0_IRQHandler+0x10>)
 8001506:	f003 fab1 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	240000f8 	.word	0x240000f8

08001514 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <ADC_IRQHandler+0x10>)
 800151a:	f000 ff19 	bl	8002350 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000088 	.word	0x24000088

08001528 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <SDMMC1_IRQHandler+0x10>)
 800152e:	f009 f8db 	bl	800a6e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24000194 	.word	0x24000194

0800153c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <UART4_IRQHandler+0x10>)
 8001542:	f00a fce3 	bl	800bf0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000298 	.word	0x24000298

08001550 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_dma1_stream0_tc_0);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <MDMA_IRQHandler+0x10>)
 8001556:	f004 fe67 	bl	8006228 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240003c0 	.word	0x240003c0

08001564 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:
  }
  return len;
}

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c6:	605a      	str	r2, [r3, #4]
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_isatty>:

int _isatty(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f00d fdba 	bl	800f1b0 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	24050000 	.word	0x24050000
 8001668:	00000400 	.word	0x00000400
 800166c:	24000434 	.word	0x24000434
 8001670:	240005a8 	.word	0x240005a8

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001678:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <SystemInit+0xd0>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167e:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <SystemInit+0xd0>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <SystemInit+0xd4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	2b06      	cmp	r3, #6
 8001692:	d807      	bhi.n	80016a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <SystemInit+0xd4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 030f 	bic.w	r3, r3, #15
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <SystemInit+0xd4>)
 800169e:	f043 0307 	orr.w	r3, r3, #7
 80016a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <SystemInit+0xd8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	@ (800174c <SystemInit+0xd8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <SystemInit+0xd8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SystemInit+0xd8>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4924      	ldr	r1, [pc, #144]	@ (800174c <SystemInit+0xd8>)
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <SystemInit+0xdc>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <SystemInit+0xd4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <SystemInit+0xd4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 030f 	bic.w	r3, r3, #15
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <SystemInit+0xd4>)
 80016d8:	f043 0307 	orr.w	r3, r3, #7
 80016dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <SystemInit+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <SystemInit+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <SystemInit+0xd8>)
 80016f2:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <SystemInit+0xe0>)
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <SystemInit+0xd8>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <SystemInit+0xe4>)
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SystemInit+0xd8>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <SystemInit+0xe8>)
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <SystemInit+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SystemInit+0xd8>)
 800170a:	4a14      	ldr	r2, [pc, #80]	@ (800175c <SystemInit+0xe8>)
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <SystemInit+0xd8>)
 8001716:	4a11      	ldr	r2, [pc, #68]	@ (800175c <SystemInit+0xe8>)
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <SystemInit+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <SystemInit+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <SystemInit+0xd8>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <SystemInit+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SystemInit+0xec>)
 8001734:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001738:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	52002000 	.word	0x52002000
 800174c:	58024400 	.word	0x58024400
 8001750:	eaf6ed7f 	.word	0xeaf6ed7f
 8001754:	02020200 	.word	0x02020200
 8001758:	01ff0000 	.word	0x01ff0000
 800175c:	01010280 	.word	0x01010280
 8001760:	52004000 	.word	0x52004000

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800179c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001768:	f7ff ff84 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f00d fd13 	bl	800f1bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7fe ff4f 	bl	8000638 <main>
  bx  lr
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80017a8:	0800f8e0 	.word	0x0800f8e0
  ldr r2, =_sbss
 80017ac:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80017b0:	240005a4 	.word	0x240005a4

080017b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC3_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017be:	2003      	movs	r0, #3
 80017c0:	f001 ffe0 	bl	8003784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017c4:	f005 fd06 	bl	80071d4 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_Init+0x68>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	4913      	ldr	r1, [pc, #76]	@ (8001824 <HAL_Init+0x6c>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_Init+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_Init+0x6c>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_Init+0x70>)
 80017fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_Init+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f814 	bl	8001830 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e002      	b.n	8001818 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001812:	f7ff fba3 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	58024400 	.word	0x58024400
 8001824:	0800f87c 	.word	0x0800f87c
 8001828:	24000004 	.word	0x24000004
 800182c:	24000000 	.word	0x24000000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e021      	b.n	8001888 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_InitTick+0x64>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_InitTick+0x60>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 ffc5 	bl	80037ea <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f001 ff8f 	bl	800379a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x68>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2400000c 	.word	0x2400000c
 8001894:	24000000 	.word	0x24000000
 8001898:	24000008 	.word	0x24000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2400000c 	.word	0x2400000c
 80018c0:	24000438 	.word	0x24000438

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	24000438 	.word	0x24000438

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2400000c 	.word	0x2400000c

08001924 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001934:	4904      	ldr	r1, [pc, #16]	@ (8001948 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	58003c00 	.word	0x58003c00

0800194c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 0202 	bic.w	r2, r3, #2
 800195c:	4904      	ldr	r1, [pc, #16]	@ (8001970 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	58003c00 	.word	0x58003c00

08001974 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001986:	f7ff ff9d 	bl	80018c4 <HAL_GetTick>
 800198a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800198c:	e008      	b.n	80019a0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800198e:	f7ff ff99 	bl	80018c4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b0a      	cmp	r3, #10
 800199a:	d901      	bls.n	80019a0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e006      	b.n	80019ae <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	58003c00 	.word	0x58003c00

080019bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <LL_ADC_SetChannelPreselection+0x70>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d027      	beq.n	8001a86 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <LL_ADC_SetChannelPreselection+0x2c>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2201      	movs	r2, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	e015      	b.n	8001a7c <LL_ADC_SetChannelPreselection+0x58>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001a66:	2320      	movs	r3, #32
 8001a68:	e003      	b.n	8001a72 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2201      	movs	r2, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	69d2      	ldr	r2, [r2, #28]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	58026000 	.word	0x58026000

08001a98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3360      	adds	r3, #96	@ 0x60
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <LL_ADC_SetOffset+0x60>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d10b      	bne.n	8001ad4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ad2:	e00b      	b.n	8001aec <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58026000 	.word	0x58026000

08001afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3360      	adds	r3, #96	@ 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00e      	beq.n	8001b8e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3360      	adds	r3, #96	@ 0x60
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	601a      	str	r2, [r3, #0]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	58026000 	.word	0x58026000

08001ba0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <LL_ADC_SetOffsetSaturation+0x40>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10e      	bne.n	8001bd2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3360      	adds	r3, #96	@ 0x60
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	58026000 	.word	0x58026000

08001be4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <LL_ADC_SetOffsetSign+0x40>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d10e      	bne.n	8001c16 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3360      	adds	r3, #96	@ 0x60
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	58026000 	.word	0x58026000

08001c28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3360      	adds	r3, #96	@ 0x60
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <LL_ADC_SetOffsetState+0x50>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d108      	bne.n	8001c5c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001c5a:	e007      	b.n	8001c6c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58026000 	.word	0x58026000

08001c7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3330      	adds	r3, #48	@ 0x30
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	211f      	movs	r1, #31
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 011f 	and.w	r1, r3, #31
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3314      	adds	r3, #20
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2107      	movs	r1, #7
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0d1b      	lsrs	r3, r3, #20
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d115      	bne.n	8001db8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0318 	and.w	r3, r3, #24
 8001da2:	4914      	ldr	r1, [pc, #80]	@ (8001df4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	400b      	ands	r3, r1
 8001daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001db6:	e014      	b.n	8001de2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0318 	and.w	r3, r3, #24
 8001dce:	4909      	ldr	r1, [pc, #36]	@ (8001df4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	58026000 	.word	0x58026000
 8001df4:	000fffff 	.word	0x000fffff

08001df8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6093      	str	r3, [r2, #8]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	5fffffc0 	.word	0x5fffffc0

08001e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	6fffffc0 	.word	0x6fffffc0

08001ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_IsEnabled+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_IsEnabled+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d101      	bne.n	8001f30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1ee      	b.n	8002338 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff f827 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff67 	bl	8001e54 <LL_ADC_IsDeepPowerDownEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff4d 	bl	8001e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff82 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d114      	bne.n	8001fd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff66 	bl	8001e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <HAL_ADC_Init+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	4a8e      	ldr	r2, [pc, #568]	@ (80021f0 <HAL_ADC_Init+0x2b0>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff65 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff76 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 8002006:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8188 	bne.w	8002326 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 8184 	bne.w	8002326 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002026:	f043 0202 	orr.w	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff4a 	bl	8001ecc <LL_ADC_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d136      	bne.n	80020ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6c      	ldr	r2, [pc, #432]	@ (80021f4 <HAL_ADC_Init+0x2b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x112>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6a      	ldr	r2, [pc, #424]	@ (80021f8 <HAL_ADC_Init+0x2b8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10e      	bne.n	8002070 <HAL_ADC_Init+0x130>
 8002052:	4868      	ldr	r0, [pc, #416]	@ (80021f4 <HAL_ADC_Init+0x2b4>)
 8002054:	f7ff ff3a 	bl	8001ecc <LL_ADC_IsEnabled>
 8002058:	4604      	mov	r4, r0
 800205a:	4867      	ldr	r0, [pc, #412]	@ (80021f8 <HAL_ADC_Init+0x2b8>)
 800205c:	f7ff ff36 	bl	8001ecc <LL_ADC_IsEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	4323      	orrs	r3, r4
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e008      	b.n	8002082 <HAL_ADC_Init+0x142>
 8002070:	4862      	ldr	r0, [pc, #392]	@ (80021fc <HAL_ADC_Init+0x2bc>)
 8002072:	f7ff ff2b 	bl	8001ecc <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d012      	beq.n	80020ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a5a      	ldr	r2, [pc, #360]	@ (80021f4 <HAL_ADC_Init+0x2b4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_ADC_Init+0x15a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_ADC_Init+0x2b8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x15e>
 800209a:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <HAL_ADC_Init+0x2c0>)
 800209c:	e000      	b.n	80020a0 <HAL_ADC_Init+0x160>
 800209e:	4a59      	ldr	r2, [pc, #356]	@ (8002204 <HAL_ADC_Init+0x2c4>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7ff fc88 	bl	80019bc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a52      	ldr	r2, [pc, #328]	@ (80021fc <HAL_ADC_Init+0x2bc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d129      	bne.n	800210a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e5b      	ldrb	r3, [r3, #25]
 80020ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020c0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80020c6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d013      	beq.n	80020f8 <HAL_ADC_Init+0x1b8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d00d      	beq.n	80020f4 <HAL_ADC_Init+0x1b4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b1c      	cmp	r3, #28
 80020de:	d007      	beq.n	80020f0 <HAL_ADC_Init+0x1b0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b18      	cmp	r3, #24
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_Init+0x1ac>
 80020e8:	2318      	movs	r3, #24
 80020ea:	e006      	b.n	80020fa <HAL_ADC_Init+0x1ba>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e004      	b.n	80020fa <HAL_ADC_Init+0x1ba>
 80020f0:	2310      	movs	r3, #16
 80020f2:	e002      	b.n	80020fa <HAL_ADC_Init+0x1ba>
 80020f4:	2308      	movs	r3, #8
 80020f6:	e000      	b.n	80020fa <HAL_ADC_Init+0x1ba>
 80020f8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80020fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e00e      	b.n	8002128 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
 800210e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002114:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800211a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002122:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d106      	bne.n	8002140 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	3b01      	subs	r3, #1
 8002138:	045b      	lsls	r3, r3, #17
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	2b00      	cmp	r3, #0
 8002146:	d009      	beq.n	800215c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_ADC_Init+0x2bc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d115      	bne.n	8002192 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <HAL_ADC_Init+0x2c8>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	430b      	orrs	r3, r1
 8002178:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	e009      	b.n	80021a6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_ADC_Init+0x2cc>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	430b      	orrs	r3, r1
 80021a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fea1 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 80021b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff feae 	bl	8001f18 <LL_ADC_INJ_IsConversionOngoing>
 80021bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 808e 	bne.w	80022e2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 808a 	bne.w	80022e2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_ADC_Init+0x2bc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d11b      	bne.n	8002210 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e1b      	ldrb	r3, [r3, #24]
 80021dc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021e4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e018      	b.n	800221e <HAL_ADC_Init+0x2de>
 80021ec:	24000000 	.word	0x24000000
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40022100 	.word	0x40022100
 80021fc:	58026000 	.word	0x58026000
 8002200:	40022300 	.word	0x40022300
 8002204:	58026300 	.word	0x58026300
 8002208:	fff04007 	.word	0xfff04007
 800220c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <HAL_ADC_Init+0x400>)
 8002226:	4013      	ands	r3, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	69b9      	ldr	r1, [r7, #24]
 800222e:	430b      	orrs	r3, r1
 8002230:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002238:	2b01      	cmp	r3, #1
 800223a:	d137      	bne.n	80022ac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3f      	ldr	r2, [pc, #252]	@ (8002344 <HAL_ADC_Init+0x404>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d116      	bne.n	800227a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_ADC_Init+0x408>)
 8002254:	4013      	ands	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800226a:	430a      	orrs	r2, r1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	e020      	b.n	80022bc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b32      	ldr	r3, [pc, #200]	@ (800234c <HAL_ADC_Init+0x40c>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002288:	3a01      	subs	r2, #1
 800228a:	0411      	lsls	r1, r2, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800229c:	430a      	orrs	r2, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	e007      	b.n	80022bc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_ADC_Init+0x404>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 ff59 	bl	8003194 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10c      	bne.n	8002304 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	f023 010f 	bic.w	r1, r3, #15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30
 8002302:	e007      	b.n	8002314 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 020f 	bic.w	r2, r2, #15
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	f023 0303 	bic.w	r3, r3, #3
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	661a      	str	r2, [r3, #96]	@ 0x60
 8002324:	e007      	b.n	8002336 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002336:	7ffb      	ldrb	r3, [r7, #31]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3724      	adds	r7, #36	@ 0x24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	ffffbffc 	.word	0xffffbffc
 8002344:	58026000 	.word	0x58026000
 8002348:	fc00f81f 	.word	0xfc00f81f
 800234c:	fc00f81e 	.word	0xfc00f81e

08002350 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a87      	ldr	r2, [pc, #540]	@ (8002590 <HAL_ADC_IRQHandler+0x240>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_IRQHandler+0x30>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a86      	ldr	r2, [pc, #536]	@ (8002594 <HAL_ADC_IRQHandler+0x244>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_ADC_IRQHandler+0x34>
 8002380:	4b85      	ldr	r3, [pc, #532]	@ (8002598 <HAL_ADC_IRQHandler+0x248>)
 8002382:	e000      	b.n	8002386 <HAL_ADC_IRQHandler+0x36>
 8002384:	4b85      	ldr	r3, [pc, #532]	@ (800259c <HAL_ADC_IRQHandler+0x24c>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fd36 	bl	8001df8 <LL_ADC_GetMultimode>
 800238c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x78>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d012      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 f826 	bl	800340c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_IRQHandler+0x8c>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8083 	beq.w	80024ee <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d07d      	beq.n	80024ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002402:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fc34 	bl	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d062      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_ADC_IRQHandler+0x244>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d002      	beq.n	800242a <HAL_ADC_IRQHandler+0xda>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e000      	b.n	800242c <HAL_ADC_IRQHandler+0xdc>
 800242a:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_ADC_IRQHandler+0x240>)
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4293      	cmp	r3, r2
 8002432:	d008      	beq.n	8002446 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d002      	beq.n	8002446 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b09      	cmp	r3, #9
 8002444:	d104      	bne.n	8002450 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	e00c      	b.n	800246a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4f      	ldr	r2, [pc, #316]	@ (8002594 <HAL_ADC_IRQHandler+0x244>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d002      	beq.n	8002460 <HAL_ADC_IRQHandler+0x110>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e000      	b.n	8002462 <HAL_ADC_IRQHandler+0x112>
 8002460:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_ADC_IRQHandler+0x240>)
 8002462:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d135      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d12e      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd33 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 020c 	bic.w	r2, r2, #12
 80024a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80024c6:	e00b      	b.n	80024e0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024cc:	f043 0210 	orr.w	r2, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fce9 	bl	8000eb8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	220c      	movs	r2, #12
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_IRQHandler+0x1b2>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a0 	beq.w	800264e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 809a 	beq.w	800264e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fbdf 	bl	8001cfa <LL_ADC_INJ_IsTriggerSourceSWStart>
 800253c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fb9a 	bl	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002548:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_ADC_IRQHandler+0x244>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_IRQHandler+0x20a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e000      	b.n	800255c <HAL_ADC_IRQHandler+0x20c>
 800255a:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <HAL_ADC_IRQHandler+0x240>)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	4293      	cmp	r3, r2
 8002562:	d008      	beq.n	8002576 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d002      	beq.n	8002576 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b07      	cmp	r3, #7
 8002574:	d104      	bne.n	8002580 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	e014      	b.n	80025aa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a03      	ldr	r2, [pc, #12]	@ (8002594 <HAL_ADC_IRQHandler+0x244>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00a      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x250>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e008      	b.n	80025a2 <HAL_ADC_IRQHandler+0x252>
 8002590:	40022000 	.word	0x40022000
 8002594:	40022100 	.word	0x40022100
 8002598:	40022300 	.word	0x40022300
 800259c:	58026300 	.word	0x58026300
 80025a0:	4b84      	ldr	r3, [pc, #528]	@ (80027b4 <HAL_ADC_IRQHandler+0x464>)
 80025a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d047      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_ADC_IRQHandler+0x27a>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03f      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d13a      	bne.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d133      	bne.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d12e      	bne.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc96 	bl	8001f18 <LL_ADC_INJ_IsConversionOngoing>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11a      	bne.n	8002628 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002600:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002606:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	661a      	str	r2, [r3, #96]	@ 0x60
 8002626:	e00b      	b.n	8002640 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 febb 	bl	80033bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2260      	movs	r2, #96	@ 0x60
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d011      	beq.n	800267c <HAL_ADC_IRQHandler+0x32c>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002666:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8a8 	bl	80027c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_ADC_IRQHandler+0x35c>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002694:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fea1 	bl	80033e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_ADC_IRQHandler+0x38c>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fe93 	bl	80033f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d043      	beq.n	800276e <HAL_ADC_IRQHandler+0x41e>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d03e      	beq.n	800276e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fc:	e021      	b.n	8002742 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <HAL_ADC_IRQHandler+0x464>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_ADC_IRQHandler+0x3c8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a29      	ldr	r2, [pc, #164]	@ (80027b8 <HAL_ADC_IRQHandler+0x468>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_ADC_IRQHandler+0x3cc>
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_ADC_IRQHandler+0x46c>)
 800271a:	e000      	b.n	800271e <HAL_ADC_IRQHandler+0x3ce>
 800271c:	4b28      	ldr	r3, [pc, #160]	@ (80027c0 <HAL_ADC_IRQHandler+0x470>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fb78 	bl	8001e14 <LL_ADC_GetMultiDMATransfer>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800272a:	2301      	movs	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
 800272e:	e008      	b.n	8002742 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800273e:	2301      	movs	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10e      	bne.n	8002766 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f839 	bl	80027d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d018      	beq.n	80027aa <HAL_ADC_IRQHandler+0x45a>
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d013      	beq.n	80027aa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002792:	f043 0208 	orr.w	r2, r3, #8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fe13 	bl	80033d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	@ 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022100 	.word	0x40022100
 80027bc:	40022300 	.word	0x40022300
 80027c0:	58026300 	.word	0x58026300

080027c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b0a5      	sub	sp, #148	@ 0x94
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002806:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4aa4      	ldr	r2, [pc, #656]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x2b4>)
 800280e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x34>
 800281a:	2302      	movs	r3, #2
 800281c:	f000 bca2 	b.w	8003164 <HAL_ADC_ConfigChannel+0x978>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb60 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 8486 	bne.w	8003146 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db31      	blt.n	80028a6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a97      	ldr	r2, [pc, #604]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x2b8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d02c      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7e>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2201      	movs	r2, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	e016      	b.n	8002898 <HAL_ADC_ConfigChannel+0xac>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800287a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800287c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e003      	b.n	800288e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8002886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2201      	movs	r2, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	69d1      	ldr	r1, [r2, #28]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7ff f9f5 	bl	8001ca2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb18 	bl	8001ef2 <LL_ADC_REG_IsConversionOngoing>
 80028c2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fb24 	bl	8001f18 <LL_ADC_INJ_IsConversionOngoing>
 80028d0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 824a 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 8245 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f7ff fa13 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a69      	ldr	r2, [pc, #420]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x2b8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10d      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800291e:	e032      	b.n	8002986 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002920:	4b61      	ldr	r3, [pc, #388]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x2bc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800292c:	d10b      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x15a>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	e01d      	b.n	8002982 <HAL_ADC_ConfigChannel+0x196>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_ADC_ConfigChannel+0x180>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	e00a      	b.n	8002982 <HAL_ADC_ConfigChannel+0x196>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d048      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800299e:	f7ff f87b 	bl	8001a98 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3f      	ldr	r2, [pc, #252]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x2b8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d119      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f7ff f913 	bl	8001be4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1ea>
 80029d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1ec>
 80029d6:	2300      	movs	r3, #0
 80029d8:	461a      	mov	r2, r3
 80029da:	f7ff f8e1 	bl	8001ba0 <LL_ADC_SetOffsetSaturation>
 80029de:	e1c8      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x20c>
 80029f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029f6:	e000      	b.n	80029fa <HAL_ADC_ConfigChannel+0x20e>
 80029f8:	2300      	movs	r3, #0
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7ff f8ae 	bl	8001b5c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6919      	ldr	r1, [r3, #16]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d102      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x22a>
 8002a10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a14:	e000      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x22c>
 8002a16:	2300      	movs	r3, #0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f7ff f885 	bl	8001b28 <LL_ADC_SetDataRightShift>
 8002a1e:	e1a8      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x2b8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	f040 815b 	bne.w	8002ce2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f862 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x26c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f857 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 021f 	and.w	r2, r3, #31
 8002a56:	e017      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x29c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f84c 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e003      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x2c0>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	e017      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2e4>
 8002aa0:	47ff0000 	.word	0x47ff0000
 8002aa4:	58026000 	.word	0x58026000
 8002aa8:	5c001000 	.word	0x5c001000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002abc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e003      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f8a3 	bl	8001c28 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f807 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x322>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fffc 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	e017      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x352>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fff1 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x36a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	e011      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x38e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d106      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f84e 	bl	8001c28 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe ffb2 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x3cc>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe ffa7 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 021f 	and.w	r2, r3, #31
 8002bb6:	e017      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x3fc>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe ff9c 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x414>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	e011      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x438>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fff9 	bl	8001c28 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ff5d 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x476>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe ff52 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	e017      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x4a6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2103      	movs	r1, #3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ff47 	bl	8001afc <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	61fb      	str	r3, [r7, #28]
  return result;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x4be>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	e011      	b.n	8002cce <HAL_ADC_ConfigChannel+0x4e2>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	613b      	str	r3, [r7, #16]
  return result;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	e003      	b.n	8002cce <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d14f      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2103      	movs	r1, #3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe ffa4 	bl	8001c28 <LL_ADC_SetOffsetState>
 8002ce0:	e047      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d28:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d107      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d4c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	069b      	lsls	r3, r3, #26
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d107      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d70:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f8a8 	bl	8001ecc <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 81ea 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7fe fff1 	bl	8001d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a7a      	ldr	r2, [pc, #488]	@ (8002f84 <HAL_ADC_ConfigChannel+0x798>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	f040 80e0 	bne.w	8002f62 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4977      	ldr	r1, [pc, #476]	@ (8002f88 <HAL_ADC_ConfigChannel+0x79c>)
 8002dac:	428b      	cmp	r3, r1
 8002dae:	d147      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x654>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4975      	ldr	r1, [pc, #468]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7a0>)
 8002db6:	428b      	cmp	r3, r1
 8002db8:	d040      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x650>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4974      	ldr	r1, [pc, #464]	@ (8002f90 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d039      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x64c>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4972      	ldr	r1, [pc, #456]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7a8>)
 8002dca:	428b      	cmp	r3, r1
 8002dcc:	d032      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x648>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4971      	ldr	r1, [pc, #452]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7ac>)
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	d02b      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x644>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	496f      	ldr	r1, [pc, #444]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8002dde:	428b      	cmp	r3, r1
 8002de0:	d024      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x640>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	496e      	ldr	r1, [pc, #440]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d01d      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x63c>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	496c      	ldr	r1, [pc, #432]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002df2:	428b      	cmp	r3, r1
 8002df4:	d016      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0x638>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	496b      	ldr	r1, [pc, #428]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	d00f      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x634>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4969      	ldr	r1, [pc, #420]	@ (8002fac <HAL_ADC_ConfigChannel+0x7c0>)
 8002e06:	428b      	cmp	r3, r1
 8002e08:	d008      	beq.n	8002e1c <HAL_ADC_ConfigChannel+0x630>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4968      	ldr	r1, [pc, #416]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x62c>
 8002e14:	4b67      	ldr	r3, [pc, #412]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e16:	e0a0      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e09e      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e1e:	e09c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e20:	4b66      	ldr	r3, [pc, #408]	@ (8002fbc <HAL_ADC_ConfigChannel+0x7d0>)
 8002e22:	e09a      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e24:	4b60      	ldr	r3, [pc, #384]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e26:	e098      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e28:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e2a:	e096      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e2c:	4b64      	ldr	r3, [pc, #400]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e2e:	e094      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e30:	4b64      	ldr	r3, [pc, #400]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e32:	e092      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e34:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e36:	e090      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e38:	4b64      	ldr	r3, [pc, #400]	@ (8002fcc <HAL_ADC_ConfigChannel+0x7e0>)
 8002e3a:	e08e      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e08c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4962      	ldr	r1, [pc, #392]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e46:	428b      	cmp	r3, r1
 8002e48:	d140      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x6e0>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	494f      	ldr	r1, [pc, #316]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7a0>)
 8002e50:	428b      	cmp	r3, r1
 8002e52:	d039      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x6dc>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	494d      	ldr	r1, [pc, #308]	@ (8002f90 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e5a:	428b      	cmp	r3, r1
 8002e5c:	d032      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x6d8>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	494c      	ldr	r1, [pc, #304]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d02b      	beq.n	8002ec0 <HAL_ADC_ConfigChannel+0x6d4>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	494a      	ldr	r1, [pc, #296]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e6e:	428b      	cmp	r3, r1
 8002e70:	d024      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x6d0>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4949      	ldr	r1, [pc, #292]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x6cc>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4947      	ldr	r1, [pc, #284]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d016      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x6c8>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4946      	ldr	r1, [pc, #280]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x6c4>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4944      	ldr	r1, [pc, #272]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e96:	428b      	cmp	r3, r1
 8002e98:	d008      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x6c0>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4944      	ldr	r1, [pc, #272]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x6bc>
 8002ea4:	4b43      	ldr	r3, [pc, #268]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ea6:	e058      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e056      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002eac:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <HAL_ADC_ConfigChannel+0x7d0>)
 8002eae:	e054      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002eb2:	e052      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002eb6:	e050      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002eb8:	4b41      	ldr	r3, [pc, #260]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002eba:	e04e      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ebe:	e04c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ec0:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ec2:	e04a      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ec4:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_ADC_ConfigChannel+0x7e0>)
 8002ec6:	e048      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e046      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4940      	ldr	r1, [pc, #256]	@ (8002fd4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ed2:	428b      	cmp	r3, r1
 8002ed4:	d140      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x76c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	492c      	ldr	r1, [pc, #176]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7a0>)
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d039      	beq.n	8002f54 <HAL_ADC_ConfigChannel+0x768>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	492a      	ldr	r1, [pc, #168]	@ (8002f90 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	d032      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x764>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4929      	ldr	r1, [pc, #164]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d02b      	beq.n	8002f4c <HAL_ADC_ConfigChannel+0x760>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4927      	ldr	r1, [pc, #156]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7ac>)
 8002efa:	428b      	cmp	r3, r1
 8002efc:	d024      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0x75c>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4926      	ldr	r1, [pc, #152]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d01d      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x758>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4924      	ldr	r1, [pc, #144]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d016      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x754>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4923      	ldr	r1, [pc, #140]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d00f      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x750>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4926      	ldr	r1, [pc, #152]	@ (8002fbc <HAL_ADC_ConfigChannel+0x7d0>)
 8002f22:	428b      	cmp	r3, r1
 8002f24:	d008      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x74c>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	492b      	ldr	r1, [pc, #172]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x748>
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7f0>)
 8002f32:	e012      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f34:	2300      	movs	r3, #0
 8002f36:	e010      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f38:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f3a:	e00e      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f3e:	e00c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f40:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f42:	e00a      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f44:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f46:	e008      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f4a:	e006      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f50:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_ADC_ConfigChannel+0x7e0>)
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x76e>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7fe fd61 	bl	8001a24 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f280 80f6 	bge.w	8003158 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <HAL_ADC_ConfigChannel+0x79c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0x794>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d131      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x7f8>
 8002f80:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f82:	e030      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x7fa>
 8002f84:	47ff0000 	.word	0x47ff0000
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	04300002 	.word	0x04300002
 8002f90:	08600004 	.word	0x08600004
 8002f94:	0c900008 	.word	0x0c900008
 8002f98:	10c00010 	.word	0x10c00010
 8002f9c:	14f00020 	.word	0x14f00020
 8002fa0:	2a000400 	.word	0x2a000400
 8002fa4:	2e300800 	.word	0x2e300800
 8002fa8:	32601000 	.word	0x32601000
 8002fac:	43210000 	.word	0x43210000
 8002fb0:	4b840000 	.word	0x4b840000
 8002fb4:	4fb80000 	.word	0x4fb80000
 8002fb8:	47520000 	.word	0x47520000
 8002fbc:	36902000 	.word	0x36902000
 8002fc0:	25b00200 	.word	0x25b00200
 8002fc4:	21800100 	.word	0x21800100
 8002fc8:	1d500080 	.word	0x1d500080
 8002fcc:	19200040 	.word	0x19200040
 8002fd0:	40022100 	.word	0x40022100
 8002fd4:	58026000 	.word	0x58026000
 8002fd8:	3ac04000 	.word	0x3ac04000
 8002fdc:	3ef08000 	.word	0x3ef08000
 8002fe0:	40022300 	.word	0x40022300
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <HAL_ADC_ConfigChannel+0x980>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fd0e 	bl	8001a08 <LL_ADC_GetCommonPathInternalCh>
 8002fec:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8003170 <HAL_ADC_ConfigChannel+0x984>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x816>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8003174 <HAL_ADC_ConfigChannel+0x988>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10e      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x834>
 8003002:	485b      	ldr	r0, [pc, #364]	@ (8003170 <HAL_ADC_ConfigChannel+0x984>)
 8003004:	f7fe ff62 	bl	8001ecc <LL_ADC_IsEnabled>
 8003008:	4604      	mov	r4, r0
 800300a:	485a      	ldr	r0, [pc, #360]	@ (8003174 <HAL_ADC_ConfigChannel+0x988>)
 800300c:	f7fe ff5e 	bl	8001ecc <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e008      	b.n	8003032 <HAL_ADC_ConfigChannel+0x846>
 8003020:	4855      	ldr	r0, [pc, #340]	@ (8003178 <HAL_ADC_ConfigChannel+0x98c>)
 8003022:	f7fe ff53 	bl	8001ecc <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d07d      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a50      	ldr	r2, [pc, #320]	@ (800317c <HAL_ADC_ConfigChannel+0x990>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d130      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x8b6>
 8003040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12b      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4a      	ldr	r2, [pc, #296]	@ (8003178 <HAL_ADC_ConfigChannel+0x98c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	f040 8081 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a45      	ldr	r2, [pc, #276]	@ (8003170 <HAL_ADC_ConfigChannel+0x984>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_ADC_ConfigChannel+0x87e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a43      	ldr	r2, [pc, #268]	@ (8003174 <HAL_ADC_ConfigChannel+0x988>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x882>
 800306a:	4a45      	ldr	r2, [pc, #276]	@ (8003180 <HAL_ADC_ConfigChannel+0x994>)
 800306c:	e000      	b.n	8003070 <HAL_ADC_ConfigChannel+0x884>
 800306e:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <HAL_ADC_ConfigChannel+0x980>)
 8003070:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7fe fcb2 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800307e:	4b41      	ldr	r3, [pc, #260]	@ (8003184 <HAL_ADC_ConfigChannel+0x998>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	4a40      	ldr	r2, [pc, #256]	@ (8003188 <HAL_ADC_ConfigChannel+0x99c>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003092:	e002      	b.n	800309a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b01      	subs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a0:	e05a      	b.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_ADC_ConfigChannel+0x9a0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d11e      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x8fe>
 80030ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d119      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <HAL_ADC_ConfigChannel+0x98c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d14b      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003170 <HAL_ADC_ConfigChannel+0x984>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x8e8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a29      	ldr	r2, [pc, #164]	@ (8003174 <HAL_ADC_ConfigChannel+0x988>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x8ec>
 80030d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003180 <HAL_ADC_ConfigChannel+0x994>)
 80030d6:	e000      	b.n	80030da <HAL_ADC_ConfigChannel+0x8ee>
 80030d8:	4a24      	ldr	r2, [pc, #144]	@ (800316c <HAL_ADC_ConfigChannel+0x980>)
 80030da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7fe fc7d 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e8:	e036      	b.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <HAL_ADC_ConfigChannel+0x9a4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d131      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
 80030f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d12c      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_ADC_ConfigChannel+0x98c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d127      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_ADC_ConfigChannel+0x984>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_ADC_ConfigChannel+0x930>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_ADC_ConfigChannel+0x988>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x934>
 800311c:	4a18      	ldr	r2, [pc, #96]	@ (8003180 <HAL_ADC_ConfigChannel+0x994>)
 800311e:	e000      	b.n	8003122 <HAL_ADC_ConfigChannel+0x936>
 8003120:	4a12      	ldr	r2, [pc, #72]	@ (800316c <HAL_ADC_ConfigChannel+0x980>)
 8003122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003124:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7fe fc59 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
 8003130:	e012      	b.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003144:	e008      	b.n	8003158 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003160:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003164:	4618      	mov	r0, r3
 8003166:	3794      	adds	r7, #148	@ 0x94
 8003168:	46bd      	mov	sp, r7
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	58026300 	.word	0x58026300
 8003170:	40022000 	.word	0x40022000
 8003174:	40022100 	.word	0x40022100
 8003178:	58026000 	.word	0x58026000
 800317c:	c7520000 	.word	0xc7520000
 8003180:	40022300 	.word	0x40022300
 8003184:	24000000 	.word	0x24000000
 8003188:	053e2d63 	.word	0x053e2d63
 800318c:	c3210000 	.word	0xc3210000
 8003190:	cb840000 	.word	0xcb840000

08003194 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003354 <ADC_ConfigureBoostMode+0x1c0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <ADC_ConfigureBoostMode+0x1c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003358 <ADC_ConfigureBoostMode+0x1c4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <ADC_ConfigureBoostMode+0x30>
 80031b0:	4b6a      	ldr	r3, [pc, #424]	@ (800335c <ADC_ConfigureBoostMode+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e008      	b.n	80031d6 <ADC_ConfigureBoostMode+0x42>
 80031c4:	4b66      	ldr	r3, [pc, #408]	@ (8003360 <ADC_ConfigureBoostMode+0x1cc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031da:	f004 f975 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 80031de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031e8:	d010      	beq.n	800320c <ADC_ConfigureBoostMode+0x78>
 80031ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031ee:	d873      	bhi.n	80032d8 <ADC_ConfigureBoostMode+0x144>
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f4:	d002      	beq.n	80031fc <ADC_ConfigureBoostMode+0x68>
 80031f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031fa:	d16d      	bne.n	80032d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	60fb      	str	r3, [r7, #12]
        break;
 800320a:	e068      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	60fb      	str	r3, [r7, #12]
        break;
 8003212:	e064      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003214:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	f005 fb50 	bl	80088c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003220:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800322a:	d051      	beq.n	80032d0 <ADC_ConfigureBoostMode+0x13c>
 800322c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003230:	d854      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 8003232:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003236:	d047      	beq.n	80032c8 <ADC_ConfigureBoostMode+0x134>
 8003238:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800323c:	d84e      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 800323e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003242:	d03d      	beq.n	80032c0 <ADC_ConfigureBoostMode+0x12c>
 8003244:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003248:	d848      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324e:	d033      	beq.n	80032b8 <ADC_ConfigureBoostMode+0x124>
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003254:	d842      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 8003256:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800325a:	d029      	beq.n	80032b0 <ADC_ConfigureBoostMode+0x11c>
 800325c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003260:	d83c      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 8003262:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003266:	d01a      	beq.n	800329e <ADC_ConfigureBoostMode+0x10a>
 8003268:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800326c:	d836      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 800326e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003272:	d014      	beq.n	800329e <ADC_ConfigureBoostMode+0x10a>
 8003274:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003278:	d830      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 800327a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800327e:	d00e      	beq.n	800329e <ADC_ConfigureBoostMode+0x10a>
 8003280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003284:	d82a      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 8003286:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800328a:	d008      	beq.n	800329e <ADC_ConfigureBoostMode+0x10a>
 800328c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003290:	d824      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x148>
 8003292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003296:	d002      	beq.n	800329e <ADC_ConfigureBoostMode+0x10a>
 8003298:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800329c:	d11e      	bne.n	80032dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	60fb      	str	r3, [r7, #12]
        break;
 80032ae:	e016      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
        break;
 80032b6:	e012      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	60fb      	str	r3, [r7, #12]
        break;
 80032be:	e00e      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	099b      	lsrs	r3, r3, #6
 80032c4:	60fb      	str	r3, [r7, #12]
        break;
 80032c6:	e00a      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	09db      	lsrs	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
        break;
 80032ce:	e006      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	60fb      	str	r3, [r7, #12]
        break;
 80032d6:	e002      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
        break;
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80032dc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <ADC_ConfigureBoostMode+0x1d0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d808      	bhi.n	80032fe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032fc:	e025      	b.n	800334a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a19      	ldr	r2, [pc, #100]	@ (8003368 <ADC_ConfigureBoostMode+0x1d4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d80a      	bhi.n	800331c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003318:	609a      	str	r2, [r3, #8]
}
 800331a:	e016      	b.n	800334a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a13      	ldr	r2, [pc, #76]	@ (800336c <ADC_ConfigureBoostMode+0x1d8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d80a      	bhi.n	800333a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	e007      	b.n	800334a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003348:	609a      	str	r2, [r3, #8]
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40022000 	.word	0x40022000
 8003358:	40022100 	.word	0x40022100
 800335c:	40022300 	.word	0x40022300
 8003360:	58026300 	.word	0x58026300
 8003364:	005f5e10 	.word	0x005f5e10
 8003368:	00bebc20 	.word	0x00bebc20
 800336c:	017d7840 	.word	0x017d7840

08003370 <LL_ADC_IsEnabled>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <LL_ADC_IsEnabled+0x18>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <LL_ADC_IsEnabled+0x1a>
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_ADC_REG_IsConversionOngoing>:
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d101      	bne.n	80033ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b0a3      	sub	sp, #140	@ 0x8c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e0c1      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800344a:	2300      	movs	r3, #0
 800344c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a5e      	ldr	r2, [pc, #376]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d102      	bne.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003458:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e001      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0a0      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff87 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 8003488:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff80 	bl	8003396 <LL_ADC_REG_IsConversionOngoing>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8081 	bne.w	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800349e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d17c      	bne.n	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a48      	ldr	r2, [pc, #288]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d101      	bne.n	80034be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80034ba:	4b46      	ldr	r3, [pc, #280]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034bc:	e000      	b.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80034be:	4b46      	ldr	r3, [pc, #280]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d039      	beq.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3a      	ldr	r2, [pc, #232]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a39      	ldr	r2, [pc, #228]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10e      	bne.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80034f0:	4836      	ldr	r0, [pc, #216]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034f2:	f7ff ff3d 	bl	8003370 <LL_ADC_IsEnabled>
 80034f6:	4604      	mov	r4, r0
 80034f8:	4835      	ldr	r0, [pc, #212]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034fa:	f7ff ff39 	bl	8003370 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	4323      	orrs	r3, r4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e008      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800350e:	4833      	ldr	r0, [pc, #204]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003510:	f7ff ff2e 	bl	8003370 <LL_ADC_IsEnabled>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b2d      	ldr	r3, [pc, #180]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800352a:	4013      	ands	r3, r2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	6811      	ldr	r1, [r2, #0]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	6892      	ldr	r2, [r2, #8]
 8003534:	430a      	orrs	r2, r1
 8003536:	431a      	orrs	r2, r3
 8003538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800353a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	e03a      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800353e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003548:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1d      	ldr	r2, [pc, #116]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10e      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800355e:	481b      	ldr	r0, [pc, #108]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003560:	f7ff ff06 	bl	8003370 <LL_ADC_IsEnabled>
 8003564:	4604      	mov	r4, r0
 8003566:	481a      	ldr	r0, [pc, #104]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003568:	f7ff ff02 	bl	8003370 <LL_ADC_IsEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	4323      	orrs	r3, r4
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e008      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800357c:	4817      	ldr	r0, [pc, #92]	@ (80035dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800357e:	f7ff fef7 	bl	8003370 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003598:	4013      	ands	r3, r2
 800359a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800359c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800359e:	e009      	b.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80035b2:	e000      	b.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	378c      	adds	r7, #140	@ 0x8c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40022100 	.word	0x40022100
 80035d4:	40022300 	.word	0x40022300
 80035d8:	58026300 	.word	0x58026300
 80035dc:	58026000 	.word	0x58026000
 80035e0:	fffff0e0 	.word	0xfffff0e0

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800360c:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	05fa0000 	.word	0x05fa0000

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	@ (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	@ (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	@ (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	@ 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
         );
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	@ 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003750:	d301      	bcc.n	8003756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <SysTick_Config+0x40>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375e:	210f      	movs	r1, #15
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f7ff ff8e 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <SysTick_Config+0x40>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <SysTick_Config+0x40>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010

08003784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff29 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a8:	f7ff ff40 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff90 	bl	80036d8 <NVIC_EncodePriority>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff5f 	bl	8003684 <__NVIC_SetPriority>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff33 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ffa4 	bl	8003740 <SysTick_Config>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003808:	f3bf 8f5f 	dmb	sy
}
 800380c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800380e:	4b07      	ldr	r3, [pc, #28]	@ (800382c <HAL_MPU_Disable+0x28>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	4a06      	ldr	r2, [pc, #24]	@ (800382c <HAL_MPU_Disable+0x28>)
 8003814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003818:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800381a:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_MPU_Disable+0x2c>)
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00
 8003830:	e000ed90 	.word	0xe000ed90

08003834 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800383c:	4a0b      	ldr	r2, [pc, #44]	@ (800386c <HAL_MPU_Enable+0x38>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <HAL_MPU_Enable+0x3c>)
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <HAL_MPU_Enable+0x3c>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003852:	f3bf 8f4f 	dsb	sy
}
 8003856:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003858:	f3bf 8f6f 	isb	sy
}
 800385c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000ed90 	.word	0xe000ed90
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	785a      	ldrb	r2, [r3, #1]
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003882:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003884:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4a19      	ldr	r2, [pc, #100]	@ (80038f0 <HAL_MPU_ConfigRegion+0x7c>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003890:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7adb      	ldrb	r3, [r3, #11]
 80038a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7a9b      	ldrb	r3, [r3, #10]
 80038aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80038ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7b5b      	ldrb	r3, [r3, #13]
 80038b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80038b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7b9b      	ldrb	r3, [r3, #14]
 80038ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80038bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7bdb      	ldrb	r3, [r3, #15]
 80038c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7a5b      	ldrb	r3, [r3, #9]
 80038ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7a1b      	ldrb	r3, [r3, #8]
 80038d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038dc:	4a04      	ldr	r2, [pc, #16]	@ (80038f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038e0:	6113      	str	r3, [r2, #16]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000ed90 	.word	0xe000ed90

080038f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80038fc:	f7fd ffe2 	bl	80018c4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e312      	b.n	8003f32 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_DMA_Init+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <HAL_DMA_Init+0x1bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_DMA_Init+0x1c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a62      	ldr	r2, [pc, #392]	@ (8003ab8 <HAL_DMA_Init+0x1c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_DMA_Init+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac0 <HAL_DMA_Init+0x1cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_DMA_Init+0x1d0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac8 <HAL_DMA_Init+0x1d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_DMA_Init+0x1d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <HAL_DMA_Init+0x1dc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_DMA_Init+0x1e0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a56      	ldr	r2, [pc, #344]	@ (8003ad8 <HAL_DMA_Init+0x1e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a54      	ldr	r2, [pc, #336]	@ (8003adc <HAL_DMA_Init+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a53      	ldr	r2, [pc, #332]	@ (8003ae0 <HAL_DMA_Init+0x1ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a51      	ldr	r2, [pc, #324]	@ (8003ae4 <HAL_DMA_Init+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a50      	ldr	r2, [pc, #320]	@ (8003ae8 <HAL_DMA_Init+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Init+0xbc>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Init+0xbe>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 813c 	beq.w	8003c30 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a37      	ldr	r2, [pc, #220]	@ (8003aac <HAL_DMA_Init+0x1b8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d04a      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a36      	ldr	r2, [pc, #216]	@ (8003ab0 <HAL_DMA_Init+0x1bc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d045      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a34      	ldr	r2, [pc, #208]	@ (8003ab4 <HAL_DMA_Init+0x1c0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d040      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <HAL_DMA_Init+0x1c4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d03b      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <HAL_DMA_Init+0x1c8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d036      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <HAL_DMA_Init+0x1cc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d031      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <HAL_DMA_Init+0x1d0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02c      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac8 <HAL_DMA_Init+0x1d4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d027      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <HAL_DMA_Init+0x1d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d022      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad0 <HAL_DMA_Init+0x1dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d01d      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a28      	ldr	r2, [pc, #160]	@ (8003ad4 <HAL_DMA_Init+0x1e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ad8 <HAL_DMA_Init+0x1e4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	@ (8003adc <HAL_DMA_Init+0x1e8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <HAL_DMA_Init+0x1ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	@ (8003ae4 <HAL_DMA_Init+0x1f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <HAL_DMA_Init+0x1f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <HAL_DMA_Init+0x186>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e007      	b.n	8003a8a <HAL_DMA_Init+0x196>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a8a:	e02f      	b.n	8003aec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8c:	f7fd ff1a 	bl	80018c4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d928      	bls.n	8003aec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e242      	b.n	8003f32 <HAL_DMA_Init+0x63e>
 8003aac:	40020010 	.word	0x40020010
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	40020040 	.word	0x40020040
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40020070 	.word	0x40020070
 8003ac0:	40020088 	.word	0x40020088
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	400200b8 	.word	0x400200b8
 8003acc:	40020410 	.word	0x40020410
 8003ad0:	40020428 	.word	0x40020428
 8003ad4:	40020440 	.word	0x40020440
 8003ad8:	40020458 	.word	0x40020458
 8003adc:	40020470 	.word	0x40020470
 8003ae0:	40020488 	.word	0x40020488
 8003ae4:	400204a0 	.word	0x400204a0
 8003ae8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1c8      	bne.n	8003a8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4b83      	ldr	r3, [pc, #524]	@ (8003d14 <HAL_DMA_Init+0x420>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b28      	cmp	r3, #40	@ 0x28
 8003b56:	d903      	bls.n	8003b60 <HAL_DMA_Init+0x26c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b5e:	d91f      	bls.n	8003ba0 <HAL_DMA_Init+0x2ac>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b66:	d903      	bls.n	8003b70 <HAL_DMA_Init+0x27c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b42      	cmp	r3, #66	@ 0x42
 8003b6e:	d917      	bls.n	8003ba0 <HAL_DMA_Init+0x2ac>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b46      	cmp	r3, #70	@ 0x46
 8003b76:	d903      	bls.n	8003b80 <HAL_DMA_Init+0x28c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b48      	cmp	r3, #72	@ 0x48
 8003b7e:	d90f      	bls.n	8003ba0 <HAL_DMA_Init+0x2ac>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b86:	d903      	bls.n	8003b90 <HAL_DMA_Init+0x29c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b52      	cmp	r3, #82	@ 0x52
 8003b8e:	d907      	bls.n	8003ba0 <HAL_DMA_Init+0x2ac>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b73      	cmp	r3, #115	@ 0x73
 8003b96:	d905      	bls.n	8003ba4 <HAL_DMA_Init+0x2b0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b77      	cmp	r3, #119	@ 0x77
 8003b9e:	d801      	bhi.n	8003ba4 <HAL_DMA_Init+0x2b0>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_DMA_Init+0x2b2>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bb0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d117      	bne.n	8003c0c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00e      	beq.n	8003c0c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f001 ff18 	bl	8005a24 <DMA_CheckFifoParam>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2240      	movs	r2, #64	@ 0x40
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e192      	b.n	8003f32 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 fe53 	bl	80058c0 <DMA_CalcBaseAndBitshift>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	223f      	movs	r2, #63	@ 0x3f
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	e0c8      	b.n	8003dc2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_DMA_Init+0x424>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a37      	ldr	r2, [pc, #220]	@ (8003d1c <HAL_DMA_Init+0x428>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	@ (8003d20 <HAL_DMA_Init+0x42c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d018      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <HAL_DMA_Init+0x430>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d013      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a32      	ldr	r2, [pc, #200]	@ (8003d28 <HAL_DMA_Init+0x434>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00e      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a31      	ldr	r2, [pc, #196]	@ (8003d2c <HAL_DMA_Init+0x438>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <HAL_DMA_Init+0x43c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_Init+0x38c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d34 <HAL_DMA_Init+0x440>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA_Init+0x390>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_Init+0x392>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8092 	beq.w	8003db0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a21      	ldr	r2, [pc, #132]	@ (8003d18 <HAL_DMA_Init+0x424>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d021      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a20      	ldr	r2, [pc, #128]	@ (8003d1c <HAL_DMA_Init+0x428>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01c      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <HAL_DMA_Init+0x42c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d017      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_DMA_Init+0x430>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d012      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d28 <HAL_DMA_Init+0x434>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d2c <HAL_DMA_Init+0x438>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d008      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a18      	ldr	r2, [pc, #96]	@ (8003d30 <HAL_DMA_Init+0x43c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA_Init+0x3e6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <HAL_DMA_Init+0x440>)
 8003cd8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_DMA_Init+0x444>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d01c      	beq.n	8003d3c <HAL_DMA_Init+0x448>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d102      	bne.n	8003d10 <HAL_DMA_Init+0x41c>
 8003d0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d0e:	e016      	b.n	8003d3e <HAL_DMA_Init+0x44a>
 8003d10:	2300      	movs	r3, #0
 8003d12:	e014      	b.n	8003d3e <HAL_DMA_Init+0x44a>
 8003d14:	fe10803f 	.word	0xfe10803f
 8003d18:	58025408 	.word	0x58025408
 8003d1c:	5802541c 	.word	0x5802541c
 8003d20:	58025430 	.word	0x58025430
 8003d24:	58025444 	.word	0x58025444
 8003d28:	58025458 	.word	0x58025458
 8003d2c:	5802546c 	.word	0x5802546c
 8003d30:	58025480 	.word	0x58025480
 8003d34:	58025494 	.word	0x58025494
 8003d38:	fffe000f 	.word	0xfffe000f
 8003d3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b6e      	ldr	r3, [pc, #440]	@ (8003f3c <HAL_DMA_Init+0x648>)
 8003d84:	4413      	add	r3, r2
 8003d86:	4a6e      	ldr	r2, [pc, #440]	@ (8003f40 <HAL_DMA_Init+0x64c>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	009a      	lsls	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 fd93 	bl	80058c0 <DMA_CalcBaseAndBitshift>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2201      	movs	r2, #1
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e008      	b.n	8003dc2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2240      	movs	r2, #64	@ 0x40
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0b7      	b.n	8003f32 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f44 <HAL_DMA_Init+0x650>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d072      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f48 <HAL_DMA_Init+0x654>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d06d      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5c      	ldr	r2, [pc, #368]	@ (8003f4c <HAL_DMA_Init+0x658>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d068      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_DMA_Init+0x65c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d063      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a59      	ldr	r2, [pc, #356]	@ (8003f54 <HAL_DMA_Init+0x660>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d05e      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a57      	ldr	r2, [pc, #348]	@ (8003f58 <HAL_DMA_Init+0x664>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d059      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a56      	ldr	r2, [pc, #344]	@ (8003f5c <HAL_DMA_Init+0x668>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d054      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a54      	ldr	r2, [pc, #336]	@ (8003f60 <HAL_DMA_Init+0x66c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04f      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a53      	ldr	r2, [pc, #332]	@ (8003f64 <HAL_DMA_Init+0x670>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d04a      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a51      	ldr	r2, [pc, #324]	@ (8003f68 <HAL_DMA_Init+0x674>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d045      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a50      	ldr	r2, [pc, #320]	@ (8003f6c <HAL_DMA_Init+0x678>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d040      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a4e      	ldr	r2, [pc, #312]	@ (8003f70 <HAL_DMA_Init+0x67c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d03b      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f74 <HAL_DMA_Init+0x680>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d036      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a4b      	ldr	r2, [pc, #300]	@ (8003f78 <HAL_DMA_Init+0x684>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d031      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4a      	ldr	r2, [pc, #296]	@ (8003f7c <HAL_DMA_Init+0x688>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d02c      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a48      	ldr	r2, [pc, #288]	@ (8003f80 <HAL_DMA_Init+0x68c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d027      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a47      	ldr	r2, [pc, #284]	@ (8003f84 <HAL_DMA_Init+0x690>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a45      	ldr	r2, [pc, #276]	@ (8003f88 <HAL_DMA_Init+0x694>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a44      	ldr	r2, [pc, #272]	@ (8003f8c <HAL_DMA_Init+0x698>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d018      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <HAL_DMA_Init+0x69c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <HAL_DMA_Init+0x6a0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3f      	ldr	r2, [pc, #252]	@ (8003f98 <HAL_DMA_Init+0x6a4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8003f9c <HAL_DMA_Init+0x6a8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Init+0x5be>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa0 <HAL_DMA_Init+0x6ac>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Init+0x5c2>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_Init+0x5c4>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d032      	beq.n	8003f22 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f001 fe2d 	bl	8005b1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ee4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d010      	beq.n	8003f10 <HAL_DMA_Init+0x61c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d80c      	bhi.n	8003f10 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 feaa 	bl	8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e008      	b.n	8003f22 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	a7fdabf8 	.word	0xa7fdabf8
 8003f40:	cccccccd 	.word	0xcccccccd
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	58025408 	.word	0x58025408
 8003f88:	5802541c 	.word	0x5802541c
 8003f8c:	58025430 	.word	0x58025430
 8003f90:	58025444 	.word	0x58025444
 8003f94:	58025458 	.word	0x58025458
 8003f98:	5802546c 	.word	0x5802546c
 8003f9c:	58025480 	.word	0x58025480
 8003fa0:	58025494 	.word	0x58025494

08003fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7fd fc8a 	bl	80018c4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e2dc      	b.n	8004576 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e2cd      	b.n	8004576 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a76      	ldr	r2, [pc, #472]	@ (80041b8 <HAL_DMA_Abort+0x214>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a74      	ldr	r2, [pc, #464]	@ (80041bc <HAL_DMA_Abort+0x218>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a73      	ldr	r2, [pc, #460]	@ (80041c0 <HAL_DMA_Abort+0x21c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a71      	ldr	r2, [pc, #452]	@ (80041c4 <HAL_DMA_Abort+0x220>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a70      	ldr	r2, [pc, #448]	@ (80041c8 <HAL_DMA_Abort+0x224>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_DMA_Abort+0x228>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a6d      	ldr	r2, [pc, #436]	@ (80041d0 <HAL_DMA_Abort+0x22c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6b      	ldr	r2, [pc, #428]	@ (80041d4 <HAL_DMA_Abort+0x230>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6a      	ldr	r2, [pc, #424]	@ (80041d8 <HAL_DMA_Abort+0x234>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a68      	ldr	r2, [pc, #416]	@ (80041dc <HAL_DMA_Abort+0x238>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a67      	ldr	r2, [pc, #412]	@ (80041e0 <HAL_DMA_Abort+0x23c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a65      	ldr	r2, [pc, #404]	@ (80041e4 <HAL_DMA_Abort+0x240>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a64      	ldr	r2, [pc, #400]	@ (80041e8 <HAL_DMA_Abort+0x244>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a62      	ldr	r2, [pc, #392]	@ (80041ec <HAL_DMA_Abort+0x248>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a61      	ldr	r2, [pc, #388]	@ (80041f0 <HAL_DMA_Abort+0x24c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Abort+0xd6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5f      	ldr	r2, [pc, #380]	@ (80041f4 <HAL_DMA_Abort+0x250>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_DMA_Abort+0xda>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_DMA_Abort+0xdc>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 021e 	bic.w	r2, r2, #30
 8004092:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e00a      	b.n	80040c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020e 	bic.w	r2, r2, #14
 80040ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3c      	ldr	r2, [pc, #240]	@ (80041b8 <HAL_DMA_Abort+0x214>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d072      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a3a      	ldr	r2, [pc, #232]	@ (80041bc <HAL_DMA_Abort+0x218>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d06d      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a39      	ldr	r2, [pc, #228]	@ (80041c0 <HAL_DMA_Abort+0x21c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d068      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <HAL_DMA_Abort+0x220>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d063      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a36      	ldr	r2, [pc, #216]	@ (80041c8 <HAL_DMA_Abort+0x224>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d05e      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a34      	ldr	r2, [pc, #208]	@ (80041cc <HAL_DMA_Abort+0x228>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d059      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <HAL_DMA_Abort+0x22c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d054      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <HAL_DMA_Abort+0x230>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d04f      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <HAL_DMA_Abort+0x234>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d04a      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <HAL_DMA_Abort+0x238>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d045      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2d      	ldr	r2, [pc, #180]	@ (80041e0 <HAL_DMA_Abort+0x23c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d040      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <HAL_DMA_Abort+0x240>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d03b      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2a      	ldr	r2, [pc, #168]	@ (80041e8 <HAL_DMA_Abort+0x244>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d036      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_DMA_Abort+0x248>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d031      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <HAL_DMA_Abort+0x24c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d02c      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <HAL_DMA_Abort+0x250>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d027      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <HAL_DMA_Abort+0x254>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d022      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <HAL_DMA_Abort+0x258>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01d      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <HAL_DMA_Abort+0x25c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d018      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <HAL_DMA_Abort+0x260>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d013      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_DMA_Abort+0x264>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <HAL_DMA_Abort+0x268>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004210 <HAL_DMA_Abort+0x26c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_DMA_Abort+0x20e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_DMA_Abort+0x270>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d132      	bne.n	8004218 <HAL_DMA_Abort+0x274>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e031      	b.n	800421a <HAL_DMA_Abort+0x276>
 80041b6:	bf00      	nop
 80041b8:	40020010 	.word	0x40020010
 80041bc:	40020028 	.word	0x40020028
 80041c0:	40020040 	.word	0x40020040
 80041c4:	40020058 	.word	0x40020058
 80041c8:	40020070 	.word	0x40020070
 80041cc:	40020088 	.word	0x40020088
 80041d0:	400200a0 	.word	0x400200a0
 80041d4:	400200b8 	.word	0x400200b8
 80041d8:	40020410 	.word	0x40020410
 80041dc:	40020428 	.word	0x40020428
 80041e0:	40020440 	.word	0x40020440
 80041e4:	40020458 	.word	0x40020458
 80041e8:	40020470 	.word	0x40020470
 80041ec:	40020488 	.word	0x40020488
 80041f0:	400204a0 	.word	0x400204a0
 80041f4:	400204b8 	.word	0x400204b8
 80041f8:	58025408 	.word	0x58025408
 80041fc:	5802541c 	.word	0x5802541c
 8004200:	58025430 	.word	0x58025430
 8004204:	58025444 	.word	0x58025444
 8004208:	58025458 	.word	0x58025458
 800420c:	5802546c 	.word	0x5802546c
 8004210:	58025480 	.word	0x58025480
 8004214:	58025494 	.word	0x58025494
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800422c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a6d      	ldr	r2, [pc, #436]	@ (80043e8 <HAL_DMA_Abort+0x444>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6b      	ldr	r2, [pc, #428]	@ (80043ec <HAL_DMA_Abort+0x448>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <HAL_DMA_Abort+0x44c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a68      	ldr	r2, [pc, #416]	@ (80043f4 <HAL_DMA_Abort+0x450>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a67      	ldr	r2, [pc, #412]	@ (80043f8 <HAL_DMA_Abort+0x454>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	@ (80043fc <HAL_DMA_Abort+0x458>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a64      	ldr	r2, [pc, #400]	@ (8004400 <HAL_DMA_Abort+0x45c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a62      	ldr	r2, [pc, #392]	@ (8004404 <HAL_DMA_Abort+0x460>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a61      	ldr	r2, [pc, #388]	@ (8004408 <HAL_DMA_Abort+0x464>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5f      	ldr	r2, [pc, #380]	@ (800440c <HAL_DMA_Abort+0x468>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a5e      	ldr	r2, [pc, #376]	@ (8004410 <HAL_DMA_Abort+0x46c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <HAL_DMA_Abort+0x470>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004418 <HAL_DMA_Abort+0x474>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a59      	ldr	r2, [pc, #356]	@ (800441c <HAL_DMA_Abort+0x478>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a58      	ldr	r2, [pc, #352]	@ (8004420 <HAL_DMA_Abort+0x47c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_Abort+0x32a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a56      	ldr	r2, [pc, #344]	@ (8004424 <HAL_DMA_Abort+0x480>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_DMA_Abort+0x33c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <HAL_DMA_Abort+0x34c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042f0:	e013      	b.n	800431a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042f2:	f7fd fae7 	bl	80018c4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	d90c      	bls.n	800431a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2203      	movs	r2, #3
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e12d      	b.n	8004576 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <HAL_DMA_Abort+0x444>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04a      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2d      	ldr	r2, [pc, #180]	@ (80043ec <HAL_DMA_Abort+0x448>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d045      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2c      	ldr	r2, [pc, #176]	@ (80043f0 <HAL_DMA_Abort+0x44c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d040      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2a      	ldr	r2, [pc, #168]	@ (80043f4 <HAL_DMA_Abort+0x450>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d03b      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a29      	ldr	r2, [pc, #164]	@ (80043f8 <HAL_DMA_Abort+0x454>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d036      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a27      	ldr	r2, [pc, #156]	@ (80043fc <HAL_DMA_Abort+0x458>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d031      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a26      	ldr	r2, [pc, #152]	@ (8004400 <HAL_DMA_Abort+0x45c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d02c      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a24      	ldr	r2, [pc, #144]	@ (8004404 <HAL_DMA_Abort+0x460>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d027      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a23      	ldr	r2, [pc, #140]	@ (8004408 <HAL_DMA_Abort+0x464>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a21      	ldr	r2, [pc, #132]	@ (800440c <HAL_DMA_Abort+0x468>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01d      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <HAL_DMA_Abort+0x46c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1e      	ldr	r2, [pc, #120]	@ (8004414 <HAL_DMA_Abort+0x470>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004418 <HAL_DMA_Abort+0x474>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_DMA_Abort+0x478>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004420 <HAL_DMA_Abort+0x47c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_DMA_Abort+0x422>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <HAL_DMA_Abort+0x480>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <HAL_DMA_Abort+0x426>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_DMA_Abort+0x428>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02b      	beq.n	8004428 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	223f      	movs	r2, #63	@ 0x3f
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	e02a      	b.n	800443e <HAL_DMA_Abort+0x49a>
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a4f      	ldr	r2, [pc, #316]	@ (8004580 <HAL_DMA_Abort+0x5dc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d072      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a4d      	ldr	r2, [pc, #308]	@ (8004584 <HAL_DMA_Abort+0x5e0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d06d      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4c      	ldr	r2, [pc, #304]	@ (8004588 <HAL_DMA_Abort+0x5e4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d068      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a4a      	ldr	r2, [pc, #296]	@ (800458c <HAL_DMA_Abort+0x5e8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d063      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a49      	ldr	r2, [pc, #292]	@ (8004590 <HAL_DMA_Abort+0x5ec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d05e      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a47      	ldr	r2, [pc, #284]	@ (8004594 <HAL_DMA_Abort+0x5f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d059      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a46      	ldr	r2, [pc, #280]	@ (8004598 <HAL_DMA_Abort+0x5f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d054      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a44      	ldr	r2, [pc, #272]	@ (800459c <HAL_DMA_Abort+0x5f8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04f      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a43      	ldr	r2, [pc, #268]	@ (80045a0 <HAL_DMA_Abort+0x5fc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d04a      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a41      	ldr	r2, [pc, #260]	@ (80045a4 <HAL_DMA_Abort+0x600>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d045      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a40      	ldr	r2, [pc, #256]	@ (80045a8 <HAL_DMA_Abort+0x604>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d040      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3e      	ldr	r2, [pc, #248]	@ (80045ac <HAL_DMA_Abort+0x608>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3d      	ldr	r2, [pc, #244]	@ (80045b0 <HAL_DMA_Abort+0x60c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d036      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3b      	ldr	r2, [pc, #236]	@ (80045b4 <HAL_DMA_Abort+0x610>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3a      	ldr	r2, [pc, #232]	@ (80045b8 <HAL_DMA_Abort+0x614>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d02c      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a38      	ldr	r2, [pc, #224]	@ (80045bc <HAL_DMA_Abort+0x618>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d027      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a37      	ldr	r2, [pc, #220]	@ (80045c0 <HAL_DMA_Abort+0x61c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <HAL_DMA_Abort+0x620>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a34      	ldr	r2, [pc, #208]	@ (80045c8 <HAL_DMA_Abort+0x624>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a32      	ldr	r2, [pc, #200]	@ (80045cc <HAL_DMA_Abort+0x628>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a31      	ldr	r2, [pc, #196]	@ (80045d0 <HAL_DMA_Abort+0x62c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <HAL_DMA_Abort+0x630>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <HAL_DMA_Abort+0x634>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_DMA_Abort+0x58a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2c      	ldr	r2, [pc, #176]	@ (80045dc <HAL_DMA_Abort+0x638>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_DMA_Abort+0x58e>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_DMA_Abort+0x590>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004540:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004558:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004562:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	58025408 	.word	0x58025408
 80045c4:	5802541c 	.word	0x5802541c
 80045c8:	58025430 	.word	0x58025430
 80045cc:	58025444 	.word	0x58025444
 80045d0:	58025458 	.word	0x58025458
 80045d4:	5802546c 	.word	0x5802546c
 80045d8:	58025480 	.word	0x58025480
 80045dc:	58025494 	.word	0x58025494

080045e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e237      	b.n	8004a62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e22c      	b.n	8004a62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5c      	ldr	r2, [pc, #368]	@ (8004780 <HAL_DMA_Abort_IT+0x1a0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04a      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5b      	ldr	r2, [pc, #364]	@ (8004784 <HAL_DMA_Abort_IT+0x1a4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d045      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a59      	ldr	r2, [pc, #356]	@ (8004788 <HAL_DMA_Abort_IT+0x1a8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d040      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a58      	ldr	r2, [pc, #352]	@ (800478c <HAL_DMA_Abort_IT+0x1ac>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03b      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <HAL_DMA_Abort_IT+0x1b0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d036      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a55      	ldr	r2, [pc, #340]	@ (8004794 <HAL_DMA_Abort_IT+0x1b4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d031      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <HAL_DMA_Abort_IT+0x1b8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02c      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a52      	ldr	r2, [pc, #328]	@ (800479c <HAL_DMA_Abort_IT+0x1bc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d027      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <HAL_DMA_Abort_IT+0x1c0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a4f      	ldr	r2, [pc, #316]	@ (80047a4 <HAL_DMA_Abort_IT+0x1c4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a4d      	ldr	r2, [pc, #308]	@ (80047a8 <HAL_DMA_Abort_IT+0x1c8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4c      	ldr	r2, [pc, #304]	@ (80047ac <HAL_DMA_Abort_IT+0x1cc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_DMA_Abort_IT+0x1d0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a49      	ldr	r2, [pc, #292]	@ (80047b4 <HAL_DMA_Abort_IT+0x1d4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <HAL_DMA_Abort_IT+0x1d8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_Abort_IT+0xc8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a46      	ldr	r2, [pc, #280]	@ (80047bc <HAL_DMA_Abort_IT+0x1dc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_Abort_IT+0xcc>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_DMA_Abort_IT+0xce>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8086 	beq.w	80047c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2204      	movs	r2, #4
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004780 <HAL_DMA_Abort_IT+0x1a0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004784 <HAL_DMA_Abort_IT+0x1a4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004788 <HAL_DMA_Abort_IT+0x1a8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <HAL_DMA_Abort_IT+0x1ac>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a29      	ldr	r2, [pc, #164]	@ (8004790 <HAL_DMA_Abort_IT+0x1b0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a28      	ldr	r2, [pc, #160]	@ (8004794 <HAL_DMA_Abort_IT+0x1b4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a26      	ldr	r2, [pc, #152]	@ (8004798 <HAL_DMA_Abort_IT+0x1b8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a25      	ldr	r2, [pc, #148]	@ (800479c <HAL_DMA_Abort_IT+0x1bc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_DMA_Abort_IT+0x1c0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <HAL_DMA_Abort_IT+0x1c4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a20      	ldr	r2, [pc, #128]	@ (80047a8 <HAL_DMA_Abort_IT+0x1c8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1f      	ldr	r2, [pc, #124]	@ (80047ac <HAL_DMA_Abort_IT+0x1cc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <HAL_DMA_Abort_IT+0x1d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1c      	ldr	r2, [pc, #112]	@ (80047b4 <HAL_DMA_Abort_IT+0x1d4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1a      	ldr	r2, [pc, #104]	@ (80047b8 <HAL_DMA_Abort_IT+0x1d8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_DMA_Abort_IT+0x17c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a19      	ldr	r2, [pc, #100]	@ (80047bc <HAL_DMA_Abort_IT+0x1dc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <HAL_DMA_Abort_IT+0x18e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e178      	b.n	8004a60 <HAL_DMA_Abort_IT+0x480>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e16f      	b.n	8004a60 <HAL_DMA_Abort_IT+0x480>
 8004780:	40020010 	.word	0x40020010
 8004784:	40020028 	.word	0x40020028
 8004788:	40020040 	.word	0x40020040
 800478c:	40020058 	.word	0x40020058
 8004790:	40020070 	.word	0x40020070
 8004794:	40020088 	.word	0x40020088
 8004798:	400200a0 	.word	0x400200a0
 800479c:	400200b8 	.word	0x400200b8
 80047a0:	40020410 	.word	0x40020410
 80047a4:	40020428 	.word	0x40020428
 80047a8:	40020440 	.word	0x40020440
 80047ac:	40020458 	.word	0x40020458
 80047b0:	40020470 	.word	0x40020470
 80047b4:	40020488 	.word	0x40020488
 80047b8:	400204a0 	.word	0x400204a0
 80047bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020e 	bic.w	r2, r2, #14
 80047ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6c      	ldr	r2, [pc, #432]	@ (8004988 <HAL_DMA_Abort_IT+0x3a8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04a      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6b      	ldr	r2, [pc, #428]	@ (800498c <HAL_DMA_Abort_IT+0x3ac>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d045      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a69      	ldr	r2, [pc, #420]	@ (8004990 <HAL_DMA_Abort_IT+0x3b0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d040      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a68      	ldr	r2, [pc, #416]	@ (8004994 <HAL_DMA_Abort_IT+0x3b4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d03b      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a66      	ldr	r2, [pc, #408]	@ (8004998 <HAL_DMA_Abort_IT+0x3b8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d036      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a65      	ldr	r2, [pc, #404]	@ (800499c <HAL_DMA_Abort_IT+0x3bc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d031      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a63      	ldr	r2, [pc, #396]	@ (80049a0 <HAL_DMA_Abort_IT+0x3c0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02c      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a62      	ldr	r2, [pc, #392]	@ (80049a4 <HAL_DMA_Abort_IT+0x3c4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a60      	ldr	r2, [pc, #384]	@ (80049a8 <HAL_DMA_Abort_IT+0x3c8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a5f      	ldr	r2, [pc, #380]	@ (80049ac <HAL_DMA_Abort_IT+0x3cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a5d      	ldr	r2, [pc, #372]	@ (80049b0 <HAL_DMA_Abort_IT+0x3d0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a5c      	ldr	r2, [pc, #368]	@ (80049b4 <HAL_DMA_Abort_IT+0x3d4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5a      	ldr	r2, [pc, #360]	@ (80049b8 <HAL_DMA_Abort_IT+0x3d8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a59      	ldr	r2, [pc, #356]	@ (80049bc <HAL_DMA_Abort_IT+0x3dc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a57      	ldr	r2, [pc, #348]	@ (80049c0 <HAL_DMA_Abort_IT+0x3e0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_DMA_Abort_IT+0x290>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a56      	ldr	r2, [pc, #344]	@ (80049c4 <HAL_DMA_Abort_IT+0x3e4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <HAL_DMA_Abort_IT+0x2a2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e007      	b.n	8004892 <HAL_DMA_Abort_IT+0x2b2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3c      	ldr	r2, [pc, #240]	@ (8004988 <HAL_DMA_Abort_IT+0x3a8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d072      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3a      	ldr	r2, [pc, #232]	@ (800498c <HAL_DMA_Abort_IT+0x3ac>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d06d      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a39      	ldr	r2, [pc, #228]	@ (8004990 <HAL_DMA_Abort_IT+0x3b0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d068      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a37      	ldr	r2, [pc, #220]	@ (8004994 <HAL_DMA_Abort_IT+0x3b4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d063      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a36      	ldr	r2, [pc, #216]	@ (8004998 <HAL_DMA_Abort_IT+0x3b8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d05e      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a34      	ldr	r2, [pc, #208]	@ (800499c <HAL_DMA_Abort_IT+0x3bc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d059      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <HAL_DMA_Abort_IT+0x3c0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d054      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a31      	ldr	r2, [pc, #196]	@ (80049a4 <HAL_DMA_Abort_IT+0x3c4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d04f      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a30      	ldr	r2, [pc, #192]	@ (80049a8 <HAL_DMA_Abort_IT+0x3c8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2e      	ldr	r2, [pc, #184]	@ (80049ac <HAL_DMA_Abort_IT+0x3cc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2d      	ldr	r2, [pc, #180]	@ (80049b0 <HAL_DMA_Abort_IT+0x3d0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <HAL_DMA_Abort_IT+0x3d4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2a      	ldr	r2, [pc, #168]	@ (80049b8 <HAL_DMA_Abort_IT+0x3d8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <HAL_DMA_Abort_IT+0x3dc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a27      	ldr	r2, [pc, #156]	@ (80049c0 <HAL_DMA_Abort_IT+0x3e0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a25      	ldr	r2, [pc, #148]	@ (80049c4 <HAL_DMA_Abort_IT+0x3e4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a24      	ldr	r2, [pc, #144]	@ (80049c8 <HAL_DMA_Abort_IT+0x3e8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <HAL_DMA_Abort_IT+0x3ec>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	@ (80049d0 <HAL_DMA_Abort_IT+0x3f0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1f      	ldr	r2, [pc, #124]	@ (80049d4 <HAL_DMA_Abort_IT+0x3f4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <HAL_DMA_Abort_IT+0x3f8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_DMA_Abort_IT+0x3fc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <HAL_DMA_Abort_IT+0x400>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_Abort_IT+0x3a2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a19      	ldr	r2, [pc, #100]	@ (80049e4 <HAL_DMA_Abort_IT+0x404>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d132      	bne.n	80049e8 <HAL_DMA_Abort_IT+0x408>
 8004982:	2301      	movs	r3, #1
 8004984:	e031      	b.n	80049ea <HAL_DMA_Abort_IT+0x40a>
 8004986:	bf00      	nop
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8
 80049c8:	58025408 	.word	0x58025408
 80049cc:	5802541c 	.word	0x5802541c
 80049d0:	58025430 	.word	0x58025430
 80049d4:	58025444 	.word	0x58025444
 80049d8:	58025458 	.word	0x58025458
 80049dc:	5802546c 	.word	0x5802546c
 80049e0:	58025480 	.word	0x58025480
 80049e4:	58025494 	.word	0x58025494
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d028      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop

08004a6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	@ 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a78:	4b67      	ldr	r3, [pc, #412]	@ (8004c18 <HAL_DMA_IRQHandler+0x1ac>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_DMA_IRQHandler+0x1b0>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5f      	ldr	r2, [pc, #380]	@ (8004c20 <HAL_DMA_IRQHandler+0x1b4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d04a      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5d      	ldr	r2, [pc, #372]	@ (8004c24 <HAL_DMA_IRQHandler+0x1b8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d045      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c28 <HAL_DMA_IRQHandler+0x1bc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d040      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c2c <HAL_DMA_IRQHandler+0x1c0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03b      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a59      	ldr	r2, [pc, #356]	@ (8004c30 <HAL_DMA_IRQHandler+0x1c4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d036      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a57      	ldr	r2, [pc, #348]	@ (8004c34 <HAL_DMA_IRQHandler+0x1c8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d031      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a56      	ldr	r2, [pc, #344]	@ (8004c38 <HAL_DMA_IRQHandler+0x1cc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d02c      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a54      	ldr	r2, [pc, #336]	@ (8004c3c <HAL_DMA_IRQHandler+0x1d0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d027      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a53      	ldr	r2, [pc, #332]	@ (8004c40 <HAL_DMA_IRQHandler+0x1d4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a51      	ldr	r2, [pc, #324]	@ (8004c44 <HAL_DMA_IRQHandler+0x1d8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a50      	ldr	r2, [pc, #320]	@ (8004c48 <HAL_DMA_IRQHandler+0x1dc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a4e      	ldr	r2, [pc, #312]	@ (8004c4c <HAL_DMA_IRQHandler+0x1e0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c50 <HAL_DMA_IRQHandler+0x1e4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a4b      	ldr	r2, [pc, #300]	@ (8004c54 <HAL_DMA_IRQHandler+0x1e8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_DMA_IRQHandler+0x1ec>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_DMA_IRQHandler+0xd2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a48      	ldr	r2, [pc, #288]	@ (8004c5c <HAL_DMA_IRQHandler+0x1f0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <HAL_DMA_IRQHandler+0xd6>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_DMA_IRQHandler+0xd8>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 842b 	beq.w	80053a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2208      	movs	r2, #8
 8004b54:	409a      	lsls	r2, r3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80a2 	beq.w	8004ca4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2e      	ldr	r2, [pc, #184]	@ (8004c20 <HAL_DMA_IRQHandler+0x1b4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c24 <HAL_DMA_IRQHandler+0x1b8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d045      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	@ (8004c28 <HAL_DMA_IRQHandler+0x1bc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d040      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2a      	ldr	r2, [pc, #168]	@ (8004c2c <HAL_DMA_IRQHandler+0x1c0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d03b      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a28      	ldr	r2, [pc, #160]	@ (8004c30 <HAL_DMA_IRQHandler+0x1c4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d036      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <HAL_DMA_IRQHandler+0x1c8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d031      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	@ (8004c38 <HAL_DMA_IRQHandler+0x1cc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d02c      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a24      	ldr	r2, [pc, #144]	@ (8004c3c <HAL_DMA_IRQHandler+0x1d0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d027      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	@ (8004c40 <HAL_DMA_IRQHandler+0x1d4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d022      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	@ (8004c44 <HAL_DMA_IRQHandler+0x1d8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d01d      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <HAL_DMA_IRQHandler+0x1dc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c4c <HAL_DMA_IRQHandler+0x1e0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c50 <HAL_DMA_IRQHandler+0x1e4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00e      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c54 <HAL_DMA_IRQHandler+0x1e8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <HAL_DMA_IRQHandler+0x1ec>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x194>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	@ (8004c5c <HAL_DMA_IRQHandler+0x1f0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d12f      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x1f4>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	2300      	moveq	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e02e      	b.n	8004c74 <HAL_DMA_IRQHandler+0x208>
 8004c16:	bf00      	nop
 8004c18:	24000000 	.word	0x24000000
 8004c1c:	1b4e81b5 	.word	0x1b4e81b5
 8004c20:	40020010 	.word	0x40020010
 8004c24:	40020028 	.word	0x40020028
 8004c28:	40020040 	.word	0x40020040
 8004c2c:	40020058 	.word	0x40020058
 8004c30:	40020070 	.word	0x40020070
 8004c34:	40020088 	.word	0x40020088
 8004c38:	400200a0 	.word	0x400200a0
 8004c3c:	400200b8 	.word	0x400200b8
 8004c40:	40020410 	.word	0x40020410
 8004c44:	40020428 	.word	0x40020428
 8004c48:	40020440 	.word	0x40020440
 8004c4c:	40020458 	.word	0x40020458
 8004c50:	40020470 	.word	0x40020470
 8004c54:	40020488 	.word	0x40020488
 8004c58:	400204a0 	.word	0x400204a0
 8004c5c:	400204b8 	.word	0x400204b8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d015      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2208      	movs	r2, #8
 8004c92:	409a      	lsls	r2, r3
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d06e      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a69      	ldr	r2, [pc, #420]	@ (8004e64 <HAL_DMA_IRQHandler+0x3f8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d04a      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a67      	ldr	r2, [pc, #412]	@ (8004e68 <HAL_DMA_IRQHandler+0x3fc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d045      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a66      	ldr	r2, [pc, #408]	@ (8004e6c <HAL_DMA_IRQHandler+0x400>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d040      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a64      	ldr	r2, [pc, #400]	@ (8004e70 <HAL_DMA_IRQHandler+0x404>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d03b      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a63      	ldr	r2, [pc, #396]	@ (8004e74 <HAL_DMA_IRQHandler+0x408>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d036      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a61      	ldr	r2, [pc, #388]	@ (8004e78 <HAL_DMA_IRQHandler+0x40c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a60      	ldr	r2, [pc, #384]	@ (8004e7c <HAL_DMA_IRQHandler+0x410>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d02c      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5e      	ldr	r2, [pc, #376]	@ (8004e80 <HAL_DMA_IRQHandler+0x414>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d027      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e84 <HAL_DMA_IRQHandler+0x418>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5b      	ldr	r2, [pc, #364]	@ (8004e88 <HAL_DMA_IRQHandler+0x41c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5a      	ldr	r2, [pc, #360]	@ (8004e8c <HAL_DMA_IRQHandler+0x420>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	@ (8004e90 <HAL_DMA_IRQHandler+0x424>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a57      	ldr	r2, [pc, #348]	@ (8004e94 <HAL_DMA_IRQHandler+0x428>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a55      	ldr	r2, [pc, #340]	@ (8004e98 <HAL_DMA_IRQHandler+0x42c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a54      	ldr	r2, [pc, #336]	@ (8004e9c <HAL_DMA_IRQHandler+0x430>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x2ee>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a52      	ldr	r2, [pc, #328]	@ (8004ea0 <HAL_DMA_IRQHandler+0x434>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10a      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x304>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e003      	b.n	8004d78 <HAL_DMA_IRQHandler+0x30c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2204      	movs	r2, #4
 8004da2:	409a      	lsls	r2, r3
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 808f 	beq.w	8004ecc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e64 <HAL_DMA_IRQHandler+0x3f8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e68 <HAL_DMA_IRQHandler+0x3fc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a29      	ldr	r2, [pc, #164]	@ (8004e6c <HAL_DMA_IRQHandler+0x400>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <HAL_DMA_IRQHandler+0x404>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <HAL_DMA_IRQHandler+0x408>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a24      	ldr	r2, [pc, #144]	@ (8004e78 <HAL_DMA_IRQHandler+0x40c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a23      	ldr	r2, [pc, #140]	@ (8004e7c <HAL_DMA_IRQHandler+0x410>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a21      	ldr	r2, [pc, #132]	@ (8004e80 <HAL_DMA_IRQHandler+0x414>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a20      	ldr	r2, [pc, #128]	@ (8004e84 <HAL_DMA_IRQHandler+0x418>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <HAL_DMA_IRQHandler+0x41c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <HAL_DMA_IRQHandler+0x420>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1b      	ldr	r2, [pc, #108]	@ (8004e90 <HAL_DMA_IRQHandler+0x424>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e94 <HAL_DMA_IRQHandler+0x428>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <HAL_DMA_IRQHandler+0x42c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <HAL_DMA_IRQHandler+0x430>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x3e2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a15      	ldr	r2, [pc, #84]	@ (8004ea0 <HAL_DMA_IRQHandler+0x434>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d12a      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x438>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e023      	b.n	8004eac <HAL_DMA_IRQHandler+0x440>
 8004e64:	40020010 	.word	0x40020010
 8004e68:	40020028 	.word	0x40020028
 8004e6c:	40020040 	.word	0x40020040
 8004e70:	40020058 	.word	0x40020058
 8004e74:	40020070 	.word	0x40020070
 8004e78:	40020088 	.word	0x40020088
 8004e7c:	400200a0 	.word	0x400200a0
 8004e80:	400200b8 	.word	0x400200b8
 8004e84:	40020410 	.word	0x40020410
 8004e88:	40020428 	.word	0x40020428
 8004e8c:	40020440 	.word	0x40020440
 8004e90:	40020458 	.word	0x40020458
 8004e94:	40020470 	.word	0x40020470
 8004e98:	40020488 	.word	0x40020488
 8004e9c:	400204a0 	.word	0x400204a0
 8004ea0:	400204b8 	.word	0x400204b8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2204      	movs	r2, #4
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	f043 0204 	orr.w	r2, r3, #4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80a6 	beq.w	800502e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a85      	ldr	r2, [pc, #532]	@ (80050fc <HAL_DMA_IRQHandler+0x690>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a83      	ldr	r2, [pc, #524]	@ (8005100 <HAL_DMA_IRQHandler+0x694>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a82      	ldr	r2, [pc, #520]	@ (8005104 <HAL_DMA_IRQHandler+0x698>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a80      	ldr	r2, [pc, #512]	@ (8005108 <HAL_DMA_IRQHandler+0x69c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a7f      	ldr	r2, [pc, #508]	@ (800510c <HAL_DMA_IRQHandler+0x6a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a7d      	ldr	r2, [pc, #500]	@ (8005110 <HAL_DMA_IRQHandler+0x6a4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a7c      	ldr	r2, [pc, #496]	@ (8005114 <HAL_DMA_IRQHandler+0x6a8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8005118 <HAL_DMA_IRQHandler+0x6ac>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a79      	ldr	r2, [pc, #484]	@ (800511c <HAL_DMA_IRQHandler+0x6b0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a77      	ldr	r2, [pc, #476]	@ (8005120 <HAL_DMA_IRQHandler+0x6b4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a76      	ldr	r2, [pc, #472]	@ (8005124 <HAL_DMA_IRQHandler+0x6b8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a74      	ldr	r2, [pc, #464]	@ (8005128 <HAL_DMA_IRQHandler+0x6bc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a73      	ldr	r2, [pc, #460]	@ (800512c <HAL_DMA_IRQHandler+0x6c0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a71      	ldr	r2, [pc, #452]	@ (8005130 <HAL_DMA_IRQHandler+0x6c4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a70      	ldr	r2, [pc, #448]	@ (8005134 <HAL_DMA_IRQHandler+0x6c8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x516>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8005138 <HAL_DMA_IRQHandler+0x6cc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10a      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x52c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e009      	b.n	8004fac <HAL_DMA_IRQHandler+0x540>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03e      	beq.n	800502e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2210      	movs	r2, #16
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d018      	beq.n	8005000 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d024      	beq.n	800502e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
 8004fec:	e01f      	b.n	800502e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
 8004ffe:	e016      	b.n	800502e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d107      	bne.n	800501e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0208 	bic.w	r2, r2, #8
 800501c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2220      	movs	r2, #32
 8005038:	409a      	lsls	r2, r3
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8110 	beq.w	8005264 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2c      	ldr	r2, [pc, #176]	@ (80050fc <HAL_DMA_IRQHandler+0x690>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d04a      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <HAL_DMA_IRQHandler+0x694>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d045      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a29      	ldr	r2, [pc, #164]	@ (8005104 <HAL_DMA_IRQHandler+0x698>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d040      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a28      	ldr	r2, [pc, #160]	@ (8005108 <HAL_DMA_IRQHandler+0x69c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d03b      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	@ (800510c <HAL_DMA_IRQHandler+0x6a0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d036      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a25      	ldr	r2, [pc, #148]	@ (8005110 <HAL_DMA_IRQHandler+0x6a4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d031      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a23      	ldr	r2, [pc, #140]	@ (8005114 <HAL_DMA_IRQHandler+0x6a8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d02c      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <HAL_DMA_IRQHandler+0x6ac>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d027      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a20      	ldr	r2, [pc, #128]	@ (800511c <HAL_DMA_IRQHandler+0x6b0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <HAL_DMA_IRQHandler+0x6b4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d01d      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005124 <HAL_DMA_IRQHandler+0x6b8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_DMA_IRQHandler+0x6bc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	@ (800512c <HAL_DMA_IRQHandler+0x6c0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <HAL_DMA_IRQHandler+0x6c4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <HAL_DMA_IRQHandler+0x6c8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x678>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_DMA_IRQHandler+0x6cc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d12b      	bne.n	800513c <HAL_DMA_IRQHandler+0x6d0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e02a      	b.n	8005150 <HAL_DMA_IRQHandler+0x6e4>
 80050fa:	bf00      	nop
 80050fc:	40020010 	.word	0x40020010
 8005100:	40020028 	.word	0x40020028
 8005104:	40020040 	.word	0x40020040
 8005108:	40020058 	.word	0x40020058
 800510c:	40020070 	.word	0x40020070
 8005110:	40020088 	.word	0x40020088
 8005114:	400200a0 	.word	0x400200a0
 8005118:	400200b8 	.word	0x400200b8
 800511c:	40020410 	.word	0x40020410
 8005120:	40020428 	.word	0x40020428
 8005124:	40020440 	.word	0x40020440
 8005128:	40020458 	.word	0x40020458
 800512c:	40020470 	.word	0x40020470
 8005130:	40020488 	.word	0x40020488
 8005134:	400204a0 	.word	0x400204a0
 8005138:	400204b8 	.word	0x400204b8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8087 	beq.w	8005264 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2220      	movs	r2, #32
 8005160:	409a      	lsls	r2, r3
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b04      	cmp	r3, #4
 8005170:	d139      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0216 	bic.w	r2, r2, #22
 8005180:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005190:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_DMA_IRQHandler+0x736>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0208 	bic.w	r2, r2, #8
 80051b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	223f      	movs	r2, #63	@ 0x3f
 80051bc:	409a      	lsls	r2, r3
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 834a 	beq.w	8005870 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
          }
          return;
 80051e4:	e344      	b.n	8005870 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02c      	beq.n	8005264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
 8005212:	e027      	b.n	8005264 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d023      	beq.n	8005264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
 8005224:	e01e      	b.n	8005264 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10f      	bne.n	8005254 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0210 	bic.w	r2, r2, #16
 8005242:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8306 	beq.w	800587a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8088 	beq.w	800538c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2204      	movs	r2, #4
 8005280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a7a      	ldr	r2, [pc, #488]	@ (8005474 <HAL_DMA_IRQHandler+0xa08>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a79      	ldr	r2, [pc, #484]	@ (8005478 <HAL_DMA_IRQHandler+0xa0c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a77      	ldr	r2, [pc, #476]	@ (800547c <HAL_DMA_IRQHandler+0xa10>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a76      	ldr	r2, [pc, #472]	@ (8005480 <HAL_DMA_IRQHandler+0xa14>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a74      	ldr	r2, [pc, #464]	@ (8005484 <HAL_DMA_IRQHandler+0xa18>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a73      	ldr	r2, [pc, #460]	@ (8005488 <HAL_DMA_IRQHandler+0xa1c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a71      	ldr	r2, [pc, #452]	@ (800548c <HAL_DMA_IRQHandler+0xa20>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a70      	ldr	r2, [pc, #448]	@ (8005490 <HAL_DMA_IRQHandler+0xa24>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005494 <HAL_DMA_IRQHandler+0xa28>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a6d      	ldr	r2, [pc, #436]	@ (8005498 <HAL_DMA_IRQHandler+0xa2c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a6b      	ldr	r2, [pc, #428]	@ (800549c <HAL_DMA_IRQHandler+0xa30>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6a      	ldr	r2, [pc, #424]	@ (80054a0 <HAL_DMA_IRQHandler+0xa34>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a68      	ldr	r2, [pc, #416]	@ (80054a4 <HAL_DMA_IRQHandler+0xa38>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a67      	ldr	r2, [pc, #412]	@ (80054a8 <HAL_DMA_IRQHandler+0xa3c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a65      	ldr	r2, [pc, #404]	@ (80054ac <HAL_DMA_IRQHandler+0xa40>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_DMA_IRQHandler+0x8b8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a64      	ldr	r2, [pc, #400]	@ (80054b0 <HAL_DMA_IRQHandler+0xa44>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_DMA_IRQHandler+0x8ca>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e007      	b.n	8005346 <HAL_DMA_IRQHandler+0x8da>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534e:	429a      	cmp	r2, r3
 8005350:	d307      	bcc.n	8005362 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f2      	bne.n	8005346 <HAL_DMA_IRQHandler+0x8da>
 8005360:	e000      	b.n	8005364 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005362:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2203      	movs	r2, #3
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800537a:	e003      	b.n	8005384 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8272 	beq.w	800587a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
 800539e:	e26c      	b.n	800587a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a43      	ldr	r2, [pc, #268]	@ (80054b4 <HAL_DMA_IRQHandler+0xa48>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <HAL_DMA_IRQHandler+0xa4c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a40      	ldr	r2, [pc, #256]	@ (80054bc <HAL_DMA_IRQHandler+0xa50>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3f      	ldr	r2, [pc, #252]	@ (80054c0 <HAL_DMA_IRQHandler+0xa54>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a3d      	ldr	r2, [pc, #244]	@ (80054c4 <HAL_DMA_IRQHandler+0xa58>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a3c      	ldr	r2, [pc, #240]	@ (80054c8 <HAL_DMA_IRQHandler+0xa5c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <HAL_DMA_IRQHandler+0xa60>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x984>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a39      	ldr	r2, [pc, #228]	@ (80054d0 <HAL_DMA_IRQHandler+0xa64>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x988>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_DMA_IRQHandler+0x98a>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 823f 	beq.w	800587a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2204      	movs	r2, #4
 800540e:	409a      	lsls	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80cd 	beq.w	80055b4 <HAL_DMA_IRQHandler+0xb48>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80c7 	beq.w	80055b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2204      	movs	r2, #4
 8005430:	409a      	lsls	r2, r3
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d049      	beq.n	80054d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8210 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800545c:	e20a      	b.n	8005874 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8206 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005470:	e200      	b.n	8005874 <HAL_DMA_IRQHandler+0xe08>
 8005472:	bf00      	nop
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8
 80054b4:	58025408 	.word	0x58025408
 80054b8:	5802541c 	.word	0x5802541c
 80054bc:	58025430 	.word	0x58025430
 80054c0:	58025444 	.word	0x58025444
 80054c4:	58025458 	.word	0x58025458
 80054c8:	5802546c 	.word	0x5802546c
 80054cc:	58025480 	.word	0x58025480
 80054d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d160      	bne.n	80055a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7f      	ldr	r2, [pc, #508]	@ (80056e0 <HAL_DMA_IRQHandler+0xc74>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d04a      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7d      	ldr	r2, [pc, #500]	@ (80056e4 <HAL_DMA_IRQHandler+0xc78>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d045      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a7c      	ldr	r2, [pc, #496]	@ (80056e8 <HAL_DMA_IRQHandler+0xc7c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d040      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7a      	ldr	r2, [pc, #488]	@ (80056ec <HAL_DMA_IRQHandler+0xc80>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03b      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a79      	ldr	r2, [pc, #484]	@ (80056f0 <HAL_DMA_IRQHandler+0xc84>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d036      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a77      	ldr	r2, [pc, #476]	@ (80056f4 <HAL_DMA_IRQHandler+0xc88>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a76      	ldr	r2, [pc, #472]	@ (80056f8 <HAL_DMA_IRQHandler+0xc8c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02c      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a74      	ldr	r2, [pc, #464]	@ (80056fc <HAL_DMA_IRQHandler+0xc90>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d027      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a73      	ldr	r2, [pc, #460]	@ (8005700 <HAL_DMA_IRQHandler+0xc94>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a71      	ldr	r2, [pc, #452]	@ (8005704 <HAL_DMA_IRQHandler+0xc98>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01d      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a70      	ldr	r2, [pc, #448]	@ (8005708 <HAL_DMA_IRQHandler+0xc9c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6e      	ldr	r2, [pc, #440]	@ (800570c <HAL_DMA_IRQHandler+0xca0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a6d      	ldr	r2, [pc, #436]	@ (8005710 <HAL_DMA_IRQHandler+0xca4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6b      	ldr	r2, [pc, #428]	@ (8005714 <HAL_DMA_IRQHandler+0xca8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6a      	ldr	r2, [pc, #424]	@ (8005718 <HAL_DMA_IRQHandler+0xcac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_DMA_IRQHandler+0xb12>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_DMA_IRQHandler+0xcb0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d108      	bne.n	8005590 <HAL_DMA_IRQHandler+0xb24>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0208 	bic.w	r2, r2, #8
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e007      	b.n	80055a0 <HAL_DMA_IRQHandler+0xb34>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8165 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b2:	e15f      	b.n	8005874 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2202      	movs	r2, #2
 80055be:	409a      	lsls	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80c5 	beq.w	8005754 <HAL_DMA_IRQHandler+0xce8>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80bf 	beq.w	8005754 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2202      	movs	r2, #2
 80055e0:	409a      	lsls	r2, r3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 813a 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800560c:	e134      	b.n	8005878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8130 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005620:	e12a      	b.n	8005878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 8089 	bne.w	8005740 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2b      	ldr	r2, [pc, #172]	@ (80056e0 <HAL_DMA_IRQHandler+0xc74>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a29      	ldr	r2, [pc, #164]	@ (80056e4 <HAL_DMA_IRQHandler+0xc78>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a28      	ldr	r2, [pc, #160]	@ (80056e8 <HAL_DMA_IRQHandler+0xc7c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a26      	ldr	r2, [pc, #152]	@ (80056ec <HAL_DMA_IRQHandler+0xc80>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a25      	ldr	r2, [pc, #148]	@ (80056f0 <HAL_DMA_IRQHandler+0xc84>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a23      	ldr	r2, [pc, #140]	@ (80056f4 <HAL_DMA_IRQHandler+0xc88>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a22      	ldr	r2, [pc, #136]	@ (80056f8 <HAL_DMA_IRQHandler+0xc8c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a20      	ldr	r2, [pc, #128]	@ (80056fc <HAL_DMA_IRQHandler+0xc90>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1f      	ldr	r2, [pc, #124]	@ (8005700 <HAL_DMA_IRQHandler+0xc94>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1d      	ldr	r2, [pc, #116]	@ (8005704 <HAL_DMA_IRQHandler+0xc98>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <HAL_DMA_IRQHandler+0xc9c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1a      	ldr	r2, [pc, #104]	@ (800570c <HAL_DMA_IRQHandler+0xca0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <HAL_DMA_IRQHandler+0xca4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <HAL_DMA_IRQHandler+0xca8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a16      	ldr	r2, [pc, #88]	@ (8005718 <HAL_DMA_IRQHandler+0xcac>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_IRQHandler+0xc62>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a14      	ldr	r2, [pc, #80]	@ (800571c <HAL_DMA_IRQHandler+0xcb0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d128      	bne.n	8005720 <HAL_DMA_IRQHandler+0xcb4>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0214 	bic.w	r2, r2, #20
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e027      	b.n	8005730 <HAL_DMA_IRQHandler+0xcc4>
 80056e0:	40020010 	.word	0x40020010
 80056e4:	40020028 	.word	0x40020028
 80056e8:	40020040 	.word	0x40020040
 80056ec:	40020058 	.word	0x40020058
 80056f0:	40020070 	.word	0x40020070
 80056f4:	40020088 	.word	0x40020088
 80056f8:	400200a0 	.word	0x400200a0
 80056fc:	400200b8 	.word	0x400200b8
 8005700:	40020410 	.word	0x40020410
 8005704:	40020428 	.word	0x40020428
 8005708:	40020440 	.word	0x40020440
 800570c:	40020458 	.word	0x40020458
 8005710:	40020470 	.word	0x40020470
 8005714:	40020488 	.word	0x40020488
 8005718:	400204a0 	.word	0x400204a0
 800571c:	400204b8 	.word	0x400204b8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 020a 	bic.w	r2, r2, #10
 800572e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8097 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005752:	e091      	b.n	8005878 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2208      	movs	r2, #8
 800575e:	409a      	lsls	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8088 	beq.w	800587a <HAL_DMA_IRQHandler+0xe0e>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8082 	beq.w	800587a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a41      	ldr	r2, [pc, #260]	@ (8005880 <HAL_DMA_IRQHandler+0xe14>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d04a      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a3f      	ldr	r2, [pc, #252]	@ (8005884 <HAL_DMA_IRQHandler+0xe18>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d045      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3e      	ldr	r2, [pc, #248]	@ (8005888 <HAL_DMA_IRQHandler+0xe1c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d040      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3c      	ldr	r2, [pc, #240]	@ (800588c <HAL_DMA_IRQHandler+0xe20>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005890 <HAL_DMA_IRQHandler+0xe24>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d036      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a39      	ldr	r2, [pc, #228]	@ (8005894 <HAL_DMA_IRQHandler+0xe28>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a38      	ldr	r2, [pc, #224]	@ (8005898 <HAL_DMA_IRQHandler+0xe2c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d02c      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	@ (800589c <HAL_DMA_IRQHandler+0xe30>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d027      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <HAL_DMA_IRQHandler+0xe34>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a33      	ldr	r2, [pc, #204]	@ (80058a4 <HAL_DMA_IRQHandler+0xe38>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <HAL_DMA_IRQHandler+0xe3c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <HAL_DMA_IRQHandler+0xe40>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <HAL_DMA_IRQHandler+0xe44>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2d      	ldr	r2, [pc, #180]	@ (80058b4 <HAL_DMA_IRQHandler+0xe48>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2c      	ldr	r2, [pc, #176]	@ (80058b8 <HAL_DMA_IRQHandler+0xe4c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_DMA_IRQHandler+0xdaa>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2a      	ldr	r2, [pc, #168]	@ (80058bc <HAL_DMA_IRQHandler+0xe50>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d108      	bne.n	8005828 <HAL_DMA_IRQHandler+0xdbc>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 021c 	bic.w	r2, r2, #28
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e007      	b.n	8005838 <HAL_DMA_IRQHandler+0xdcc>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 020e 	bic.w	r2, r2, #14
 8005836:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	e004      	b.n	800587a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005870:	bf00      	nop
 8005872:	e002      	b.n	800587a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005878:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800587a:	3728      	adds	r7, #40	@ 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40020010 	.word	0x40020010
 8005884:	40020028 	.word	0x40020028
 8005888:	40020040 	.word	0x40020040
 800588c:	40020058 	.word	0x40020058
 8005890:	40020070 	.word	0x40020070
 8005894:	40020088 	.word	0x40020088
 8005898:	400200a0 	.word	0x400200a0
 800589c:	400200b8 	.word	0x400200b8
 80058a0:	40020410 	.word	0x40020410
 80058a4:	40020428 	.word	0x40020428
 80058a8:	40020440 	.word	0x40020440
 80058ac:	40020458 	.word	0x40020458
 80058b0:	40020470 	.word	0x40020470
 80058b4:	40020488 	.word	0x40020488
 80058b8:	400204a0 	.word	0x400204a0
 80058bc:	400204b8 	.word	0x400204b8

080058c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a42      	ldr	r2, [pc, #264]	@ (80059d8 <DMA_CalcBaseAndBitshift+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04a      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a41      	ldr	r2, [pc, #260]	@ (80059dc <DMA_CalcBaseAndBitshift+0x11c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d045      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a3f      	ldr	r2, [pc, #252]	@ (80059e0 <DMA_CalcBaseAndBitshift+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d040      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3e      	ldr	r2, [pc, #248]	@ (80059e4 <DMA_CalcBaseAndBitshift+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d03b      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3c      	ldr	r2, [pc, #240]	@ (80059e8 <DMA_CalcBaseAndBitshift+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d036      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a3b      	ldr	r2, [pc, #236]	@ (80059ec <DMA_CalcBaseAndBitshift+0x12c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d031      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a39      	ldr	r2, [pc, #228]	@ (80059f0 <DMA_CalcBaseAndBitshift+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d02c      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a38      	ldr	r2, [pc, #224]	@ (80059f4 <DMA_CalcBaseAndBitshift+0x134>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d027      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a36      	ldr	r2, [pc, #216]	@ (80059f8 <DMA_CalcBaseAndBitshift+0x138>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d022      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a35      	ldr	r2, [pc, #212]	@ (80059fc <DMA_CalcBaseAndBitshift+0x13c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d01d      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a33      	ldr	r2, [pc, #204]	@ (8005a00 <DMA_CalcBaseAndBitshift+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a32      	ldr	r2, [pc, #200]	@ (8005a04 <DMA_CalcBaseAndBitshift+0x144>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a30      	ldr	r2, [pc, #192]	@ (8005a08 <DMA_CalcBaseAndBitshift+0x148>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a0c <DMA_CalcBaseAndBitshift+0x14c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2d      	ldr	r2, [pc, #180]	@ (8005a10 <DMA_CalcBaseAndBitshift+0x150>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <DMA_CalcBaseAndBitshift+0xa8>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	@ (8005a14 <DMA_CalcBaseAndBitshift+0x154>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <DMA_CalcBaseAndBitshift+0xac>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <DMA_CalcBaseAndBitshift+0xae>
 800596c:	2300      	movs	r3, #0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d024      	beq.n	80059bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	3b10      	subs	r3, #16
 800597a:	4a27      	ldr	r2, [pc, #156]	@ (8005a18 <DMA_CalcBaseAndBitshift+0x158>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	4a24      	ldr	r2, [pc, #144]	@ (8005a1c <DMA_CalcBaseAndBitshift+0x15c>)
 800598c:	5cd3      	ldrb	r3, [r2, r3]
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d908      	bls.n	80059ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a20 <DMA_CalcBaseAndBitshift+0x160>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	1d1a      	adds	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80059aa:	e00d      	b.n	80059c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <DMA_CalcBaseAndBitshift+0x160>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ba:	e005      	b.n	80059c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40020010 	.word	0x40020010
 80059dc:	40020028 	.word	0x40020028
 80059e0:	40020040 	.word	0x40020040
 80059e4:	40020058 	.word	0x40020058
 80059e8:	40020070 	.word	0x40020070
 80059ec:	40020088 	.word	0x40020088
 80059f0:	400200a0 	.word	0x400200a0
 80059f4:	400200b8 	.word	0x400200b8
 80059f8:	40020410 	.word	0x40020410
 80059fc:	40020428 	.word	0x40020428
 8005a00:	40020440 	.word	0x40020440
 8005a04:	40020458 	.word	0x40020458
 8005a08:	40020470 	.word	0x40020470
 8005a0c:	40020488 	.word	0x40020488
 8005a10:	400204a0 	.word	0x400204a0
 8005a14:	400204b8 	.word	0x400204b8
 8005a18:	aaaaaaab 	.word	0xaaaaaaab
 8005a1c:	0800f88c 	.word	0x0800f88c
 8005a20:	fffffc00 	.word	0xfffffc00

08005a24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d120      	bne.n	8005a7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d858      	bhi.n	8005af2 <DMA_CheckFifoParam+0xce>
 8005a40:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <DMA_CheckFifoParam+0x24>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a6b 	.word	0x08005a6b
 8005a50:	08005a59 	.word	0x08005a59
 8005a54:	08005af3 	.word	0x08005af3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d048      	beq.n	8005af6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a68:	e045      	b.n	8005af6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a72:	d142      	bne.n	8005afa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a78:	e03f      	b.n	8005afa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a82:	d123      	bne.n	8005acc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d838      	bhi.n	8005afe <DMA_CheckFifoParam+0xda>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <DMA_CheckFifoParam+0x70>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005aab 	.word	0x08005aab
 8005a9c:	08005aa5 	.word	0x08005aa5
 8005aa0:	08005abd 	.word	0x08005abd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa8:	e030      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d025      	beq.n	8005b02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aba:	e022      	b.n	8005b02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ac4:	d11f      	bne.n	8005b06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aca:	e01c      	b.n	8005b06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d902      	bls.n	8005ada <DMA_CheckFifoParam+0xb6>
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d003      	beq.n	8005ae0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ad8:	e018      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ade:	e015      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
    break;
 8005af0:	e00b      	b.n	8005b0a <DMA_CheckFifoParam+0xe6>
        break;
 8005af2:	bf00      	nop
 8005af4:	e00a      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005af6:	bf00      	nop
 8005af8:	e008      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005afa:	bf00      	nop
 8005afc:	e006      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005afe:	bf00      	nop
 8005b00:	e004      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005b02:	bf00      	nop
 8005b04:	e002      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
        break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <DMA_CheckFifoParam+0xe8>
    break;
 8005b0a:	bf00      	nop
    }
  }

  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a38      	ldr	r2, [pc, #224]	@ (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a36      	ldr	r2, [pc, #216]	@ (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a35      	ldr	r2, [pc, #212]	@ (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a33      	ldr	r2, [pc, #204]	@ (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a30      	ldr	r2, [pc, #192]	@ (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a2d      	ldr	r2, [pc, #180]	@ (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01a      	beq.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	3b08      	subs	r3, #8
 8005b8c:	4a28      	ldr	r2, [pc, #160]	@ (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a24      	ldr	r2, [pc, #144]	@ (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ba8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	409a      	lsls	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bb8:	e024      	b.n	8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	3b10      	subs	r3, #16
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	@ (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d806      	bhi.n	8005be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d902      	bls.n	8005be2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3308      	adds	r3, #8
 8005be0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	@ (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	58025408 	.word	0x58025408
 8005c14:	5802541c 	.word	0x5802541c
 8005c18:	58025430 	.word	0x58025430
 8005c1c:	58025444 	.word	0x58025444
 8005c20:	58025458 	.word	0x58025458
 8005c24:	5802546c 	.word	0x5802546c
 8005c28:	58025480 	.word	0x58025480
 8005c2c:	58025494 	.word	0x58025494
 8005c30:	cccccccd 	.word	0xcccccccd
 8005c34:	16009600 	.word	0x16009600
 8005c38:	58025880 	.word	0x58025880
 8005c3c:	aaaaaaab 	.word	0xaaaaaaab
 8005c40:	400204b8 	.word	0x400204b8
 8005c44:	4002040f 	.word	0x4002040f
 8005c48:	10008200 	.word	0x10008200
 8005c4c:	40020880 	.word	0x40020880

08005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04a      	beq.n	8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d847      	bhi.n	8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a25      	ldr	r2, [pc, #148]	@ (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a24      	ldr	r2, [pc, #144]	@ (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d101      	bne.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	@ (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cd8:	671a      	str	r2, [r3, #112]	@ 0x70
 8005cda:	e009      	b.n	8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a11      	ldr	r2, [pc, #68]	@ (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	58025408 	.word	0x58025408
 8005d0c:	5802541c 	.word	0x5802541c
 8005d10:	58025430 	.word	0x58025430
 8005d14:	58025444 	.word	0x58025444
 8005d18:	58025458 	.word	0x58025458
 8005d1c:	5802546c 	.word	0x5802546c
 8005d20:	58025480 	.word	0x58025480
 8005d24:	58025494 	.word	0x58025494
 8005d28:	1600963f 	.word	0x1600963f
 8005d2c:	58025940 	.word	0x58025940
 8005d30:	1000823f 	.word	0x1000823f
 8005d34:	40020940 	.word	0x40020940

08005d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	@ 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d46:	4b86      	ldr	r3, [pc, #536]	@ (8005f60 <HAL_GPIO_Init+0x228>)
 8005d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d4a:	e18c      	b.n	8006066 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2101      	movs	r1, #1
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 817e 	beq.w	8006060 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d005      	beq.n	8005d7c <HAL_GPIO_Init+0x44>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d130      	bne.n	8005dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	2203      	movs	r2, #3
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005db2:	2201      	movs	r2, #1
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	091b      	lsrs	r3, r3, #4
 8005dc8:	f003 0201 	and.w	r2, r3, #1
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d017      	beq.n	8005e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	2203      	movs	r2, #3
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d123      	bne.n	8005e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	08da      	lsrs	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3208      	adds	r2, #8
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	220f      	movs	r2, #15
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4013      	ands	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 0203 	and.w	r2, r3, #3
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80d8 	beq.w	8006060 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8005f64 <HAL_GPIO_Init+0x22c>)
 8005eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8005f64 <HAL_GPIO_Init+0x22c>)
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ec0:	4b28      	ldr	r3, [pc, #160]	@ (8005f64 <HAL_GPIO_Init+0x22c>)
 8005ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ece:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <HAL_GPIO_Init+0x230>)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	220f      	movs	r2, #15
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f6c <HAL_GPIO_Init+0x234>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d04a      	beq.n	8005f90 <HAL_GPIO_Init+0x258>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f70 <HAL_GPIO_Init+0x238>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02b      	beq.n	8005f5a <HAL_GPIO_Init+0x222>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	@ (8005f74 <HAL_GPIO_Init+0x23c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d025      	beq.n	8005f56 <HAL_GPIO_Init+0x21e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f78 <HAL_GPIO_Init+0x240>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d01f      	beq.n	8005f52 <HAL_GPIO_Init+0x21a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a19      	ldr	r2, [pc, #100]	@ (8005f7c <HAL_GPIO_Init+0x244>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d019      	beq.n	8005f4e <HAL_GPIO_Init+0x216>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <HAL_GPIO_Init+0x248>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_GPIO_Init+0x212>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <HAL_GPIO_Init+0x24c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00d      	beq.n	8005f46 <HAL_GPIO_Init+0x20e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a16      	ldr	r2, [pc, #88]	@ (8005f88 <HAL_GPIO_Init+0x250>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <HAL_GPIO_Init+0x20a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <HAL_GPIO_Init+0x254>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d101      	bne.n	8005f3e <HAL_GPIO_Init+0x206>
 8005f3a:	2309      	movs	r3, #9
 8005f3c:	e029      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f3e:	230a      	movs	r3, #10
 8005f40:	e027      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f42:	2307      	movs	r3, #7
 8005f44:	e025      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f46:	2306      	movs	r3, #6
 8005f48:	e023      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f4a:	2305      	movs	r3, #5
 8005f4c:	e021      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f4e:	2304      	movs	r3, #4
 8005f50:	e01f      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f52:	2303      	movs	r3, #3
 8005f54:	e01d      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e01b      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e019      	b.n	8005f92 <HAL_GPIO_Init+0x25a>
 8005f5e:	bf00      	nop
 8005f60:	58000080 	.word	0x58000080
 8005f64:	58024400 	.word	0x58024400
 8005f68:	58000400 	.word	0x58000400
 8005f6c:	58020000 	.word	0x58020000
 8005f70:	58020400 	.word	0x58020400
 8005f74:	58020800 	.word	0x58020800
 8005f78:	58020c00 	.word	0x58020c00
 8005f7c:	58021000 	.word	0x58021000
 8005f80:	58021400 	.word	0x58021400
 8005f84:	58021800 	.word	0x58021800
 8005f88:	58021c00 	.word	0x58021c00
 8005f8c:	58022400 	.word	0x58022400
 8005f90:	2300      	movs	r3, #0
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	f002 0203 	and.w	r2, r2, #3
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	4093      	lsls	r3, r2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fa2:	4938      	ldr	r1, [pc, #224]	@ (8006084 <HAL_GPIO_Init+0x34c>)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	3302      	adds	r3, #2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	43db      	mvns	r3, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4013      	ands	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f ae6b 	bne.w	8005d4c <HAL_GPIO_Init+0x14>
  }
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	3724      	adds	r7, #36	@ 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	58000400 	.word	0x58000400

08006088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	e001      	b.n	80060aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060c8:	787b      	ldrb	r3, [r7, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060d4:	e003      	b.n	80060de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	041a      	lsls	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	619a      	str	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060f2:	f7fb fbe7 	bl	80018c4 <HAL_GetTick>
 80060f6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e03b      	b.n	800617a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006122:	e00f      	b.n	8006144 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006124:	f7fb fbce 	bl	80018c4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b05      	cmp	r3, #5
 8006130:	d908      	bls.n	8006144 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2240      	movs	r2, #64	@ 0x40
 8006136:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2203      	movs	r2, #3
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e01a      	b.n	800617a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e8      	bne.n	8006124 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f9bc 	bl	80064d0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8006182:	b480      	push	{r7}
 8006184:	b087      	sub	sp, #28
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e03e      	b.n	800621a <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_MDMA_ConfigPostRequestMask+0x28>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e037      	b.n	800621a <HAL_MDMA_ConfigPostRequestMask+0x98>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d126      	bne.n	800620c <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11c      	bne.n	8006206 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d108      	bne.n	80061f4 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80061f0:	611a      	str	r2, [r3, #16]
 80061f2:	e00d      	b.n	8006210 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006202:	611a      	str	r2, [r3, #16]
 8006204:	e004      	b.n	8006210 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
 800620a:	e001      	b.n	8006210 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006234:	4b91      	ldr	r3, [pc, #580]	@ (800647c <HAL_MDMA_IRQHandler+0x254>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a91      	ldr	r2, [pc, #580]	@ (8006480 <HAL_MDMA_IRQHandler+0x258>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0a9b      	lsrs	r3, r3, #10
 8006240:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	4b8e      	ldr	r3, [pc, #568]	@ (8006484 <HAL_MDMA_IRQHandler+0x25c>)
 800624a:	4413      	add	r3, r2
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2201      	movs	r2, #1
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800625a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 812d 	beq.w	80064c4 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d054      	beq.n	8006322 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d04d      	beq.n	8006322 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0202 	bic.w	r2, r2, #2
 8006294:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ac:	f043 0201 	orr.w	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80062b4:	e005      	b.n	80062c2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062ba:	f043 0202 	orr.w	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062d0:	f043 0204 	orr.w	r2, r3, #4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062e6:	f043 0208 	orr.w	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d012      	beq.n	8006356 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2210      	movs	r2, #16
 8006344:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d012      	beq.n	800638a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2208      	movs	r2, #8
 8006378:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d012      	beq.n	80063be <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2204      	movs	r2, #4
 80063ac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d039      	beq.n	8006440 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d032      	beq.n	8006440 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80063e8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d110      	bne.n	8006418 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640a:	2b00      	cmp	r3, #0
 800640c:	d05c      	beq.n	80064c8 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
        }
        return;
 8006416:	e057      	b.n	80064c8 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2202      	movs	r2, #2
 800641e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006444:	2b00      	cmp	r3, #0
 8006446:	d040      	beq.n	80064ca <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2204      	movs	r2, #4
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3301      	adds	r3, #1
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d30d      	bcc.n	8006488 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f2      	bne.n	8006460 <HAL_MDMA_IRQHandler+0x238>
 800647a:	e006      	b.n	800648a <HAL_MDMA_IRQHandler+0x262>
 800647c:	24000000 	.word	0x24000000
 8006480:	1b4e81b5 	.word	0x1b4e81b5
 8006484:	adffffc0 	.word	0xadffffc0
        break;
 8006488:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2203      	movs	r2, #3
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80064a8:	e003      	b.n	80064b2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
 80064c2:	e002      	b.n	80064ca <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80064c4:	bf00      	nop
 80064c6:	e000      	b.n	80064ca <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80064c8:	bf00      	nop
    }
  }
}
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80064f6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006502:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800650e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006514:	3b01      	subs	r3, #1
 8006516:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006518:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006524:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006526:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006530:	d107      	bne.n	8006542 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8006540:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	da11      	bge.n	8006576 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006560:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	425b      	negs	r3, r3
 8006568:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	b292      	uxth	r2, r2
 8006572:	621a      	str	r2, [r3, #32]
 8006574:	e006      	b.n	8006584 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	b292      	uxth	r2, r2
 8006582:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	da15      	bge.n	80065b8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800659a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	425b      	negs	r3, r3
 80065a2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6a19      	ldr	r1, [r3, #32]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	041a      	lsls	r2, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	621a      	str	r2, [r3, #32]
 80065b6:	e009      	b.n	80065cc <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a19      	ldr	r1, [r3, #32]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c2:	041a      	lsls	r2, r3, #16
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d006      	beq.n	80065e4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80065e2:	e003      	b.n	80065ec <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006608:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	2b06      	cmp	r3, #6
 8006612:	d00a      	beq.n	800662a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006614:	4b26      	ldr	r3, [pc, #152]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d001      	beq.n	8006626 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e03f      	b.n	80066a6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e03d      	b.n	80066a6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800662a:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006632:	491f      	ldr	r1, [pc, #124]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4313      	orrs	r3, r2
 8006638:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800663a:	f7fb f943 	bl	80018c4 <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006640:	e009      	b.n	8006656 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006642:	f7fb f93f 	bl	80018c4 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006650:	d901      	bls.n	8006656 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e027      	b.n	80066a6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006656:	4b16      	ldr	r3, [pc, #88]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800665e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006662:	d1ee      	bne.n	8006642 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b1e      	cmp	r3, #30
 8006668:	d008      	beq.n	800667c <HAL_PWREx_ConfigSupply+0x7c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b2e      	cmp	r3, #46	@ 0x2e
 800666e:	d005      	beq.n	800667c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b1d      	cmp	r3, #29
 8006674:	d002      	beq.n	800667c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b2d      	cmp	r3, #45	@ 0x2d
 800667a:	d113      	bne.n	80066a4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800667c:	f7fb f922 	bl	80018c4 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006682:	e009      	b.n	8006698 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006684:	f7fb f91e 	bl	80018c4 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006692:	d901      	bls.n	8006698 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e006      	b.n	80066a6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0311 	and.w	r3, r3, #17
 80066a0:	2b11      	cmp	r3, #17
 80066a2:	d1ef      	bne.n	8006684 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	58024800 	.word	0x58024800

080066b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	@ 0x30
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e3c8      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8087 	beq.w	80067e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066d4:	4b88      	ldr	r3, [pc, #544]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066de:	4b86      	ldr	r3, [pc, #536]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d007      	beq.n	80066fa <HAL_RCC_OscConfig+0x46>
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	2b18      	cmp	r3, #24
 80066ee:	d110      	bne.n	8006712 <HAL_RCC_OscConfig+0x5e>
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d10b      	bne.n	8006712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fa:	4b7f      	ldr	r3, [pc, #508]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d06c      	beq.n	80067e0 <HAL_RCC_OscConfig+0x12c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d168      	bne.n	80067e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e3a2      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800671a:	d106      	bne.n	800672a <HAL_RCC_OscConfig+0x76>
 800671c:	4b76      	ldr	r3, [pc, #472]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a75      	ldr	r2, [pc, #468]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e02e      	b.n	8006788 <HAL_RCC_OscConfig+0xd4>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10c      	bne.n	800674c <HAL_RCC_OscConfig+0x98>
 8006732:	4b71      	ldr	r3, [pc, #452]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a70      	ldr	r2, [pc, #448]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	4b6e      	ldr	r3, [pc, #440]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6d      	ldr	r2, [pc, #436]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e01d      	b.n	8006788 <HAL_RCC_OscConfig+0xd4>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006754:	d10c      	bne.n	8006770 <HAL_RCC_OscConfig+0xbc>
 8006756:	4b68      	ldr	r3, [pc, #416]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a67      	ldr	r2, [pc, #412]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 800675c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b65      	ldr	r3, [pc, #404]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a64      	ldr	r2, [pc, #400]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e00b      	b.n	8006788 <HAL_RCC_OscConfig+0xd4>
 8006770:	4b61      	ldr	r3, [pc, #388]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a60      	ldr	r2, [pc, #384]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b5e      	ldr	r3, [pc, #376]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5d      	ldr	r2, [pc, #372]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fb f898 	bl	80018c4 <HAL_GetTick>
 8006794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006798:	f7fb f894 	bl	80018c4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	@ 0x64
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e356      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067aa:	4b53      	ldr	r3, [pc, #332]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0xe4>
 80067b6:	e014      	b.n	80067e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b8:	f7fb f884 	bl	80018c4 <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067c0:	f7fb f880 	bl	80018c4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	@ 0x64
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e342      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067d2:	4b49      	ldr	r3, [pc, #292]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x10c>
 80067de:	e000      	b.n	80067e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 808c 	beq.w	8006908 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067f0:	4b41      	ldr	r3, [pc, #260]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067fa:	4b3f      	ldr	r3, [pc, #252]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_RCC_OscConfig+0x162>
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	2b18      	cmp	r3, #24
 800680a:	d137      	bne.n	800687c <HAL_RCC_OscConfig+0x1c8>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d132      	bne.n	800687c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006816:	4b38      	ldr	r3, [pc, #224]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_RCC_OscConfig+0x17a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e314      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800682e:	4b32      	ldr	r3, [pc, #200]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f023 0219 	bic.w	r2, r3, #25
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	492f      	ldr	r1, [pc, #188]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 800683c:	4313      	orrs	r3, r2
 800683e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fb f840 	bl	80018c4 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006848:	f7fb f83c 	bl	80018c4 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e2fe      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685a:	4b27      	ldr	r3, [pc, #156]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006866:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	061b      	lsls	r3, r3, #24
 8006874:	4920      	ldr	r1, [pc, #128]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800687a:	e045      	b.n	8006908 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d026      	beq.n	80068d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006884:	4b1c      	ldr	r3, [pc, #112]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 0219 	bic.w	r2, r3, #25
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4919      	ldr	r1, [pc, #100]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 8006892:	4313      	orrs	r3, r2
 8006894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fb f815 	bl	80018c4 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800689e:	f7fb f811 	bl	80018c4 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e2d3      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068b0:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	490b      	ldr	r1, [pc, #44]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	e01a      	b.n	8006908 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b09      	ldr	r3, [pc, #36]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <HAL_RCC_OscConfig+0x244>)
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fa fff1 	bl	80018c4 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068e4:	e00a      	b.n	80068fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e6:	f7fa ffed 	bl	80018c4 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d903      	bls.n	80068fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e2af      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
 80068f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068fc:	4b96      	ldr	r3, [pc, #600]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1ee      	bne.n	80068e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d06a      	beq.n	80069ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006914:	4b90      	ldr	r3, [pc, #576]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800691c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800691e:	4b8e      	ldr	r3, [pc, #568]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b08      	cmp	r3, #8
 8006928:	d007      	beq.n	800693a <HAL_RCC_OscConfig+0x286>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b18      	cmp	r3, #24
 800692e:	d11b      	bne.n	8006968 <HAL_RCC_OscConfig+0x2b4>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d116      	bne.n	8006968 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800693a:	4b87      	ldr	r3, [pc, #540]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x29e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b80      	cmp	r3, #128	@ 0x80
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e282      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006952:	4b81      	ldr	r3, [pc, #516]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	061b      	lsls	r3, r3, #24
 8006960:	497d      	ldr	r1, [pc, #500]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006966:	e040      	b.n	80069ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d023      	beq.n	80069b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006970:	4b79      	ldr	r3, [pc, #484]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a78      	ldr	r2, [pc, #480]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fa ffa2 	bl	80018c4 <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006984:	f7fa ff9e 	bl	80018c4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e260      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006996:	4b70      	ldr	r3, [pc, #448]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	061b      	lsls	r3, r3, #24
 80069b0:	4969      	ldr	r1, [pc, #420]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60cb      	str	r3, [r1, #12]
 80069b6:	e018      	b.n	80069ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80069b8:	4b67      	ldr	r3, [pc, #412]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a66      	ldr	r2, [pc, #408]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80069be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fa ff7e 	bl	80018c4 <HAL_GetTick>
 80069c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069cc:	f7fa ff7a 	bl	80018c4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e23c      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069de:	4b5e      	ldr	r3, [pc, #376]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d036      	beq.n	8006a64 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d019      	beq.n	8006a32 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069fe:	4b56      	ldr	r3, [pc, #344]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a02:	4a55      	ldr	r2, [pc, #340]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0a:	f7fa ff5b 	bl	80018c4 <HAL_GetTick>
 8006a0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a12:	f7fa ff57 	bl	80018c4 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e219      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a24:	4b4c      	ldr	r3, [pc, #304]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x35e>
 8006a30:	e018      	b.n	8006a64 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a32:	4b49      	ldr	r3, [pc, #292]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a36:	4a48      	ldr	r2, [pc, #288]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3e:	f7fa ff41 	bl	80018c4 <HAL_GetTick>
 8006a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a46:	f7fa ff3d 	bl	80018c4 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e1ff      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a58:	4b3f      	ldr	r3, [pc, #252]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d036      	beq.n	8006ade <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a78:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a36      	ldr	r2, [pc, #216]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006a7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a84:	f7fa ff1e 	bl	80018c4 <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a8c:	f7fa ff1a 	bl	80018c4 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1dc      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x3d8>
 8006aaa:	e018      	b.n	8006ade <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aac:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a29      	ldr	r2, [pc, #164]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ab8:	f7fa ff04 	bl	80018c4 <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ac0:	f7fa ff00 	bl	80018c4 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e1c2      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ad2:	4b21      	ldr	r3, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8086 	beq.w	8006bf8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aec:	4b1b      	ldr	r3, [pc, #108]	@ (8006b5c <HAL_RCC_OscConfig+0x4a8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b5c <HAL_RCC_OscConfig+0x4a8>)
 8006af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006af8:	f7fa fee4 	bl	80018c4 <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b00:	f7fa fee0 	bl	80018c4 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b64      	cmp	r3, #100	@ 0x64
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e1a2      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <HAL_RCC_OscConfig+0x4a8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_OscConfig+0x480>
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b32:	e032      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d111      	bne.n	8006b60 <HAL_RCC_OscConfig+0x4ac>
 8006b3c:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	4a05      	ldr	r2, [pc, #20]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b48:	4b03      	ldr	r3, [pc, #12]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4c:	4a02      	ldr	r2, [pc, #8]	@ (8006b58 <HAL_RCC_OscConfig+0x4a4>)
 8006b4e:	f023 0304 	bic.w	r3, r3, #4
 8006b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b54:	e021      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e6>
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	58024800 	.word	0x58024800
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_OscConfig+0x4ce>
 8006b68:	4b83      	ldr	r3, [pc, #524]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6c:	4a82      	ldr	r2, [pc, #520]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b74:	4b80      	ldr	r3, [pc, #512]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b78:	4a7f      	ldr	r2, [pc, #508]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b80:	e00b      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e6>
 8006b82:	4b7d      	ldr	r3, [pc, #500]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b86:	4a7c      	ldr	r2, [pc, #496]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b92:	4a79      	ldr	r2, [pc, #484]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba2:	f7fa fe8f 	bl	80018c4 <HAL_GetTick>
 8006ba6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fa fe8b 	bl	80018c4 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e14b      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ee      	beq.n	8006baa <HAL_RCC_OscConfig+0x4f6>
 8006bcc:	e014      	b.n	8006bf8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bce:	f7fa fe79 	bl	80018c4 <HAL_GetTick>
 8006bd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fa fe75 	bl	80018c4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e135      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bec:	4b62      	ldr	r3, [pc, #392]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ee      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 812a 	beq.w	8006e56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c02:	4b5d      	ldr	r3, [pc, #372]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c0a:	2b18      	cmp	r3, #24
 8006c0c:	f000 80ba 	beq.w	8006d84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	f040 8095 	bne.w	8006d44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b57      	ldr	r3, [pc, #348]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a56      	ldr	r2, [pc, #344]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7fa fe4d 	bl	80018c4 <HAL_GetTick>
 8006c2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2e:	f7fa fe49 	bl	80018c4 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e10b      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c40:	4b4d      	ldr	r3, [pc, #308]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f0      	bne.n	8006c2e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c50:	4b4a      	ldr	r3, [pc, #296]	@ (8006d7c <HAL_RCC_OscConfig+0x6c8>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c5c:	0112      	lsls	r2, r2, #4
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	4945      	ldr	r1, [pc, #276]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c74:	3b01      	subs	r3, #1
 8006c76:	025b      	lsls	r3, r3, #9
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	3b01      	subs	r3, #1
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c96:	4938      	ldr	r1, [pc, #224]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c9c:	4b36      	ldr	r3, [pc, #216]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	4a35      	ldr	r2, [pc, #212]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ca8:	4b33      	ldr	r3, [pc, #204]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cac:	4b34      	ldr	r3, [pc, #208]	@ (8006d80 <HAL_RCC_OscConfig+0x6cc>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cb4:	00d2      	lsls	r2, r2, #3
 8006cb6:	4930      	ldr	r1, [pc, #192]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc0:	f023 020c 	bic.w	r2, r3, #12
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	492b      	ldr	r1, [pc, #172]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cce:	4b2a      	ldr	r3, [pc, #168]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	f023 0202 	bic.w	r2, r3, #2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	4927      	ldr	r1, [pc, #156]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ce0:	4b25      	ldr	r3, [pc, #148]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4a24      	ldr	r2, [pc, #144]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b22      	ldr	r3, [pc, #136]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a21      	ldr	r2, [pc, #132]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006cfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d04:	4b1c      	ldr	r3, [pc, #112]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d08:	4a1b      	ldr	r2, [pc, #108]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d10:	4b19      	ldr	r3, [pc, #100]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a18      	ldr	r2, [pc, #96]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1c:	f7fa fdd2 	bl	80018c4 <HAL_GetTick>
 8006d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fa fdce 	bl	80018c4 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e090      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d36:	4b10      	ldr	r3, [pc, #64]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0x670>
 8006d42:	e088      	b.n	8006e56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d44:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a0b      	ldr	r2, [pc, #44]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fa fdb8 	bl	80018c4 <HAL_GetTick>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fa fdb4 	bl	80018c4 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e076      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d6a:	4b03      	ldr	r3, [pc, #12]	@ (8006d78 <HAL_RCC_OscConfig+0x6c4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x6a4>
 8006d76:	e06e      	b.n	8006e56 <HAL_RCC_OscConfig+0x7a2>
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	fffffc0c 	.word	0xfffffc0c
 8006d80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d84:	4b36      	ldr	r3, [pc, #216]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d8a:	4b35      	ldr	r3, [pc, #212]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d031      	beq.n	8006dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f003 0203 	and.w	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d12a      	bne.n	8006dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d122      	bne.n	8006dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d11a      	bne.n	8006dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	0a5b      	lsrs	r3, r3, #9
 8006dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d111      	bne.n	8006dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	0c1b      	lsrs	r3, r3, #16
 8006ddc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d108      	bne.n	8006dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e02b      	b.n	8006e58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006e00:	4b17      	ldr	r3, [pc, #92]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d01f      	beq.n	8006e56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006e16:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	4a11      	ldr	r2, [pc, #68]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e22:	f7fa fd4f 	bl	80018c4 <HAL_GetTick>
 8006e26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006e28:	bf00      	nop
 8006e2a:	f7fa fd4b 	bl	80018c4 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d0f9      	beq.n	8006e2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e64 <HAL_RCC_OscConfig+0x7b0>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e42:	00d2      	lsls	r2, r2, #3
 8006e44:	4906      	ldr	r1, [pc, #24]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006e4a:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4e:	4a04      	ldr	r2, [pc, #16]	@ (8006e60 <HAL_RCC_OscConfig+0x7ac>)
 8006e50:	f043 0301 	orr.w	r3, r3, #1
 8006e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3730      	adds	r7, #48	@ 0x30
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	58024400 	.word	0x58024400
 8006e64:	ffff0007 	.word	0xffff0007

08006e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e19c      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d910      	bls.n	8006eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8a:	4b87      	ldr	r3, [pc, #540]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 020f 	bic.w	r2, r3, #15
 8006e92:	4985      	ldr	r1, [pc, #532]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9a:	4b83      	ldr	r3, [pc, #524]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d001      	beq.n	8006eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e184      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d908      	bls.n	8006eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ec8:	4b78      	ldr	r3, [pc, #480]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	4975      	ldr	r1, [pc, #468]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	4b70      	ldr	r3, [pc, #448]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d908      	bls.n	8006f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	496a      	ldr	r1, [pc, #424]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d010      	beq.n	8006f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	4b64      	ldr	r3, [pc, #400]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d908      	bls.n	8006f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f24:	4b61      	ldr	r3, [pc, #388]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	495e      	ldr	r1, [pc, #376]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69da      	ldr	r2, [r3, #28]
 8006f46:	4b59      	ldr	r3, [pc, #356]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d908      	bls.n	8006f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f52:	4b56      	ldr	r3, [pc, #344]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4953      	ldr	r1, [pc, #332]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d010      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	4b4d      	ldr	r3, [pc, #308]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d908      	bls.n	8006f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f80:	4b4a      	ldr	r3, [pc, #296]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f023 020f 	bic.w	r2, r3, #15
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	4947      	ldr	r1, [pc, #284]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d055      	beq.n	800704a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f9e:	4b43      	ldr	r3, [pc, #268]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4940      	ldr	r1, [pc, #256]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d121      	bne.n	8007008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0f6      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d107      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fd0:	4b36      	ldr	r3, [pc, #216]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d115      	bne.n	8007008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0ea      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fe8:	4b30      	ldr	r3, [pc, #192]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0de      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0d6      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007008:	4b28      	ldr	r3, [pc, #160]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f023 0207 	bic.w	r2, r3, #7
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4925      	ldr	r1, [pc, #148]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8007016:	4313      	orrs	r3, r2
 8007018:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701a:	f7fa fc53 	bl	80018c4 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007020:	e00a      	b.n	8007038 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007022:	f7fa fc4f 	bl	80018c4 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e0be      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007038:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	429a      	cmp	r2, r3
 8007048:	d1eb      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d010      	beq.n	8007078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	429a      	cmp	r2, r3
 8007064:	d208      	bcs.n	8007078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007066:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f023 020f 	bic.w	r2, r3, #15
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	490e      	ldr	r1, [pc, #56]	@ (80070ac <HAL_RCC_ClockConfig+0x244>)
 8007074:	4313      	orrs	r3, r2
 8007076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d214      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 020f 	bic.w	r2, r3, #15
 800708e:	4906      	ldr	r1, [pc, #24]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	4313      	orrs	r3, r2
 8007094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007096:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <HAL_RCC_ClockConfig+0x240>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e086      	b.n	80071b6 <HAL_RCC_ClockConfig+0x34e>
 80070a8:	52002000 	.word	0x52002000
 80070ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	4b3f      	ldr	r3, [pc, #252]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d208      	bcs.n	80070de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070cc:	4b3c      	ldr	r3, [pc, #240]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	4939      	ldr	r1, [pc, #228]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d010      	beq.n	800710c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	4b34      	ldr	r3, [pc, #208]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d208      	bcs.n	800710c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070fa:	4b31      	ldr	r3, [pc, #196]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	492e      	ldr	r1, [pc, #184]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007108:	4313      	orrs	r3, r2
 800710a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	4b28      	ldr	r3, [pc, #160]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007124:	429a      	cmp	r2, r3
 8007126:	d208      	bcs.n	800713a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007128:	4b25      	ldr	r3, [pc, #148]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	4922      	ldr	r1, [pc, #136]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007136:	4313      	orrs	r3, r2
 8007138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d010      	beq.n	8007168 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007152:	429a      	cmp	r2, r3
 8007154:	d208      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007156:	4b1a      	ldr	r3, [pc, #104]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4917      	ldr	r1, [pc, #92]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007164:	4313      	orrs	r3, r2
 8007166:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007168:	f000 f834 	bl	80071d4 <HAL_RCC_GetSysClockFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	4912      	ldr	r1, [pc, #72]	@ (80071c4 <HAL_RCC_ClockConfig+0x35c>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
 8007184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007186:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <HAL_RCC_ClockConfig+0x358>)
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	4a0d      	ldr	r2, [pc, #52]	@ (80071c4 <HAL_RCC_ClockConfig+0x35c>)
 8007190:	5cd3      	ldrb	r3, [r2, r3]
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
 800719c:	4a0a      	ldr	r2, [pc, #40]	@ (80071c8 <HAL_RCC_ClockConfig+0x360>)
 800719e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071a0:	4a0a      	ldr	r2, [pc, #40]	@ (80071cc <HAL_RCC_ClockConfig+0x364>)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80071a6:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <HAL_RCC_ClockConfig+0x368>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fa fb40 	bl	8001830 <HAL_InitTick>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
 80071c4:	0800f87c 	.word	0x0800f87c
 80071c8:	24000004 	.word	0x24000004
 80071cc:	24000000 	.word	0x24000000
 80071d0:	24000008 	.word	0x24000008

080071d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b089      	sub	sp, #36	@ 0x24
 80071d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071da:	4bb3      	ldr	r3, [pc, #716]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071e2:	2b18      	cmp	r3, #24
 80071e4:	f200 8155 	bhi.w	8007492 <HAL_RCC_GetSysClockFreq+0x2be>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007255 	.word	0x08007255
 80071f4:	08007493 	.word	0x08007493
 80071f8:	08007493 	.word	0x08007493
 80071fc:	08007493 	.word	0x08007493
 8007200:	08007493 	.word	0x08007493
 8007204:	08007493 	.word	0x08007493
 8007208:	08007493 	.word	0x08007493
 800720c:	08007493 	.word	0x08007493
 8007210:	0800727b 	.word	0x0800727b
 8007214:	08007493 	.word	0x08007493
 8007218:	08007493 	.word	0x08007493
 800721c:	08007493 	.word	0x08007493
 8007220:	08007493 	.word	0x08007493
 8007224:	08007493 	.word	0x08007493
 8007228:	08007493 	.word	0x08007493
 800722c:	08007493 	.word	0x08007493
 8007230:	08007281 	.word	0x08007281
 8007234:	08007493 	.word	0x08007493
 8007238:	08007493 	.word	0x08007493
 800723c:	08007493 	.word	0x08007493
 8007240:	08007493 	.word	0x08007493
 8007244:	08007493 	.word	0x08007493
 8007248:	08007493 	.word	0x08007493
 800724c:	08007493 	.word	0x08007493
 8007250:	08007287 	.word	0x08007287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007254:	4b94      	ldr	r3, [pc, #592]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007260:	4b91      	ldr	r3, [pc, #580]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	08db      	lsrs	r3, r3, #3
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	4a90      	ldr	r2, [pc, #576]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007272:	e111      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007274:	4b8d      	ldr	r3, [pc, #564]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007276:	61bb      	str	r3, [r7, #24]
      break;
 8007278:	e10e      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800727a:	4b8d      	ldr	r3, [pc, #564]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800727c:	61bb      	str	r3, [r7, #24]
      break;
 800727e:	e10b      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007280:	4b8c      	ldr	r3, [pc, #560]	@ (80074b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007282:	61bb      	str	r3, [r7, #24]
      break;
 8007284:	e108      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007286:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007290:	4b85      	ldr	r3, [pc, #532]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800729a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800729c:	4b82      	ldr	r3, [pc, #520]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80072a6:	4b80      	ldr	r3, [pc, #512]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072aa:	08db      	lsrs	r3, r3, #3
 80072ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80e1 	beq.w	800748c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	f000 8083 	beq.w	80073d8 <HAL_RCC_GetSysClockFreq+0x204>
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f200 80a1 	bhi.w	800741c <HAL_RCC_GetSysClockFreq+0x248>
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x114>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d056      	beq.n	8007394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072e6:	e099      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e8:	4b6f      	ldr	r3, [pc, #444]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d02d      	beq.n	8007350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f4:	4b6c      	ldr	r3, [pc, #432]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	4a6b      	ldr	r2, [pc, #428]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
 8007304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b62      	ldr	r3, [pc, #392]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007332:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80074b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800734e:	e087      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80074bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b51      	ldr	r3, [pc, #324]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a02 	vldr	s12, [r7, #8]
 8007376:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80074b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007392:	e065      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b40      	ldr	r3, [pc, #256]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80074b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073d6:	e043      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80074c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b2f      	ldr	r3, [pc, #188]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80073fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80074b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800741a:	e021      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b1e      	ldr	r3, [pc, #120]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007442:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80074b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800745e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007460:	4b11      	ldr	r3, [pc, #68]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	0a5b      	lsrs	r3, r3, #9
 8007466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800746a:	3301      	adds	r3, #1
 800746c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007478:	edd7 6a07 	vldr	s13, [r7, #28]
 800747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 3a90 	vmov	r3, s15
 8007488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800748a:	e005      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
      break;
 8007490:	e002      	b.n	8007498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007492:	4b07      	ldr	r3, [pc, #28]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007494:	61bb      	str	r3, [r7, #24]
      break;
 8007496:	bf00      	nop
  }

  return sysclockfreq;
 8007498:	69bb      	ldr	r3, [r7, #24]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3724      	adds	r7, #36	@ 0x24
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	58024400 	.word	0x58024400
 80074ac:	03d09000 	.word	0x03d09000
 80074b0:	003d0900 	.word	0x003d0900
 80074b4:	017d7840 	.word	0x017d7840
 80074b8:	46000000 	.word	0x46000000
 80074bc:	4c742400 	.word	0x4c742400
 80074c0:	4a742400 	.word	0x4a742400
 80074c4:	4bbebc20 	.word	0x4bbebc20

080074c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074ce:	f7ff fe81 	bl	80071d4 <HAL_RCC_GetSysClockFreq>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <HAL_RCC_GetHCLKFreq+0x50>)
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	490f      	ldr	r1, [pc, #60]	@ (800751c <HAL_RCC_GetHCLKFreq+0x54>)
 80074e0:	5ccb      	ldrb	r3, [r1, r3]
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <HAL_RCC_GetHCLKFreq+0x50>)
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	4a09      	ldr	r2, [pc, #36]	@ (800751c <HAL_RCC_GetHCLKFreq+0x54>)
 80074f6:	5cd3      	ldrb	r3, [r2, r3]
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	4a07      	ldr	r2, [pc, #28]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x58>)
 8007504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007506:	4a07      	ldr	r2, [pc, #28]	@ (8007524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <HAL_RCC_GetHCLKFreq+0x58>)
 800750e:	681b      	ldr	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	58024400 	.word	0x58024400
 800751c:	0800f87c 	.word	0x0800f87c
 8007520:	24000004 	.word	0x24000004
 8007524:	24000000 	.word	0x24000000

08007528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800752c:	f7ff ffcc 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 8007530:	4602      	mov	r2, r0
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	4904      	ldr	r1, [pc, #16]	@ (8007550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800753e:	5ccb      	ldrb	r3, [r1, r3]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	58024400 	.word	0x58024400
 8007550:	0800f87c 	.word	0x0800f87c

08007554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007558:	f7ff ffb6 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	4904      	ldr	r1, [pc, #16]	@ (800757c <HAL_RCC_GetPCLK2Freq+0x28>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007574:	4618      	mov	r0, r3
 8007576:	bd80      	pop	{r7, pc}
 8007578:	58024400 	.word	0x58024400
 800757c:	0800f87c 	.word	0x0800f87c

08007580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007584:	b0c6      	sub	sp, #280	@ 0x118
 8007586:	af00      	add	r7, sp, #0
 8007588:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800758c:	2300      	movs	r3, #0
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007592:	2300      	movs	r3, #0
 8007594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80075a4:	2500      	movs	r5, #0
 80075a6:	ea54 0305 	orrs.w	r3, r4, r5
 80075aa:	d049      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075b6:	d02f      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80075b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075bc:	d828      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80075be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c2:	d01a      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075c8:	d822      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d2:	d007      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075d4:	e01c      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d6:	4bab      	ldr	r3, [pc, #684]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	4aaa      	ldr	r2, [pc, #680]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075e2:	e01a      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	3308      	adds	r3, #8
 80075ea:	2102      	movs	r1, #2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 fa49 	bl	8009a84 <RCCEx_PLL2_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075f8:	e00f      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fe:	3328      	adds	r3, #40	@ 0x28
 8007600:	2102      	movs	r1, #2
 8007602:	4618      	mov	r0, r3
 8007604:	f002 faf0 	bl	8009be8 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800760e:	e004      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007616:	e000      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007622:	4b98      	ldr	r3, [pc, #608]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007626:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007630:	4a94      	ldr	r2, [pc, #592]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007632:	430b      	orrs	r3, r1
 8007634:	6513      	str	r3, [r2, #80]	@ 0x50
 8007636:	e003      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800763c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800764c:	f04f 0900 	mov.w	r9, #0
 8007650:	ea58 0309 	orrs.w	r3, r8, r9
 8007654:	d047      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765c:	2b04      	cmp	r3, #4
 800765e:	d82a      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007660:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	0800767d 	.word	0x0800767d
 800766c:	0800768b 	.word	0x0800768b
 8007670:	080076a1 	.word	0x080076a1
 8007674:	080076bf 	.word	0x080076bf
 8007678:	080076bf 	.word	0x080076bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767c:	4b81      	ldr	r3, [pc, #516]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a80      	ldr	r2, [pc, #512]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007688:	e01a      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	3308      	adds	r3, #8
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f002 f9f6 	bl	8009a84 <RCCEx_PLL2_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800769e:	e00f      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	3328      	adds	r3, #40	@ 0x28
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f002 fa9d 	bl	8009be8 <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b4:	e004      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076bc:	e000      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80076be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076c8:	4b6e      	ldr	r3, [pc, #440]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076cc:	f023 0107 	bic.w	r1, r3, #7
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d6:	4a6b      	ldr	r2, [pc, #428]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076d8:	430b      	orrs	r3, r1
 80076da:	6513      	str	r3, [r2, #80]	@ 0x50
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80076f2:	f04f 0b00 	mov.w	fp, #0
 80076f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80076fa:	d05b      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007704:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007708:	d03b      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800770a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800770e:	d834      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007714:	d037      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800771a:	d82e      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800771c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007720:	d033      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007722:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007726:	d828      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800772c:	d01a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800772e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007732:	d822      	bhi.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800773c:	d007      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800773e:	e01c      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007740:	4b50      	ldr	r3, [pc, #320]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	4a4f      	ldr	r2, [pc, #316]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800774a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800774c:	e01e      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800774e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007752:	3308      	adds	r3, #8
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f002 f994 	bl	8009a84 <RCCEx_PLL2_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007762:	e013      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	3328      	adds	r3, #40	@ 0x28
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f002 fa3b 	bl	8009be8 <RCCEx_PLL3_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007778:	e008      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007780:	e004      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007782:	bf00      	nop
 8007784:	e002      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007786:	bf00      	nop
 8007788:	e000      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800778a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007794:	4b3b      	ldr	r3, [pc, #236]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007798:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077a4:	4a37      	ldr	r2, [pc, #220]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d05d      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80077e0:	d03b      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80077e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80077e6:	d834      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077ec:	d037      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80077ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077f2:	d82e      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077f8:	d033      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80077fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077fe:	d828      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007804:	d01a      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800780a:	d822      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007814:	d007      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007816:	e01c      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800781e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007824:	e01e      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	3308      	adds	r3, #8
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f002 f928 	bl	8009a84 <RCCEx_PLL2_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800783a:	e013      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007840:	3328      	adds	r3, #40	@ 0x28
 8007842:	2100      	movs	r1, #0
 8007844:	4618      	mov	r0, r3
 8007846:	f002 f9cf 	bl	8009be8 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007850:	e008      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007858:	e004      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800786c:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800786e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007870:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800787c:	4a01      	ldr	r2, [pc, #4]	@ (8007884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800787e:	430b      	orrs	r3, r1
 8007880:	6593      	str	r3, [r2, #88]	@ 0x58
 8007882:	e005      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800788c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800789c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078a0:	2300      	movs	r3, #0
 80078a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4313      	orrs	r3, r2
 80078ae:	d03a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b6:	2b30      	cmp	r3, #48	@ 0x30
 80078b8:	d01f      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80078ba:	2b30      	cmp	r3, #48	@ 0x30
 80078bc:	d819      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d00c      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d815      	bhi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d019      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d111      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ce:	4baa      	ldr	r3, [pc, #680]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	4aa9      	ldr	r2, [pc, #676]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80078da:	e011      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	3308      	adds	r3, #8
 80078e2:	2102      	movs	r1, #2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f002 f8cd 	bl	8009a84 <RCCEx_PLL2_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80078f0:	e006      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f8:	e002      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80078fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007908:	4b9b      	ldr	r3, [pc, #620]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800790a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007916:	4a98      	ldr	r2, [pc, #608]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007918:	430b      	orrs	r3, r1
 800791a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800791c:	e003      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007936:	2300      	movs	r3, #0
 8007938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800793c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007940:	460b      	mov	r3, r1
 8007942:	4313      	orrs	r3, r2
 8007944:	d051      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800794c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007950:	d035      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007956:	d82e      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800795c:	d031      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800795e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007962:	d828      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007968:	d01a      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800796a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800796e:	d822      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007978:	d007      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800797a:	e01c      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800797c:	4b7e      	ldr	r3, [pc, #504]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	4a7d      	ldr	r2, [pc, #500]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007988:	e01c      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	3308      	adds	r3, #8
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f002 f876 	bl	8009a84 <RCCEx_PLL2_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800799e:	e011      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	3328      	adds	r3, #40	@ 0x28
 80079a6:	2100      	movs	r1, #0
 80079a8:	4618      	mov	r0, r3
 80079aa:	f002 f91d 	bl	8009be8 <RCCEx_PLL3_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079b4:	e006      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079bc:	e002      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80079be:	bf00      	nop
 80079c0:	e000      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80079c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079da:	4a67      	ldr	r2, [pc, #412]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6513      	str	r3, [r2, #80]	@ 0x50
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80079f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079fa:	2300      	movs	r3, #0
 80079fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d053      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a14:	d033      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007a16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a1a:	d82c      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a20:	d02f      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a26:	d826      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a2c:	d02b      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007a2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a32:	d820      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a38:	d012      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3e:	d81a      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d022      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a48:	d115      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4e:	3308      	adds	r3, #8
 8007a50:	2101      	movs	r1, #1
 8007a52:	4618      	mov	r0, r3
 8007a54:	f002 f816 	bl	8009a84 <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a5e:	e015      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	3328      	adds	r3, #40	@ 0x28
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f002 f8bd 	bl	8009be8 <RCCEx_PLL3_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a74:	e00a      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a7e:	bf00      	nop
 8007a80:	e004      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a82:	bf00      	nop
 8007a84:	e002      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a86:	bf00      	nop
 8007a88:	e000      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a94:	4b38      	ldr	r3, [pc, #224]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aa2:	4a35      	ldr	r2, [pc, #212]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aa8:	e003      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ac8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007acc:	460b      	mov	r3, r1
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	d058      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ade:	d033      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ae4:	d82c      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aea:	d02f      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af0:	d826      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007af2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007af6:	d02b      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007af8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007afc:	d820      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b02:	d012      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b08:	d81a      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d022      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b12:	d115      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	3308      	adds	r3, #8
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 ffb1 	bl	8009a84 <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b28:	e015      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2e:	3328      	adds	r3, #40	@ 0x28
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 f858 	bl	8009be8 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b3e:	e00a      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b46:	e006      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b48:	bf00      	nop
 8007b4a:	e004      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e002      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b50:	bf00      	nop
 8007b52:	e000      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10e      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b5e:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b6e:	4a02      	ldr	r2, [pc, #8]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b74:	e006      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d037      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bae:	d00e      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb4:	d816      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bbe:	d111      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4bc4      	ldr	r3, [pc, #784]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	4ac3      	ldr	r2, [pc, #780]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bcc:	e00f      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 ff54 	bl	8009a84 <RCCEx_PLL2_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007be2:	e004      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c04:	4ab3      	ldr	r2, [pc, #716]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c06:	430b      	orrs	r3, r1
 8007c08:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c0a:	e003      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4313      	orrs	r3, r2
 8007c32:	d039      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d81c      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c81 	.word	0x08007c81
 8007c48:	08007c55 	.word	0x08007c55
 8007c4c:	08007c63 	.word	0x08007c63
 8007c50:	08007c81 	.word	0x08007c81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c54:	4b9f      	ldr	r3, [pc, #636]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	4a9e      	ldr	r2, [pc, #632]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c60:	e00f      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c66:	3308      	adds	r3, #8
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 ff0a 	bl	8009a84 <RCCEx_PLL2_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c8a:	4b92      	ldr	r3, [pc, #584]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8e:	f023 0103 	bic.w	r1, r3, #3
 8007c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c98:	4a8e      	ldr	r2, [pc, #568]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f000 8099 	beq.w	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cca:	4b83      	ldr	r3, [pc, #524]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a82      	ldr	r2, [pc, #520]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cd6:	f7f9 fdf5 	bl	80018c4 <HAL_GetTick>
 8007cda:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cde:	e00b      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce0:	f7f9 fdf0 	bl	80018c4 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b64      	cmp	r3, #100	@ 0x64
 8007cee:	d903      	bls.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cf6:	e005      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cf8:	4b77      	ldr	r3, [pc, #476]	@ (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0ed      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d173      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d0c:	4b71      	ldr	r3, [pc, #452]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d18:	4053      	eors	r3, r2
 8007d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d22:	4b6c      	ldr	r3, [pc, #432]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d2e:	4b69      	ldr	r3, [pc, #420]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d32:	4a68      	ldr	r2, [pc, #416]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d3a:	4b66      	ldr	r3, [pc, #408]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3e:	4a65      	ldr	r2, [pc, #404]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d46:	4a63      	ldr	r2, [pc, #396]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d5a:	d118      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5c:	f7f9 fdb2 	bl	80018c4 <HAL_GetTick>
 8007d60:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d64:	e00d      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d66:	f7f9 fdad 	bl	80018c4 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007d70:	1ad2      	subs	r2, r2, r3
 8007d72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d903      	bls.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007d80:	e005      	b.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d82:	4b54      	ldr	r3, [pc, #336]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0eb      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d129      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da6:	d10e      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007da8:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007db8:	091a      	lsrs	r2, r3, #4
 8007dba:	4b48      	ldr	r3, [pc, #288]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	4a45      	ldr	r2, [pc, #276]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6113      	str	r3, [r2, #16]
 8007dc4:	e005      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007dc6:	4b43      	ldr	r3, [pc, #268]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	4a42      	ldr	r2, [pc, #264]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007dd0:	6113      	str	r3, [r2, #16]
 8007dd2:	4b40      	ldr	r3, [pc, #256]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de2:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007de8:	e008      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007df2:	e003      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f002 0301 	and.w	r3, r2, #1
 8007e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007e16:	460b      	mov	r3, r1
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	f000 808f 	beq.w	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e24:	2b28      	cmp	r3, #40	@ 0x28
 8007e26:	d871      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007e28:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007f15 	.word	0x08007f15
 8007e34:	08007f0d 	.word	0x08007f0d
 8007e38:	08007f0d 	.word	0x08007f0d
 8007e3c:	08007f0d 	.word	0x08007f0d
 8007e40:	08007f0d 	.word	0x08007f0d
 8007e44:	08007f0d 	.word	0x08007f0d
 8007e48:	08007f0d 	.word	0x08007f0d
 8007e4c:	08007f0d 	.word	0x08007f0d
 8007e50:	08007ee1 	.word	0x08007ee1
 8007e54:	08007f0d 	.word	0x08007f0d
 8007e58:	08007f0d 	.word	0x08007f0d
 8007e5c:	08007f0d 	.word	0x08007f0d
 8007e60:	08007f0d 	.word	0x08007f0d
 8007e64:	08007f0d 	.word	0x08007f0d
 8007e68:	08007f0d 	.word	0x08007f0d
 8007e6c:	08007f0d 	.word	0x08007f0d
 8007e70:	08007ef7 	.word	0x08007ef7
 8007e74:	08007f0d 	.word	0x08007f0d
 8007e78:	08007f0d 	.word	0x08007f0d
 8007e7c:	08007f0d 	.word	0x08007f0d
 8007e80:	08007f0d 	.word	0x08007f0d
 8007e84:	08007f0d 	.word	0x08007f0d
 8007e88:	08007f0d 	.word	0x08007f0d
 8007e8c:	08007f0d 	.word	0x08007f0d
 8007e90:	08007f15 	.word	0x08007f15
 8007e94:	08007f0d 	.word	0x08007f0d
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f0d 	.word	0x08007f0d
 8007ea0:	08007f0d 	.word	0x08007f0d
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007f0d 	.word	0x08007f0d
 8007eac:	08007f0d 	.word	0x08007f0d
 8007eb0:	08007f15 	.word	0x08007f15
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	08007f0d 	.word	0x08007f0d
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f0d 	.word	0x08007f0d
 8007ecc:	08007f0d 	.word	0x08007f0d
 8007ed0:	08007f15 	.word	0x08007f15
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	58024800 	.word	0x58024800
 8007edc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fdcb 	bl	8009a84 <RCCEx_PLL2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ef4:	e00f      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efa:	3328      	adds	r3, #40	@ 0x28
 8007efc:	2101      	movs	r1, #1
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fe72 	bl	8009be8 <RCCEx_PLL3_Config>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f0a:	e004      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f12:	e000      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f1e:	4bbf      	ldr	r3, [pc, #764]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f2c:	4abb      	ldr	r2, [pc, #748]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f32:	e003      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f002 0302 	and.w	r3, r2, #2
 8007f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	d041      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	d824      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007f66:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007fb9 	.word	0x08007fb9
 8007f70:	08007f85 	.word	0x08007f85
 8007f74:	08007f9b 	.word	0x08007f9b
 8007f78:	08007fb9 	.word	0x08007fb9
 8007f7c:	08007fb9 	.word	0x08007fb9
 8007f80:	08007fb9 	.word	0x08007fb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f88:	3308      	adds	r3, #8
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fd79 	bl	8009a84 <RCCEx_PLL2_Config>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f98:	e00f      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9e:	3328      	adds	r3, #40	@ 0x28
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fe20 	bl	8009be8 <RCCEx_PLL3_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fae:	e004      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fb6:	e000      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fc2:	4b96      	ldr	r3, [pc, #600]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc6:	f023 0107 	bic.w	r1, r3, #7
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd0:	4a92      	ldr	r2, [pc, #584]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fd6:	e003      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f002 0304 	and.w	r3, r2, #4
 8007fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ff6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	d044      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008008:	2b05      	cmp	r3, #5
 800800a:	d825      	bhi.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800800c:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	08008061 	.word	0x08008061
 8008018:	0800802d 	.word	0x0800802d
 800801c:	08008043 	.word	0x08008043
 8008020:	08008061 	.word	0x08008061
 8008024:	08008061 	.word	0x08008061
 8008028:	08008061 	.word	0x08008061
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	3308      	adds	r3, #8
 8008032:	2101      	movs	r1, #1
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fd25 	bl	8009a84 <RCCEx_PLL2_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008040:	e00f      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008046:	3328      	adds	r3, #40	@ 0x28
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f001 fdcc 	bl	8009be8 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008056:	e004      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800806a:	4b6c      	ldr	r3, [pc, #432]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800806c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806e:	f023 0107 	bic.w	r1, r3, #7
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807a:	4a68      	ldr	r2, [pc, #416]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800807c:	430b      	orrs	r3, r1
 800807e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008080:	e003      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800808a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f002 0320 	and.w	r3, r2, #32
 8008096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800809a:	2300      	movs	r3, #0
 800809c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4313      	orrs	r3, r2
 80080a8:	d055      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080b6:	d033      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80080b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080bc:	d82c      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d02f      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c8:	d826      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ce:	d02b      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80080d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080d4:	d820      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080da:	d012      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80080dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080e0:	d81a      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d022      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80080e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ea:	d115      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	3308      	adds	r3, #8
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fcc5 	bl	8009a84 <RCCEx_PLL2_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008100:	e015      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008106:	3328      	adds	r3, #40	@ 0x28
 8008108:	2102      	movs	r1, #2
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fd6c 	bl	8009be8 <RCCEx_PLL3_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008116:	e00a      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800811e:	e006      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008120:	bf00      	nop
 8008122:	e004      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008124:	bf00      	nop
 8008126:	e002      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008128:	bf00      	nop
 800812a:	e000      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800812c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10b      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008136:	4b39      	ldr	r3, [pc, #228]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008146:	4a35      	ldr	r2, [pc, #212]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008148:	430b      	orrs	r3, r1
 800814a:	6553      	str	r3, [r2, #84]	@ 0x54
 800814c:	e003      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008162:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800816c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d058      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800817e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008182:	d033      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008184:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008188:	d82c      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800818e:	d02f      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008194:	d826      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800819a:	d02b      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800819c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081a0:	d820      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80081a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081a6:	d012      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80081a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ac:	d81a      	bhi.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d022      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80081b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b6:	d115      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081bc:	3308      	adds	r3, #8
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 fc5f 	bl	8009a84 <RCCEx_PLL2_Config>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081cc:	e015      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d2:	3328      	adds	r3, #40	@ 0x28
 80081d4:	2102      	movs	r1, #2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fd06 	bl	8009be8 <RCCEx_PLL3_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081e2:	e00a      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081ea:	e006      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081ec:	bf00      	nop
 80081ee:	e004      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081f0:	bf00      	nop
 80081f2:	e002      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081f4:	bf00      	nop
 80081f6:	e000      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80081f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10e      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008202:	4b06      	ldr	r3, [pc, #24]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008206:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800820a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008212:	4a02      	ldr	r2, [pc, #8]	@ (800821c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008214:	430b      	orrs	r3, r1
 8008216:	6593      	str	r3, [r2, #88]	@ 0x58
 8008218:	e006      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800821a:	bf00      	nop
 800821c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008234:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008238:	2300      	movs	r3, #0
 800823a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800823e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008242:	460b      	mov	r3, r1
 8008244:	4313      	orrs	r3, r2
 8008246:	d055      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008250:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008254:	d033      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008256:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800825a:	d82c      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800825c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008260:	d02f      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008266:	d826      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008268:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800826c:	d02b      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800826e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008272:	d820      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008278:	d012      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800827a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800827e:	d81a      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d022      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008288:	d115      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828e:	3308      	adds	r3, #8
 8008290:	2100      	movs	r1, #0
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fbf6 	bl	8009a84 <RCCEx_PLL2_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800829e:	e015      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	3328      	adds	r3, #40	@ 0x28
 80082a6:	2102      	movs	r1, #2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fc9d 	bl	8009be8 <RCCEx_PLL3_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082b4:	e00a      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082bc:	e006      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80082be:	bf00      	nop
 80082c0:	e004      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80082c2:	bf00      	nop
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80082ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082d4:	4ba0      	ldr	r3, [pc, #640]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082e4:	4a9c      	ldr	r2, [pc, #624]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082e6:	430b      	orrs	r3, r1
 80082e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ea:	e003      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f002 0308 	and.w	r3, r2, #8
 8008300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008304:	2300      	movs	r3, #0
 8008306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800830a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800830e:	460b      	mov	r3, r1
 8008310:	4313      	orrs	r3, r2
 8008312:	d01e      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008320:	d10c      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008326:	3328      	adds	r3, #40	@ 0x28
 8008328:	2102      	movs	r1, #2
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fc5c 	bl	8009be8 <RCCEx_PLL3_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800833c:	4b86      	ldr	r3, [pc, #536]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800833e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008340:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800834c:	4a82      	ldr	r2, [pc, #520]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800834e:	430b      	orrs	r3, r1
 8008350:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f002 0310 	and.w	r3, r2, #16
 800835e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008362:	2300      	movs	r3, #0
 8008364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008368:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800836c:	460b      	mov	r3, r1
 800836e:	4313      	orrs	r3, r2
 8008370:	d01e      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800837a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800837e:	d10c      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	3328      	adds	r3, #40	@ 0x28
 8008386:	2102      	movs	r1, #2
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fc2d 	bl	8009be8 <RCCEx_PLL3_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800839a:	4b6f      	ldr	r3, [pc, #444]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800839c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083aa:	4a6b      	ldr	r2, [pc, #428]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083ac:	430b      	orrs	r3, r1
 80083ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083be:	2300      	movs	r3, #0
 80083c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80083c6:	460b      	mov	r3, r1
 80083c8:	4313      	orrs	r3, r2
 80083ca:	d03e      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d8:	d022      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80083da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083de:	d81b      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80083e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e8:	d00b      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80083ea:	e015      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	3308      	adds	r3, #8
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fb45 	bl	8009a84 <RCCEx_PLL2_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008400:	e00f      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008406:	3328      	adds	r3, #40	@ 0x28
 8008408:	2102      	movs	r1, #2
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fbec 	bl	8009be8 <RCCEx_PLL3_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800841e:	e000      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800842a:	4b4b      	ldr	r3, [pc, #300]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800843a:	4a47      	ldr	r2, [pc, #284]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800843c:	430b      	orrs	r3, r1
 800843e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008440:	e003      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008456:	673b      	str	r3, [r7, #112]	@ 0x70
 8008458:	2300      	movs	r3, #0
 800845a:	677b      	str	r3, [r7, #116]	@ 0x74
 800845c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008460:	460b      	mov	r3, r1
 8008462:	4313      	orrs	r3, r2
 8008464:	d03b      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800846e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008472:	d01f      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008478:	d818      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800847a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800847e:	d003      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008484:	d007      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008486:	e011      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4b33      	ldr	r3, [pc, #204]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a32      	ldr	r2, [pc, #200]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008494:	e00f      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849a:	3328      	adds	r3, #40	@ 0x28
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 fba2 	bl	8009be8 <RCCEx_PLL3_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80084aa:	e004      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80084b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10b      	bne.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084be:	4b26      	ldr	r3, [pc, #152]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ce:	4a22      	ldr	r2, [pc, #136]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084d0:	430b      	orrs	r3, r1
 80084d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80084d4:	e003      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80084ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ec:	2300      	movs	r3, #0
 80084ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80084f4:	460b      	mov	r3, r1
 80084f6:	4313      	orrs	r3, r2
 80084f8:	d034      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80084fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008508:	d007      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800850a:	e011      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850c:	4b12      	ldr	r3, [pc, #72]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	4a11      	ldr	r2, [pc, #68]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008518:	e00e      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	3308      	adds	r3, #8
 8008520:	2102      	movs	r1, #2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 faae 	bl	8009a84 <RCCEx_PLL2_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800852e:	e003      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008540:	4b05      	ldr	r3, [pc, #20]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008544:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854e:	4a02      	ldr	r2, [pc, #8]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008550:	430b      	orrs	r3, r1
 8008552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008554:	e006      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008556:	bf00      	nop
 8008558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008570:	663b      	str	r3, [r7, #96]	@ 0x60
 8008572:	2300      	movs	r3, #0
 8008574:	667b      	str	r3, [r7, #100]	@ 0x64
 8008576:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800857a:	460b      	mov	r3, r1
 800857c:	4313      	orrs	r3, r2
 800857e:	d00c      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008584:	3328      	adds	r3, #40	@ 0x28
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fb2d 	bl	8009be8 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085a8:	2300      	movs	r3, #0
 80085aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80085b0:	460b      	mov	r3, r1
 80085b2:	4313      	orrs	r3, r2
 80085b4:	d036      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085c0:	d018      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80085c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085c6:	d811      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085cc:	d014      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80085ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085d2:	d80b      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d011      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085dc:	d106      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085de:	4bb7      	ldr	r3, [pc, #732]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	4ab6      	ldr	r2, [pc, #728]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80085ea:	e008      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085f2:	e004      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085f4:	bf00      	nop
 80085f6:	e002      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085f8:	bf00      	nop
 80085fa:	e000      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80085fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008606:	4bad      	ldr	r3, [pc, #692]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800860e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008614:	4aa9      	ldr	r2, [pc, #676]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008616:	430b      	orrs	r3, r1
 8008618:	6553      	str	r3, [r2, #84]	@ 0x54
 800861a:	e003      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008630:	653b      	str	r3, [r7, #80]	@ 0x50
 8008632:	2300      	movs	r3, #0
 8008634:	657b      	str	r3, [r7, #84]	@ 0x54
 8008636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800863a:	460b      	mov	r3, r1
 800863c:	4313      	orrs	r3, r2
 800863e:	d009      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008640:	4b9e      	ldr	r3, [pc, #632]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008644:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800864c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864e:	4a9b      	ldr	r2, [pc, #620]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008650:	430b      	orrs	r3, r1
 8008652:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008662:	2300      	movs	r3, #0
 8008664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008666:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800866a:	460b      	mov	r3, r1
 800866c:	4313      	orrs	r3, r2
 800866e:	d009      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008670:	4b92      	ldr	r3, [pc, #584]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008674:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800867c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800867e:	4a8f      	ldr	r2, [pc, #572]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008680:	430b      	orrs	r3, r1
 8008682:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008690:	643b      	str	r3, [r7, #64]	@ 0x40
 8008692:	2300      	movs	r3, #0
 8008694:	647b      	str	r3, [r7, #68]	@ 0x44
 8008696:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d00e      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086a0:	4b86      	ldr	r3, [pc, #536]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	4a85      	ldr	r2, [pc, #532]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086aa:	6113      	str	r3, [r2, #16]
 80086ac:	4b83      	ldr	r3, [pc, #524]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086ae:	6919      	ldr	r1, [r3, #16]
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086b8:	4a80      	ldr	r2, [pc, #512]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086ba:	430b      	orrs	r3, r1
 80086bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80086ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086cc:	2300      	movs	r3, #0
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80086d4:	460b      	mov	r3, r1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	d009      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80086da:	4b78      	ldr	r3, [pc, #480]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e8:	4a74      	ldr	r2, [pc, #464]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086ea:	430b      	orrs	r3, r1
 80086ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80086fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80086fc:	2300      	movs	r3, #0
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008700:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d00a      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800870a:	4b6c      	ldr	r3, [pc, #432]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871a:	4a68      	ldr	r2, [pc, #416]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800871c:	430b      	orrs	r3, r1
 800871e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	2100      	movs	r1, #0
 800872a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008732:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008736:	460b      	mov	r3, r1
 8008738:	4313      	orrs	r3, r2
 800873a:	d011      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008740:	3308      	adds	r3, #8
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f99d 	bl	8009a84 <RCCEx_PLL2_Config>
 800874a:	4603      	mov	r3, r0
 800874c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800875c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	2100      	movs	r1, #0
 800876a:	6239      	str	r1, [r7, #32]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
 8008772:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d011      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	3308      	adds	r3, #8
 8008782:	2101      	movs	r1, #1
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f97d 	bl	8009a84 <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800879c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	2100      	movs	r1, #0
 80087aa:	61b9      	str	r1, [r7, #24]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087b6:	460b      	mov	r3, r1
 80087b8:	4313      	orrs	r3, r2
 80087ba:	d011      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	3308      	adds	r3, #8
 80087c2:	2102      	movs	r1, #2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f95d 	bl	8009a84 <RCCEx_PLL2_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80087d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80087e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	2100      	movs	r1, #0
 80087ea:	6139      	str	r1, [r7, #16]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087f6:	460b      	mov	r3, r1
 80087f8:	4313      	orrs	r3, r2
 80087fa:	d011      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	3328      	adds	r3, #40	@ 0x28
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f9ef 	bl	8009be8 <RCCEx_PLL3_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800881c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	2100      	movs	r1, #0
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d011      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800883c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008840:	3328      	adds	r3, #40	@ 0x28
 8008842:	2101      	movs	r1, #1
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f9cf 	bl	8009be8 <RCCEx_PLL3_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800885c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	2100      	movs	r1, #0
 800886a:	6039      	str	r1, [r7, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d011      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008880:	3328      	adds	r3, #40	@ 0x28
 8008882:	2102      	movs	r1, #2
 8008884:	4618      	mov	r0, r3
 8008886:	f001 f9af 	bl	8009be8 <RCCEx_PLL3_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800889c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80088a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80088b4:	46bd      	mov	sp, r7
 80088b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ba:	bf00      	nop
 80088bc:	58024400 	.word	0x58024400

080088c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b090      	sub	sp, #64	@ 0x40
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80088d2:	430b      	orrs	r3, r1
 80088d4:	f040 8094 	bne.w	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80088d8:	4b9b      	ldr	r3, [pc, #620]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	f200 8087 	bhi.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80088ea:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008905 	.word	0x08008905
 80088f4:	0800892d 	.word	0x0800892d
 80088f8:	08008955 	.word	0x08008955
 80088fc:	080089f1 	.word	0x080089f1
 8008900:	0800897d 	.word	0x0800897d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008904:	4b90      	ldr	r3, [pc, #576]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800890c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008910:	d108      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008916:	4618      	mov	r0, r3
 8008918:	f000 ff62 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008920:	f000 bc93 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	f000 bc8f 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800892c:	4b86      	ldr	r3, [pc, #536]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008938:	d108      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893a:	f107 0318 	add.w	r3, r7, #24
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fca6 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008948:	f000 bc7f 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008950:	f000 bc7b 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008954:	4b7c      	ldr	r3, [pc, #496]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800895c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008960:	d108      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008962:	f107 030c 	add.w	r3, r7, #12
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fde6 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008970:	f000 bc6b 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	f000 bc67 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800897c:	4b72      	ldr	r3, [pc, #456]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800897e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008980:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008986:	4b70      	ldr	r3, [pc, #448]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b04      	cmp	r3, #4
 8008990:	d10c      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008998:	4b6b      	ldr	r3, [pc, #428]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	08db      	lsrs	r3, r3, #3
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	4a6a      	ldr	r2, [pc, #424]	@ (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089aa:	e01f      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ac:	4b66      	ldr	r3, [pc, #408]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d106      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80089ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c0:	d102      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089c2:	4b63      	ldr	r3, [pc, #396]	@ (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c6:	e011      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d4:	d106      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80089d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089dc:	d102      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089de:	4b5d      	ldr	r3, [pc, #372]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e2:	e003      	b.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089e8:	f000 bc2f 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089ec:	f000 bc2d 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089f0:	4b59      	ldr	r3, [pc, #356]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f4:	f000 bc29 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fc:	f000 bc25 	b.w	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a04:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	f040 80a7 	bne.w	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a12:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a1e:	d054      	beq.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a26:	f200 808b 	bhi.w	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a30:	f000 8083 	beq.w	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a3a:	f200 8081 	bhi.w	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a44:	d02f      	beq.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a4c:	d878      	bhi.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a5a:	d012      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008a5c:	e070      	b.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 feb5 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	e3e6      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a80:	e3e3      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a82:	4b31      	ldr	r3, [pc, #196]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a90:	f107 0318 	add.w	r3, r7, #24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fbfb 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9e:	e3d4      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa4:	e3d1      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa6:	4b28      	ldr	r3, [pc, #160]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ab2:	d107      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab4:	f107 030c 	add.w	r3, r7, #12
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fd3d 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac2:	e3c2      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac8:	e3bf      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aca:	4b1f      	ldr	r3, [pc, #124]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d10c      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae6:	4b18      	ldr	r3, [pc, #96]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	08db      	lsrs	r3, r3, #3
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	4a16      	ldr	r2, [pc, #88]	@ (8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008af2:	fa22 f303 	lsr.w	r3, r2, r3
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af8:	e01e      	b.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008afa:	4b13      	ldr	r3, [pc, #76]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b06:	d106      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b0e:	d102      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b10:	4b0f      	ldr	r3, [pc, #60]	@ (8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b14:	e010      	b.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b16:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b22:	d106      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2a:	d102      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b30:	e002      	b.n	8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b36:	e388      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b38:	e387      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b3a:	4b07      	ldr	r3, [pc, #28]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3e:	e384      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e381      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b46:	bf00      	nop
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	03d09000 	.word	0x03d09000
 8008b50:	003d0900 	.word	0x003d0900
 8008b54:	017d7840 	.word	0x017d7840
 8008b58:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b60:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008b64:	430b      	orrs	r3, r1
 8008b66:	f040 809c 	bne.w	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b7a:	d054      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b82:	f200 808b 	bhi.w	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b8c:	f000 8083 	beq.w	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b96:	f200 8081 	bhi.w	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ba0:	d02f      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ba8:	d878      	bhi.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bb6:	d012      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008bb8:	e070      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bba:	4b8a      	ldr	r3, [pc, #552]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fe07 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd6:	e338      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bdc:	e335      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bde:	4b81      	ldr	r3, [pc, #516]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bea:	d107      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bec:	f107 0318 	add.w	r3, r7, #24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fb4d 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfa:	e326      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c00:	e323      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c02:	4b78      	ldr	r3, [pc, #480]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c0e:	d107      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fc8f 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c1e:	e314      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c24:	e311      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c26:	4b6f      	ldr	r3, [pc, #444]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c30:	4b6c      	ldr	r3, [pc, #432]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d10c      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c42:	4b68      	ldr	r3, [pc, #416]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	4a66      	ldr	r2, [pc, #408]	@ (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c54:	e01e      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c56:	4b63      	ldr	r3, [pc, #396]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c70:	e010      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c72:	4b5c      	ldr	r3, [pc, #368]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c7e:	d106      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c86:	d102      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c88:	4b59      	ldr	r3, [pc, #356]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c8c:	e002      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c92:	e2da      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c94:	e2d9      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c96:	4b57      	ldr	r3, [pc, #348]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9a:	e2d6      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca0:	e2d3      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008caa:	430b      	orrs	r3, r1
 8008cac:	f040 80a7 	bne.w	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008cb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc0:	d055      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc8:	f200 8096 	bhi.w	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cd2:	f000 8084 	beq.w	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cdc:	f200 808c 	bhi.w	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce6:	d030      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cee:	f200 8083 	bhi.w	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cfe:	d012      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008d00:	e07a      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d02:	4b38      	ldr	r3, [pc, #224]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fd63 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1e:	e294      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d24:	e291      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d26:	4b2f      	ldr	r3, [pc, #188]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d32:	d107      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d34:	f107 0318 	add.w	r3, r7, #24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 faa9 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d42:	e282      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d48:	e27f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d4a:	4b26      	ldr	r3, [pc, #152]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d56:	d107      	bne.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d58:	f107 030c 	add.w	r3, r7, #12
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fbeb 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d66:	e270      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d6c:	e26d      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d78:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d10c      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d109      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8a:	4b16      	ldr	r3, [pc, #88]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	08db      	lsrs	r3, r3, #3
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	4a14      	ldr	r2, [pc, #80]	@ (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d96:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d9c:	e01e      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d9e:	4b11      	ldr	r3, [pc, #68]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008daa:	d106      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db2:	d102      	bne.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008db4:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db8:	e010      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dba:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dd0:	4b07      	ldr	r3, [pc, #28]	@ (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd4:	e002      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008dda:	e236      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ddc:	e235      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dde:	4b05      	ldr	r3, [pc, #20]	@ (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de2:	e232      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	003d0900 	.word	0x003d0900
 8008df0:	017d7840 	.word	0x017d7840
 8008df4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfc:	e225      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e02:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008e06:	430b      	orrs	r3, r1
 8008e08:	f040 8085 	bne.w	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008e0c:	4b9c      	ldr	r3, [pc, #624]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e10:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e1c:	d06b      	beq.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e24:	d874      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e2c:	d056      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e34:	d86c      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e3c:	d03b      	beq.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e44:	d864      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e4c:	d021      	beq.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e54:	d85c      	bhi.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e62:	d004      	beq.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008e64:	e054      	b.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e66:	f7fe fb5f 	bl	8007528 <HAL_RCC_GetPCLK1Freq>
 8008e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e6c:	e1ed      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e6e:	4b84      	ldr	r3, [pc, #528]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e7c:	f107 0318 	add.w	r3, r7, #24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fa05 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e8a:	e1de      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	e1db      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e92:	4b7b      	ldr	r3, [pc, #492]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e9e:	d107      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ea0:	f107 030c 	add.w	r3, r7, #12
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fb47 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eae:	e1cc      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb4:	e1c9      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008eb6:	4b72      	ldr	r3, [pc, #456]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d109      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	08db      	lsrs	r3, r3, #3
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008ece:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed4:	e1b9      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eda:	e1b6      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008edc:	4b68      	ldr	r3, [pc, #416]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee8:	d102      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008eea:	4b67      	ldr	r3, [pc, #412]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eee:	e1ac      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef4:	e1a9      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ef6:	4b62      	ldr	r3, [pc, #392]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f02:	d102      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008f04:	4b61      	ldr	r3, [pc, #388]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	e19f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e19c      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e199      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	d173      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f22:	4b57      	ldr	r3, [pc, #348]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f32:	d02f      	beq.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3a:	d863      	bhi.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f48:	d012      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008f4a:	e05b      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f58:	d107      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5a:	f107 0318 	add.w	r3, r7, #24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 f996 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f68:	e16f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6e:	e16c      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f70:	4b43      	ldr	r3, [pc, #268]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fad8 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8c:	e15d      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f92:	e15a      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f94:	4b3a      	ldr	r3, [pc, #232]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9e:	4b38      	ldr	r3, [pc, #224]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d10c      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fb0:	4b33      	ldr	r3, [pc, #204]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	08db      	lsrs	r3, r3, #3
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	4a32      	ldr	r2, [pc, #200]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc2:	e01e      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd0:	d106      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd8:	d102      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fda:	4b2b      	ldr	r3, [pc, #172]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fde:	e010      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fe0:	4b27      	ldr	r3, [pc, #156]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fec:	d106      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff4:	d102      	bne.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ff6:	4b25      	ldr	r3, [pc, #148]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ffa:	e002      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009000:	e123      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009002:	e122      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009008:	e11f      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800900a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009012:	430b      	orrs	r3, r1
 8009014:	d13c      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009016:	4b1a      	ldr	r3, [pc, #104]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800901e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902c:	d012      	beq.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800902e:	e023      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009030:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800903c:	d107      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800903e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fbcc 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904c:	e0fd      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009052:	e0fa      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009054:	4b0a      	ldr	r3, [pc, #40]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009060:	d107      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0318 	add.w	r3, r7, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f912 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009070:	e0eb      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009076:	e0e8      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	e0e5      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800907e:	bf00      	nop
 8009080:	58024400 	.word	0x58024400
 8009084:	03d09000 	.word	0x03d09000
 8009088:	003d0900 	.word	0x003d0900
 800908c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009094:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009098:	430b      	orrs	r3, r1
 800909a:	f040 8085 	bne.w	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800909e:	4b6d      	ldr	r3, [pc, #436]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090ae:	d06b      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090b6:	d874      	bhi.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090be:	d056      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c6:	d86c      	bhi.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090ce:	d03b      	beq.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090d6:	d864      	bhi.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090de:	d021      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e6:	d85c      	bhi.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090f4:	d004      	beq.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80090f6:	e054      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090f8:	f000 f8b4 	bl	8009264 <HAL_RCCEx_GetD3PCLK1Freq>
 80090fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090fe:	e0a4      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009100:	4b54      	ldr	r3, [pc, #336]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009108:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800910c:	d107      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800910e:	f107 0318 	add.w	r3, r7, #24
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f8bc 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911c:	e095      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009122:	e092      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009124:	4b4b      	ldr	r3, [pc, #300]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800912c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009130:	d107      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009132:	f107 030c 	add.w	r3, r7, #12
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f9fe 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009140:	e083      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009146:	e080      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009148:	4b42      	ldr	r3, [pc, #264]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b04      	cmp	r3, #4
 8009152:	d109      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009154:	4b3f      	ldr	r3, [pc, #252]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	08db      	lsrs	r3, r3, #3
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	4a3e      	ldr	r2, [pc, #248]	@ (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
 8009164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009166:	e070      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916c:	e06d      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800916e:	4b39      	ldr	r3, [pc, #228]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800917a:	d102      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800917c:	4b37      	ldr	r3, [pc, #220]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009180:	e063      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009186:	e060      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009188:	4b32      	ldr	r3, [pc, #200]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009194:	d102      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009196:	4b32      	ldr	r3, [pc, #200]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919a:	e056      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a0:	e053      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a6:	e050      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80091a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80091b0:	430b      	orrs	r3, r1
 80091b2:	d148      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091b4:	4b27      	ldr	r3, [pc, #156]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c4:	d02a      	beq.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091cc:	d838      	bhi.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091da:	d00d      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80091dc:	e030      	b.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091de:	4b1d      	ldr	r3, [pc, #116]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ea:	d102      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80091ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f0:	e02b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f6:	e028      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091f8:	4b16      	ldr	r3, [pc, #88]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009204:	d107      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fae8 	bl	80097e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009214:	e019      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800921a:	e016      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800921c:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009228:	d107      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800922a:	f107 0318 	add.w	r3, r7, #24
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f82e 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009238:	e007      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923e:	e004      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009244:	e001      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800924a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800924c:	4618      	mov	r0, r3
 800924e:	3740      	adds	r7, #64	@ 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	003d0900 	.word	0x003d0900
 8009260:	017d7840 	.word	0x017d7840

08009264 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009268:	f7fe f92e 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 800926c:	4602      	mov	r2, r0
 800926e:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	4904      	ldr	r1, [pc, #16]	@ (800928c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800927a:	5ccb      	ldrb	r3, [r1, r3]
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009284:	4618      	mov	r0, r3
 8009286:	bd80      	pop	{r7, pc}
 8009288:	58024400 	.word	0x58024400
 800928c:	0800f87c 	.word	0x0800f87c

08009290 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009290:	b480      	push	{r7}
 8009292:	b089      	sub	sp, #36	@ 0x24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009298:	4ba1      	ldr	r3, [pc, #644]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092a2:	4b9f      	ldr	r3, [pc, #636]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a6:	0b1b      	lsrs	r3, r3, #12
 80092a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092ae:	4b9c      	ldr	r3, [pc, #624]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	091b      	lsrs	r3, r3, #4
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092ba:	4b99      	ldr	r3, [pc, #612]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8111 	beq.w	8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f000 8083 	beq.w	80093ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f200 80a1 	bhi.w	8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d056      	beq.n	80093a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092fa:	e099      	b.n	8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092fc:	4b88      	ldr	r3, [pc, #544]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02d      	beq.n	8009364 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009308:	4b85      	ldr	r3, [pc, #532]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	08db      	lsrs	r3, r3, #3
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	4a84      	ldr	r2, [pc, #528]	@ (8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
 8009318:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009332:	4b7b      	ldr	r3, [pc, #492]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009342:	ed97 6a03 	vldr	s12, [r7, #12]
 8009346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800934a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009362:	e087      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800952c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009376:	4b6a      	ldr	r3, [pc, #424]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009386:	ed97 6a03 	vldr	s12, [r7, #12]
 800938a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800938e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800939a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093a6:	e065      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ba:	4b59      	ldr	r3, [pc, #356]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ea:	e043      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fe:	4b48      	ldr	r3, [pc, #288]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942e:	e021      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800943e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009442:	4b37      	ldr	r3, [pc, #220]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009452:	ed97 6a03 	vldr	s12, [r7, #12]
 8009456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800945a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009472:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009474:	4b2a      	ldr	r3, [pc, #168]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	0a5b      	lsrs	r3, r3, #9
 800947a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800948a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949a:	ee17 2a90 	vmov	r2, s15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c8:	ee17 2a90 	vmov	r2, s15
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094d0:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f6:	ee17 2a90 	vmov	r2, s15
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094fe:	e008      	b.n	8009512 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	609a      	str	r2, [r3, #8]
}
 8009512:	bf00      	nop
 8009514:	3724      	adds	r7, #36	@ 0x24
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	58024400 	.word	0x58024400
 8009524:	03d09000 	.word	0x03d09000
 8009528:	46000000 	.word	0x46000000
 800952c:	4c742400 	.word	0x4c742400
 8009530:	4a742400 	.word	0x4a742400
 8009534:	4bbebc20 	.word	0x4bbebc20

08009538 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009538:	b480      	push	{r7}
 800953a:	b089      	sub	sp, #36	@ 0x24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009540:	4ba1      	ldr	r3, [pc, #644]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800954a:	4b9f      	ldr	r3, [pc, #636]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954e:	0d1b      	lsrs	r3, r3, #20
 8009550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009554:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009556:	4b9c      	ldr	r3, [pc, #624]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009562:	4b99      	ldr	r3, [pc, #612]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	fb02 f303 	mul.w	r3, r2, r3
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8111 	beq.w	80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f000 8083 	beq.w	8009694 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b02      	cmp	r3, #2
 8009592:	f200 80a1 	bhi.w	80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d056      	beq.n	8009650 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095a2:	e099      	b.n	80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a4:	4b88      	ldr	r3, [pc, #544]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d02d      	beq.n	800960c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095b0:	4b85      	ldr	r3, [pc, #532]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	08db      	lsrs	r3, r3, #3
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	4a84      	ldr	r2, [pc, #528]	@ (80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095bc:	fa22 f303 	lsr.w	r3, r2, r3
 80095c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095da:	4b7b      	ldr	r3, [pc, #492]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800960a:	e087      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800961a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961e:	4b6a      	ldr	r3, [pc, #424]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009632:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800964e:	e065      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	4b59      	ldr	r3, [pc, #356]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009672:	ed97 6a03 	vldr	s12, [r7, #12]
 8009676:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800967a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009692:	e043      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b48      	ldr	r3, [pc, #288]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096d6:	e021      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b37      	ldr	r3, [pc, #220]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800971a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800971c:	4b2a      	ldr	r3, [pc, #168]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	0a5b      	lsrs	r3, r3, #9
 8009722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009736:	edd7 6a07 	vldr	s13, [r7, #28]
 800973a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009742:	ee17 2a90 	vmov	r2, s15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800974a:	4b1f      	ldr	r3, [pc, #124]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009764:	edd7 6a07 	vldr	s13, [r7, #28]
 8009768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009770:	ee17 2a90 	vmov	r2, s15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009778:	4b13      	ldr	r3, [pc, #76]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800977a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977c:	0e1b      	lsrs	r3, r3, #24
 800977e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800978e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009792:	edd7 6a07 	vldr	s13, [r7, #28]
 8009796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979e:	ee17 2a90 	vmov	r2, s15
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097a6:	e008      	b.n	80097ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	609a      	str	r2, [r3, #8]
}
 80097ba:	bf00      	nop
 80097bc:	3724      	adds	r7, #36	@ 0x24
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	58024400 	.word	0x58024400
 80097cc:	03d09000 	.word	0x03d09000
 80097d0:	46000000 	.word	0x46000000
 80097d4:	4c742400 	.word	0x4c742400
 80097d8:	4a742400 	.word	0x4a742400
 80097dc:	4bbebc20 	.word	0x4bbebc20

080097e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b089      	sub	sp, #36	@ 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097e8:	4ba0      	ldr	r3, [pc, #640]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097f2:	4b9e      	ldr	r3, [pc, #632]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097fe:	4b9b      	ldr	r3, [pc, #620]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009808:	4b98      	ldr	r3, [pc, #608]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800980a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980c:	08db      	lsrs	r3, r3, #3
 800980e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	fb02 f303 	mul.w	r3, r2, r3
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009820:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 8111 	beq.w	8009a4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b02      	cmp	r3, #2
 8009830:	f000 8083 	beq.w	800993a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b02      	cmp	r3, #2
 8009838:	f200 80a1 	bhi.w	800997e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d056      	beq.n	80098f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009848:	e099      	b.n	800997e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800984a:	4b88      	ldr	r3, [pc, #544]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d02d      	beq.n	80098b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009856:	4b85      	ldr	r3, [pc, #532]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	08db      	lsrs	r3, r3, #3
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	4a83      	ldr	r2, [pc, #524]	@ (8009a70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009862:	fa22 f303 	lsr.w	r3, r2, r3
 8009866:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	ee07 3a90 	vmov	s15, r3
 8009878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009880:	4b7a      	ldr	r3, [pc, #488]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009888:	ee07 3a90 	vmov	s15, r3
 800988c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009890:	ed97 6a03 	vldr	s12, [r7, #12]
 8009894:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800989c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098b0:	e087      	b.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	ee07 3a90 	vmov	s15, r3
 80098b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098bc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009a78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c4:	4b69      	ldr	r3, [pc, #420]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098f4:	e065      	b.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	ee07 3a90 	vmov	s15, r3
 80098fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009900:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009a7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009908:	4b58      	ldr	r3, [pc, #352]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800990a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009918:	ed97 6a03 	vldr	s12, [r7, #12]
 800991c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800992c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009938:	e043      	b.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009944:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994c:	4b47      	ldr	r3, [pc, #284]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800994e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009954:	ee07 3a90 	vmov	s15, r3
 8009958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009960:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800997c:	e021      	b.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009988:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800998c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009990:	4b36      	ldr	r3, [pc, #216]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009a74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80099c2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c6:	0a5b      	lsrs	r3, r3, #9
 80099c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e8:	ee17 2a90 	vmov	r2, s15
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099f0:	4b1e      	ldr	r3, [pc, #120]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f4:	0c1b      	lsrs	r3, r3, #16
 80099f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a16:	ee17 2a90 	vmov	r2, s15
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009a1e:	4b13      	ldr	r3, [pc, #76]	@ (8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a22:	0e1b      	lsrs	r3, r3, #24
 8009a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a44:	ee17 2a90 	vmov	r2, s15
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a4c:	e008      	b.n	8009a60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	609a      	str	r2, [r3, #8]
}
 8009a60:	bf00      	nop
 8009a62:	3724      	adds	r7, #36	@ 0x24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	03d09000 	.word	0x03d09000
 8009a74:	46000000 	.word	0x46000000
 8009a78:	4c742400 	.word	0x4c742400
 8009a7c:	4a742400 	.word	0x4a742400
 8009a80:	4bbebc20 	.word	0x4bbebc20

08009a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a92:	4b53      	ldr	r3, [pc, #332]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d101      	bne.n	8009aa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e099      	b.n	8009bd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009aa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aae:	f7f7 ff09 	bl	80018c4 <HAL_GetTick>
 8009ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ab4:	e008      	b.n	8009ac8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ab6:	f7f7 ff05 	bl	80018c4 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e086      	b.n	8009bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ac8:	4b45      	ldr	r3, [pc, #276]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f0      	bne.n	8009ab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ad4:	4b42      	ldr	r3, [pc, #264]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	031b      	lsls	r3, r3, #12
 8009ae2:	493f      	ldr	r1, [pc, #252]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	025b      	lsls	r3, r3, #9
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	431a      	orrs	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	041b      	lsls	r3, r3, #16
 8009b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	061b      	lsls	r3, r3, #24
 8009b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b18:	4931      	ldr	r1, [pc, #196]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b1e:	4b30      	ldr	r3, [pc, #192]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	492d      	ldr	r1, [pc, #180]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b30:	4b2b      	ldr	r3, [pc, #172]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	f023 0220 	bic.w	r2, r3, #32
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	4928      	ldr	r1, [pc, #160]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b42:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	4a26      	ldr	r2, [pc, #152]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f023 0310 	bic.w	r3, r3, #16
 8009b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b4e:	4b24      	ldr	r3, [pc, #144]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b52:	4b24      	ldr	r3, [pc, #144]	@ (8009be4 <RCCEx_PLL2_Config+0x160>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	69d2      	ldr	r2, [r2, #28]
 8009b5a:	00d2      	lsls	r2, r2, #3
 8009b5c:	4920      	ldr	r1, [pc, #128]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b62:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b66:	4a1e      	ldr	r2, [pc, #120]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b68:	f043 0310 	orr.w	r3, r3, #16
 8009b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b74:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	4a19      	ldr	r2, [pc, #100]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b80:	e00f      	b.n	8009ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d106      	bne.n	8009b96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b88:	4b15      	ldr	r3, [pc, #84]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	4a14      	ldr	r2, [pc, #80]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b94:	e005      	b.n	8009ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b96:	4b12      	ldr	r3, [pc, #72]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	4a11      	ldr	r2, [pc, #68]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009ba8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bae:	f7f7 fe89 	bl	80018c4 <HAL_GetTick>
 8009bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bb4:	e008      	b.n	8009bc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bb6:	f7f7 fe85 	bl	80018c4 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d901      	bls.n	8009bc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e006      	b.n	8009bd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bc8:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <RCCEx_PLL2_Config+0x15c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0f0      	beq.n	8009bb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
 8009be4:	ffff0007 	.word	0xffff0007

08009be8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bf6:	4b53      	ldr	r3, [pc, #332]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d101      	bne.n	8009c06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e099      	b.n	8009d3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c06:	4b4f      	ldr	r3, [pc, #316]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c12:	f7f7 fe57 	bl	80018c4 <HAL_GetTick>
 8009c16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c18:	e008      	b.n	8009c2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c1a:	f7f7 fe53 	bl	80018c4 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e086      	b.n	8009d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c2c:	4b45      	ldr	r3, [pc, #276]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f0      	bne.n	8009c1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c38:	4b42      	ldr	r3, [pc, #264]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	493f      	ldr	r1, [pc, #252]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	025b      	lsls	r3, r3, #9
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	061b      	lsls	r3, r3, #24
 8009c78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c7c:	4931      	ldr	r1, [pc, #196]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c82:	4b30      	ldr	r3, [pc, #192]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	492d      	ldr	r1, [pc, #180]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c94:	4b2b      	ldr	r3, [pc, #172]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	4928      	ldr	r1, [pc, #160]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ca6:	4b27      	ldr	r3, [pc, #156]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009caa:	4a26      	ldr	r2, [pc, #152]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009cb2:	4b24      	ldr	r3, [pc, #144]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cb6:	4b24      	ldr	r3, [pc, #144]	@ (8009d48 <RCCEx_PLL3_Config+0x160>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	69d2      	ldr	r2, [r2, #28]
 8009cbe:	00d2      	lsls	r2, r2, #3
 8009cc0:	4920      	ldr	r1, [pc, #128]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cca:	4a1e      	ldr	r2, [pc, #120]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d106      	bne.n	8009ce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cdc:	4a19      	ldr	r2, [pc, #100]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ce4:	e00f      	b.n	8009d06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d106      	bne.n	8009cfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cec:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4a14      	ldr	r2, [pc, #80]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cf2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cf8:	e005      	b.n	8009d06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cfa:	4b12      	ldr	r3, [pc, #72]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfe:	4a11      	ldr	r2, [pc, #68]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009d00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d06:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d12:	f7f7 fdd7 	bl	80018c4 <HAL_GetTick>
 8009d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d18:	e008      	b.n	8009d2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d1a:	f7f7 fdd3 	bl	80018c4 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e006      	b.n	8009d3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d2c:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0f0      	beq.n	8009d1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	58024400 	.word	0x58024400
 8009d48:	ffff0007 	.word	0xffff0007

08009d4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d071      	beq.n	8009e42 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f7 f9a4 	bl	80010c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	2b10      	cmp	r3, #16
 8009d8c:	d050      	beq.n	8009e30 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	22ca      	movs	r2, #202	@ 0xca
 8009d94:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2253      	movs	r2, #83	@ 0x53
 8009d9c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9a0 	bl	800a0e4 <RTC_EnterInitMode>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d124      	bne.n	8009df8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6899      	ldr	r1, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	4b24      	ldr	r3, [pc, #144]	@ (8009e4c <HAL_RTC_Init+0x100>)
 8009dba:	400b      	ands	r3, r1
 8009dbc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6899      	ldr	r1, [r3, #8]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	0419      	lsls	r1, r3, #16
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68da      	ldr	r2, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f9ac 	bl	800a14c <RTC_ExitInitMode>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d113      	bne.n	8009e26 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0203 	bic.w	r2, r2, #3
 8009e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	22ff      	movs	r2, #255	@ 0xff
 8009e2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e2e:	e001      	b.n	8009e34 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	ff8fffbf 	.word	0xff8fffbf

08009e50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e50:	b590      	push	{r4, r7, lr}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_RTC_SetTime+0x1a>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e089      	b.n	8009f7e <HAL_RTC_SetTime+0x12e>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	22ca      	movs	r2, #202	@ 0xca
 8009e80:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2253      	movs	r2, #83	@ 0x53
 8009e88:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f92a 	bl	800a0e4 <RTC_EnterInitMode>
 8009e90:	4603      	mov	r3, r0
 8009e92:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009e94:	7cfb      	ldrb	r3, [r7, #19]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d161      	bne.n	8009f5e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d126      	bne.n	8009eee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f985 	bl	800a1c8 <RTC_ByteToBcd2>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f97e 	bl	800a1c8 <RTC_ByteToBcd2>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ed0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	789b      	ldrb	r3, [r3, #2]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f976 	bl	800a1c8 <RTC_ByteToBcd2>
 8009edc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ede:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	78db      	ldrb	r3, [r3, #3]
 8009ee6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e018      	b.n	8009f20 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2200      	movs	r2, #0
 8009f00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009f14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	78db      	ldrb	r3, [r3, #3]
 8009f1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6979      	ldr	r1, [r7, #20]
 8009f26:	4b18      	ldr	r3, [pc, #96]	@ (8009f88 <HAL_RTC_SetTime+0x138>)
 8009f28:	400b      	ands	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009f3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6899      	ldr	r1, [r3, #8]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 f8f9 	bl	800a14c <RTC_ExitInitMode>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	22ff      	movs	r2, #255	@ 0xff
 8009f64:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009f66:	7cfb      	ldrb	r3, [r7, #19]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d103      	bne.n	8009f74 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009f7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd90      	pop	{r4, r7, pc}
 8009f86:	bf00      	nop
 8009f88:	007f7f7f 	.word	0x007f7f7f

08009f8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f8c:	b590      	push	{r4, r7, lr}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <HAL_RTC_SetDate+0x1a>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e073      	b.n	800a08e <HAL_RTC_SetDate+0x102>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10e      	bne.n	8009fda <HAL_RTC_SetDate+0x4e>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	785b      	ldrb	r3, [r3, #1]
 8009fc0:	f003 0310 	and.w	r3, r3, #16
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	f023 0310 	bic.w	r3, r3, #16
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	330a      	adds	r3, #10
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11c      	bne.n	800a01a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	78db      	ldrb	r3, [r3, #3]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f8ef 	bl	800a1c8 <RTC_ByteToBcd2>
 8009fea:	4603      	mov	r3, r0
 8009fec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	785b      	ldrb	r3, [r3, #1]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f8e8 	bl	800a1c8 <RTC_ByteToBcd2>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ffc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	789b      	ldrb	r3, [r3, #2]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f8e0 	bl	800a1c8 <RTC_ByteToBcd2>
 800a008:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a00a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a014:	4313      	orrs	r3, r2
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	e00e      	b.n	800a038 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	78db      	ldrb	r3, [r3, #3]
 800a01e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a026:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a02c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	22ca      	movs	r2, #202	@ 0xca
 800a03e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2253      	movs	r2, #83	@ 0x53
 800a046:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f84b 	bl	800a0e4 <RTC_EnterInitMode>
 800a04e:	4603      	mov	r3, r0
 800a050:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a052:	7cfb      	ldrb	r3, [r7, #19]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	6979      	ldr	r1, [r7, #20]
 800a05e:	4b0e      	ldr	r3, [pc, #56]	@ (800a098 <HAL_RTC_SetDate+0x10c>)
 800a060:	400b      	ands	r3, r1
 800a062:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f871 	bl	800a14c <RTC_ExitInitMode>
 800a06a:	4603      	mov	r3, r0
 800a06c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	22ff      	movs	r2, #255	@ 0xff
 800a074:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a076:	7cfb      	ldrb	r3, [r7, #19]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a08c:	7cfb      	ldrb	r3, [r7, #19]


}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd90      	pop	{r4, r7, pc}
 800a096:	bf00      	nop
 800a098:	00ffff3f 	.word	0x00ffff3f

0800a09c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a0e0 <HAL_RTC_WaitForSynchro+0x44>)
 800a0aa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a0ac:	f7f7 fc0a 	bl	80018c4 <HAL_GetTick>
 800a0b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a0b2:	e009      	b.n	800a0c8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a0b4:	f7f7 fc06 	bl	80018c4 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a0c2:	d901      	bls.n	800a0c8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e007      	b.n	800a0d8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0ee      	beq.n	800a0b4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	0003ff5f 	.word	0x0003ff5f

0800a0e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d120      	bne.n	800a140 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f04f 32ff 	mov.w	r2, #4294967295
 800a106:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a108:	f7f7 fbdc 	bl	80018c4 <HAL_GetTick>
 800a10c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a10e:	e00d      	b.n	800a12c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a110:	f7f7 fbd8 	bl	80018c4 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a11e:	d905      	bls.n	800a12c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2203      	movs	r2, #3
 800a128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <RTC_EnterInitMode+0x5c>
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d1e7      	bne.n	800a110 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a158:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	4a19      	ldr	r2, [pc, #100]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a15e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a162:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a164:	4b17      	ldr	r3, [pc, #92]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10c      	bne.n	800a18a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ff93 	bl	800a09c <HAL_RTC_WaitForSynchro>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01e      	beq.n	800a1ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2203      	movs	r2, #3
 800a180:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e017      	b.n	800a1ba <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a18a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	4a0d      	ldr	r2, [pc, #52]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a190:	f023 0320 	bic.w	r3, r3, #32
 800a194:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ff80 	bl	800a09c <HAL_RTC_WaitForSynchro>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a1ae:	4b05      	ldr	r3, [pc, #20]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	4a04      	ldr	r2, [pc, #16]	@ (800a1c4 <RTC_ExitInitMode+0x78>)
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	58004000 	.word	0x58004000

0800a1c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a1da:	e005      	b.n	800a1e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	3b0a      	subs	r3, #10
 800a1e6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d8f6      	bhi.n	800a1dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	011b      	lsls	r3, r3, #4
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	b2db      	uxtb	r3, r3
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	@ 0x28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e075      	b.n	800a306 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7f6 ff79 	bl	8001124 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2204      	movs	r2, #4
 800a236:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f868 	bl	800a310 <HAL_SD_InitCard>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e05d      	b.n	800a306 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a24a:	f107 0308 	add.w	r3, r7, #8
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fdaf 	bl	800adb4 <HAL_SD_GetCardStatus>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e052      	b.n	800a306 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a260:	7e3b      	ldrb	r3, [r7, #24]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a266:	7e7b      	ldrb	r3, [r7, #25]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a270:	2b01      	cmp	r3, #1
 800a272:	d10a      	bne.n	800a28a <HAL_SD_Init+0x82>
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <HAL_SD_Init+0x78>
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a286:	659a      	str	r2, [r3, #88]	@ 0x58
 800a288:	e00b      	b.n	800a2a2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d104      	bne.n	800a29c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a298:	659a      	str	r2, [r3, #88]	@ 0x58
 800a29a:	e002      	b.n	800a2a2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fe6d 	bl	800af88 <HAL_SD_ConfigWideBusOperation>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e026      	b.n	800a306 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a2b8:	f7f7 fb04 	bl	80018c4 <HAL_GetTick>
 800a2bc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2be:	e011      	b.n	800a2e4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a2c0:	f7f7 fb00 	bl	80018c4 <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d109      	bne.n	800a2e4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2d6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e010      	b.n	800a306 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 ff61 	bl	800b1ac <HAL_SD_GetCardState>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d1e7      	bne.n	800a2c0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3728      	adds	r7, #40	@ 0x28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a310:	b590      	push	{r4, r7, lr}
 800a312:	b08d      	sub	sp, #52	@ 0x34
 800a314:	af02      	add	r7, sp, #8
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a324:	2300      	movs	r3, #0
 800a326:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a328:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a32c:	f04f 0100 	mov.w	r1, #0
 800a330:	f7fe fac6 	bl	80088c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a334:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a34a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e070      	b.n	800a432 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	4a39      	ldr	r2, [pc, #228]	@ (800a43c <HAL_SD_InitCard+0x12c>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	091b      	lsrs	r3, r3, #4
 800a35c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681c      	ldr	r4, [r3, #0]
 800a362:	466a      	mov	r2, sp
 800a364:	f107 0318 	add.w	r3, r7, #24
 800a368:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a36c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a370:	f107 030c 	add.w	r3, r7, #12
 800a374:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a376:	4620      	mov	r0, r4
 800a378:	f003 fba8 	bl	800dacc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4618      	mov	r0, r3
 800a382:	f003 fbeb 	bl	800db5c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d005      	beq.n	800a398 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a392:	fbb2 f3f3 	udiv	r3, r2, r3
 800a396:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d007      	beq.n	800a3ae <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a39e:	4a28      	ldr	r2, [pc, #160]	@ (800a440 <HAL_SD_InitCard+0x130>)
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f7 fa97 	bl	80018dc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 ffea 	bl	800b388 <SD_PowerON>
 800a3b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e02e      	b.n	800a432 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 ff09 	bl	800b1ec <SD_InitCard>
 800a3da:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00b      	beq.n	800a3fa <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e01b      	b.n	800a432 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a402:	4618      	mov	r0, r3
 800a404:	f003 fc40 	bl	800dc88 <SDMMC_CmdBlockLength>
 800a408:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00f      	beq.n	800a430 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a0b      	ldr	r2, [pc, #44]	@ (800a444 <HAL_SD_InitCard+0x134>)
 800a416:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	431a      	orrs	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e000      	b.n	800a432 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	372c      	adds	r7, #44	@ 0x2c
 800a436:	46bd      	mov	sp, r7
 800a438:	bd90      	pop	{r4, r7, pc}
 800a43a:	bf00      	nop
 800a43c:	014f8b59 	.word	0x014f8b59
 800a440:	00012110 	.word	0x00012110
 800a444:	1fe00fff 	.word	0x1fe00fff

0800a448 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	@ 0x30
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d107      	bne.n	800a470 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a464:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e08d      	b.n	800a58c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	f040 8086 	bne.w	800a58a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	441a      	add	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a48e:	429a      	cmp	r2, r3
 800a490:	d907      	bls.n	800a4a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a496:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e074      	b.n	800a58c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	025a      	lsls	r2, r3, #9
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d002      	beq.n	800a4ce <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800a4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ca:	025b      	lsls	r3, r3, #9
 800a4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	025b      	lsls	r3, r3, #9
 800a4d8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4da:	2390      	movs	r3, #144	@ 0x90
 800a4dc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4de:	2302      	movs	r3, #2
 800a4e0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f107 0210 	add.w	r2, r7, #16
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f003 fb9b 	bl	800dc30 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a508:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2201      	movs	r2, #1
 800a518:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d90a      	bls.n	800a536 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2282      	movs	r2, #130	@ 0x82
 800a524:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a52c:	4618      	mov	r0, r3
 800a52e:	f003 fbf1 	bl	800dd14 <SDMMC_CmdReadMultiBlock>
 800a532:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a534:	e009      	b.n	800a54a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2281      	movs	r2, #129	@ 0x81
 800a53a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a542:	4618      	mov	r0, r3
 800a544:	f003 fbc3 	bl	800dcce <SDMMC_CmdReadSingleBlock>
 800a548:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d012      	beq.n	800a576 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a0f      	ldr	r2, [pc, #60]	@ (800a594 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a556:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	431a      	orrs	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e00a      	b.n	800a58c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a584:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3730      	adds	r7, #48	@ 0x30
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	1fe00fff 	.word	0x1fe00fff

0800a598 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	@ 0x30
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d107      	bne.n	800a5c0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e08d      	b.n	800a6dc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	f040 8086 	bne.w	800a6da <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	441a      	add	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d907      	bls.n	800a5f2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e074      	b.n	800a6dc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2203      	movs	r2, #3
 800a5f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2200      	movs	r2, #0
 800a600:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	025a      	lsls	r2, r3, #9
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	2b01      	cmp	r3, #1
 800a616:	d002      	beq.n	800a61e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	025b      	lsls	r3, r3, #9
 800a61c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a61e:	f04f 33ff 	mov.w	r3, #4294967295
 800a622:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	025b      	lsls	r3, r3, #9
 800a628:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a62a:	2390      	movs	r3, #144	@ 0x90
 800a62c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a632:	2300      	movs	r3, #0
 800a634:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a636:	2300      	movs	r3, #0
 800a638:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f107 0210 	add.w	r2, r7, #16
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f003 faf3 	bl	800dc30 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a658:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d90a      	bls.n	800a686 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	22a0      	movs	r2, #160	@ 0xa0
 800a674:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a67c:	4618      	mov	r0, r3
 800a67e:	f003 fb8f 	bl	800dda0 <SDMMC_CmdWriteMultiBlock>
 800a682:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a684:	e009      	b.n	800a69a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2290      	movs	r2, #144	@ 0x90
 800a68a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a692:	4618      	mov	r0, r3
 800a694:	f003 fb61 	bl	800dd5a <SDMMC_CmdWriteSingleBlock>
 800a698:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d012      	beq.n	800a6c6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a6e4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a6a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e00a      	b.n	800a6dc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800a6d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e000      	b.n	800a6dc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a6da:	2302      	movs	r3, #2
  }
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3730      	adds	r7, #48	@ 0x30
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	1fe00fff 	.word	0x1fe00fff

0800a6e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d008      	beq.n	800a716 <HAL_SD_IRQHandler+0x2e>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f003 0308 	and.w	r3, r3, #8
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 f926 	bl	800b960 <SD_Read_IT>
 800a714:	e19a      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a71c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 80ac 	beq.w	800a87e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a72e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b59      	ldr	r3, [pc, #356]	@ (800a8a0 <HAL_SD_IRQHandler+0x1b8>)
 800a73c:	400b      	ands	r3, r1
 800a73e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a74e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a75e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d038      	beq.n	800a7dc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d104      	bne.n	800a77e <HAL_SD_IRQHandler+0x96>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d011      	beq.n	800a7a2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f003 fb30 	bl	800dde8 <SDMMC_CmdStopTransfer>
 800a788:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d008      	beq.n	800a7a2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f95b 	bl	800aa58 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8a4 <HAL_SD_IRQHandler+0x1bc>)
 800a7a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d104      	bne.n	800a7cc <HAL_SD_IRQHandler+0xe4>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f003 ffdb 	bl	800e788 <HAL_SD_RxCpltCallback>
 800a7d2:	e13b      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f003 ffcd 	bl	800e774 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7da:	e137      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 8132 	beq.w	800aa4c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <HAL_SD_IRQHandler+0x12c>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f003 0320 	and.w	r3, r3, #32
 800a810:	2b00      	cmp	r3, #0
 800a812:	d011      	beq.n	800a838 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f003 fae5 	bl	800dde8 <SDMMC_CmdStopTransfer>
 800a81e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d008      	beq.n	800a838 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f910 	bl	800aa58 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f003 0310 	and.w	r3, r3, #16
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d104      	bne.n	800a85a <HAL_SD_IRQHandler+0x172>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f003 ff8a 	bl	800e774 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d105      	bne.n	800a876 <HAL_SD_IRQHandler+0x18e>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80eb 	beq.w	800aa4c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f003 ff86 	bl	800e788 <HAL_SD_RxCpltCallback>
}
 800a87c:	e0e6      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <HAL_SD_IRQHandler+0x1c0>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f003 0308 	and.w	r3, r3, #8
 800a892:	2b00      	cmp	r3, #0
 800a894:	d008      	beq.n	800a8a8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f001 f8a8 	bl	800b9ec <SD_Write_IT>
 800a89c:	e0d6      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
 800a89e:	bf00      	nop
 800a8a0:	ffff3ec5 	.word	0xffff3ec5
 800a8a4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ae:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 809d 	beq.w	800a9f2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d005      	beq.n	800a8d2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ca:	f043 0202 	orr.w	r2, r3, #2
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d8:	f003 0308 	and.w	r3, r3, #8
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e4:	f043 0208 	orr.w	r2, r3, #8
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8fe:	f043 0220 	orr.w	r2, r3, #32
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90c:	f003 0310 	and.w	r3, r3, #16
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a918:	f043 0210 	orr.w	r2, r3, #16
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a4b      	ldr	r2, [pc, #300]	@ (800aa54 <HAL_SD_IRQHandler+0x36c>)
 800a926:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a936:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a946:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a956:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a966:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f003 fa3b 	bl	800dde8 <SDMMC_CmdStopTransfer>
 800a972:	4602      	mov	r2, r0
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a98c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a996:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f851 	bl	800aa58 <HAL_SD_ErrorCallback>
}
 800a9b6:	e049      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d044      	beq.n	800aa4c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d040      	beq.n	800aa4c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a9d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f834 	bl	800aa58 <HAL_SD_ErrorCallback>
}
 800a9f0:	e02c      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d025      	beq.n	800aa4c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa08:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10c      	bne.n	800aa32 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f003 0320 	and.w	r3, r3, #32
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 f84a 	bl	800babc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800aa28:	e010      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 f832 	bl	800ba94 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800aa30:	e00c      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 f833 	bl	800baa8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800aa42:	e003      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 f81b 	bl	800ba80 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800aa4a:	e7ff      	b.n	800aa4c <HAL_SD_IRQHandler+0x364>
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	18000f3a 	.word	0x18000f3a

0800aa58 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa7a:	0f9b      	lsrs	r3, r3, #30
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa86:	0e9b      	lsrs	r3, r3, #26
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa98:	0e1b      	lsrs	r3, r3, #24
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	b2da      	uxtb	r2, r3
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaaa:	0c1b      	lsrs	r3, r3, #16
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aab6:	0a1b      	lsrs	r3, r3, #8
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aacc:	0d1b      	lsrs	r3, r3, #20
 800aace:	b29a      	uxth	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	f003 030f 	and.w	r3, r3, #15
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaea:	0bdb      	lsrs	r3, r3, #15
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aafc:	0b9b      	lsrs	r3, r3, #14
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab0e:	0b5b      	lsrs	r3, r3, #13
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab20:	0b1b      	lsrs	r3, r3, #12
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2200      	movs	r2, #0
 800ab32:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d163      	bne.n	800ac04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab40:	009a      	lsls	r2, r3, #2
 800ab42:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ab46:	4013      	ands	r3, r2
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ab4c:	0f92      	lsrs	r2, r2, #30
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab58:	0edb      	lsrs	r3, r3, #27
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 0307 	and.w	r3, r3, #7
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab6a:	0e1b      	lsrs	r3, r3, #24
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab7c:	0d5b      	lsrs	r3, r3, #21
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab8e:	0c9b      	lsrs	r3, r3, #18
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba0:	0bdb      	lsrs	r3, r3, #15
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	7e1b      	ldrb	r3, [r3, #24]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0307 	and.w	r3, r3, #7
 800abc2:	3302      	adds	r3, #2
 800abc4:	2201      	movs	r2, #1
 800abc6:	fa02 f303 	lsl.w	r3, r2, r3
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800abce:	fb03 f202 	mul.w	r2, r3, r2
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	7a1b      	ldrb	r3, [r3, #8]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	2201      	movs	r2, #1
 800abe2:	409a      	lsls	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800abf0:	0a52      	lsrs	r2, r2, #9
 800abf2:	fb03 f202 	mul.w	r2, r3, r2
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac00:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac02:	e031      	b.n	800ac68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d11d      	bne.n	800ac48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac10:	041b      	lsls	r3, r3, #16
 800ac12:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac1a:	0c1b      	lsrs	r3, r3, #16
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	3301      	adds	r3, #1
 800ac28:	029a      	lsls	r2, r3, #10
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac46:	e00f      	b.n	800ac68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a58      	ldr	r2, [pc, #352]	@ (800adb0 <HAL_SD_GetCardCSD+0x344>)
 800ac4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e09d      	b.n	800ada4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac6c:	0b9b      	lsrs	r3, r3, #14
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac7e:	09db      	lsrs	r3, r3, #7
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aca0:	0fdb      	lsrs	r3, r3, #31
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acac:	0f5b      	lsrs	r3, r3, #29
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acbe:	0e9b      	lsrs	r3, r3, #26
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acd0:	0d9b      	lsrs	r3, r3, #22
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ace2:	0d5b      	lsrs	r3, r3, #21
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acfe:	0c1b      	lsrs	r3, r3, #16
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad12:	0bdb      	lsrs	r3, r3, #15
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad26:	0b9b      	lsrs	r3, r3, #14
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad3a:	0b5b      	lsrs	r3, r3, #13
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad4e:	0b1b      	lsrs	r3, r3, #12
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad62:	0a9b      	lsrs	r3, r3, #10
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	1fe00fff 	.word	0x1fe00fff

0800adb4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b094      	sub	sp, #80	@ 0x50
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d101      	bne.n	800add4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e0a7      	b.n	800af24 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fb62 	bl	800b4a4 <SD_SendSDStatus>
 800ade0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ade2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d011      	beq.n	800ae0c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a4f      	ldr	r2, [pc, #316]	@ (800af2c <HAL_SD_GetCardStatus+0x178>)
 800adee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ae0a:	e070      	b.n	800aeee <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	099b      	lsrs	r3, r3, #6
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	095b      	lsrs	r3, r3, #5
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	0e1b      	lsrs	r3, r3, #24
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	061a      	lsls	r2, r3, #24
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae52:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ae5c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	0e1b      	lsrs	r3, r3, #24
 800ae62:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	0d1b      	lsrs	r3, r3, #20
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	0c1b      	lsrs	r3, r3, #16
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	0a9b      	lsrs	r3, r3, #10
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	091b      	lsrs	r3, r3, #4
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	0e1b      	lsrs	r3, r3, #24
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 fec6 	bl	800dc88 <SDMMC_CmdBlockLength>
 800aefc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aefe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00d      	beq.n	800af20 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a08      	ldr	r2, [pc, #32]	@ (800af2c <HAL_SD_GetCardStatus+0x178>)
 800af0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af10:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800af20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800af24:	4618      	mov	r0, r3
 800af26:	3750      	adds	r7, #80	@ 0x50
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	1fe00fff 	.word	0x1fe00fff

0800af30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800af88:	b590      	push	{r4, r7, lr}
 800af8a:	b08d      	sub	sp, #52	@ 0x34
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2203      	movs	r2, #3
 800af9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d02e      	beq.n	800b006 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afae:	d106      	bne.n	800afbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	635a      	str	r2, [r3, #52]	@ 0x34
 800afbc:	e029      	b.n	800b012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afc4:	d10a      	bne.n	800afdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fb64 	bl	800b694 <SD_WideBus_Enable>
 800afcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	431a      	orrs	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	635a      	str	r2, [r3, #52]	@ 0x34
 800afda:	e01a      	b.n	800b012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fba1 	bl	800b72a <SD_WideBus_Disable>
 800afe8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	635a      	str	r2, [r3, #52]	@ 0x34
 800aff6:	e00c      	b.n	800b012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800affc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	635a      	str	r2, [r3, #52]	@ 0x34
 800b004:	e005      	b.n	800b012 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b00a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a5f      	ldr	r2, [pc, #380]	@ (800b19c <HAL_SD_ConfigWideBusOperation+0x214>)
 800b020:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b028:	e096      	b.n	800b158 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b02a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b02e:	f04f 0100 	mov.w	r1, #0
 800b032:	f7fd fc45 	bl	80088c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b036:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 8083 	beq.w	800b146 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4950      	ldr	r1, [pc, #320]	@ (800b1a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b05e:	fba1 1303 	umull	r1, r3, r1, r3
 800b062:	0e1b      	lsrs	r3, r3, #24
 800b064:	429a      	cmp	r2, r3
 800b066:	d303      	bcc.n	800b070 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	61bb      	str	r3, [r7, #24]
 800b06e:	e05a      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b078:	d103      	bne.n	800b082 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	61bb      	str	r3, [r7, #24]
 800b080:	e051      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b08a:	d126      	bne.n	800b0da <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10e      	bne.n	800b0b2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	4a43      	ldr	r2, [pc, #268]	@ (800b1a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d906      	bls.n	800b0aa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	4a40      	ldr	r2, [pc, #256]	@ (800b1a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a4:	0e5b      	lsrs	r3, r3, #25
 800b0a6:	61bb      	str	r3, [r7, #24]
 800b0a8:	e03d      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	61bb      	str	r3, [r7, #24]
 800b0b0:	e039      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	69fa      	ldr	r2, [r7, #28]
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	4a39      	ldr	r2, [pc, #228]	@ (800b1a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d906      	bls.n	800b0d2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	4a36      	ldr	r2, [pc, #216]	@ (800b1a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0cc:	0e5b      	lsrs	r3, r3, #25
 800b0ce:	61bb      	str	r3, [r7, #24]
 800b0d0:	e029      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	e025      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10e      	bne.n	800b100 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	4a30      	ldr	r2, [pc, #192]	@ (800b1a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d906      	bls.n	800b0f8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4a2c      	ldr	r2, [pc, #176]	@ (800b1a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f2:	0e1b      	lsrs	r3, r3, #24
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e016      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	61bb      	str	r3, [r7, #24]
 800b0fe:	e012      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10c:	4a26      	ldr	r2, [pc, #152]	@ (800b1a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d906      	bls.n	800b120 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4a22      	ldr	r2, [pc, #136]	@ (800b1a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b116:	fba2 2303 	umull	r2, r3, r2, r3
 800b11a:	0e1b      	lsrs	r3, r3, #24
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e002      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681c      	ldr	r4, [r3, #0]
 800b12a:	466a      	mov	r2, sp
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b134:	e882 0003 	stmia.w	r2, {r0, r1}
 800b138:	f107 0308 	add.w	r3, r7, #8
 800b13c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b13e:	4620      	mov	r0, r4
 800b140:	f002 fcc4 	bl	800dacc <SDMMC_Init>
 800b144:	e008      	b.n	800b158 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b160:	4618      	mov	r0, r3
 800b162:	f002 fd91 	bl	800dc88 <SDMMC_CmdBlockLength>
 800b166:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00c      	beq.n	800b188 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a0a      	ldr	r2, [pc, #40]	@ (800b19c <HAL_SD_ConfigWideBusOperation+0x214>)
 800b174:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	431a      	orrs	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b194:	4618      	mov	r0, r3
 800b196:	372c      	adds	r7, #44	@ 0x2c
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	1fe00fff 	.word	0x1fe00fff
 800b1a0:	55e63b89 	.word	0x55e63b89
 800b1a4:	02faf080 	.word	0x02faf080
 800b1a8:	017d7840 	.word	0x017d7840

0800b1ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b1b8:	f107 030c 	add.w	r3, r7, #12
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa40 	bl	800b644 <SD_SendStatus>
 800b1c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	0a5b      	lsrs	r3, r3, #9
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b1e2:	693b      	ldr	r3, [r7, #16]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b090      	sub	sp, #64	@ 0x40
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b1f8:	f7f6 fb64 	bl	80018c4 <HAL_GetTick>
 800b1fc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f002 fcbb 	bl	800db7e <SDMMC_GetPowerState>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d102      	bne.n	800b214 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b20e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b212:	e0b5      	b.n	800b380 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d02e      	beq.n	800b27a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f002 ff06 	bl	800e032 <SDMMC_CmdSendCID>
 800b226:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <SD_InitCard+0x46>
    {
      return errorstate;
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	e0a6      	b.n	800b380 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f002 fce6 	bl	800dc0a <SDMMC_GetResponse>
 800b23e:	4602      	mov	r2, r0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2104      	movs	r1, #4
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 fcdd 	bl	800dc0a <SDMMC_GetResponse>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2108      	movs	r1, #8
 800b25c:	4618      	mov	r0, r3
 800b25e:	f002 fcd4 	bl	800dc0a <SDMMC_GetResponse>
 800b262:	4602      	mov	r2, r0
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	210c      	movs	r1, #12
 800b26e:	4618      	mov	r0, r3
 800b270:	f002 fccb 	bl	800dc0a <SDMMC_GetResponse>
 800b274:	4602      	mov	r2, r0
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d01d      	beq.n	800b2be <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b282:	e019      	b.n	800b2b8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f107 020a 	add.w	r2, r7, #10
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f002 ff0e 	bl	800e0b0 <SDMMC_CmdSetRelAdd>
 800b294:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29e:	e06f      	b.n	800b380 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b2a0:	f7f6 fb10 	bl	80018c4 <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d902      	bls.n	800b2b8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b2b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2b6:	e063      	b.n	800b380 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b2b8:	897b      	ldrh	r3, [r7, #10]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0e2      	beq.n	800b284 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d036      	beq.n	800b334 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b2c6:	897b      	ldrh	r3, [r7, #10]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d6:	041b      	lsls	r3, r3, #16
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f002 fec8 	bl	800e070 <SDMMC_CmdSendCSD>
 800b2e0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <SD_InitCard+0x100>
    {
      return errorstate;
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	e049      	b.n	800b380 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f002 fc89 	bl	800dc0a <SDMMC_GetResponse>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2104      	movs	r1, #4
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fc80 	bl	800dc0a <SDMMC_GetResponse>
 800b30a:	4602      	mov	r2, r0
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2108      	movs	r1, #8
 800b316:	4618      	mov	r0, r3
 800b318:	f002 fc77 	bl	800dc0a <SDMMC_GetResponse>
 800b31c:	4602      	mov	r2, r0
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	210c      	movs	r1, #12
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fc6e 	bl	800dc0a <SDMMC_GetResponse>
 800b32e:	4602      	mov	r2, r0
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2104      	movs	r1, #4
 800b33a:	4618      	mov	r0, r3
 800b33c:	f002 fc65 	bl	800dc0a <SDMMC_GetResponse>
 800b340:	4603      	mov	r3, r0
 800b342:	0d1a      	lsrs	r2, r3, #20
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fb8c 	bl	800aa6c <HAL_SD_GetCardCSD>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d002      	beq.n	800b360 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b35a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b35e:	e00f      	b.n	800b380 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b368:	041b      	lsls	r3, r3, #16
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f002 fd77 	bl	800de60 <SDMMC_CmdSelDesel>
 800b372:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <SD_InitCard+0x192>
  {
    return errorstate;
 800b37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37c:	e000      	b.n	800b380 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3740      	adds	r7, #64	@ 0x40
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f002 fd80 	bl	800dea6 <SDMMC_CmdGoIdleState>
 800b3a6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	e072      	b.n	800b498 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 fd93 	bl	800dee2 <SDMMC_CmdOperCond>
 800b3bc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3c4:	d10d      	bne.n	800b3e2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f002 fd68 	bl	800dea6 <SDMMC_CmdGoIdleState>
 800b3d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <SD_PowerON+0x60>
    {
      return errorstate;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	e05a      	b.n	800b498 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d137      	bne.n	800b460 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 fd93 	bl	800df22 <SDMMC_CmdAppCommand>
 800b3fc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d02d      	beq.n	800b460 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b404:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b408:	e046      	b.n	800b498 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f002 fd86 	bl	800df22 <SDMMC_CmdAppCommand>
 800b416:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	e03a      	b.n	800b498 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	491e      	ldr	r1, [pc, #120]	@ (800b4a0 <SD_PowerON+0x118>)
 800b428:	4618      	mov	r0, r3
 800b42a:	f002 fd9d 	bl	800df68 <SDMMC_CmdAppOperCommand>
 800b42e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b436:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b43a:	e02d      	b.n	800b498 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2100      	movs	r1, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f002 fbe1 	bl	800dc0a <SDMMC_GetResponse>
 800b448:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	0fdb      	lsrs	r3, r3, #31
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <SD_PowerON+0xce>
 800b452:	2301      	movs	r3, #1
 800b454:	e000      	b.n	800b458 <SD_PowerON+0xd0>
 800b456:	2300      	movs	r3, #0
 800b458:	613b      	str	r3, [r7, #16]

    count++;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	3301      	adds	r3, #1
 800b45e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b466:	4293      	cmp	r3, r2
 800b468:	d802      	bhi.n	800b470 <SD_PowerON+0xe8>
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d0cc      	beq.n	800b40a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b476:	4293      	cmp	r3, r2
 800b478:	d902      	bls.n	800b480 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b47a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b47e:	e00b      	b.n	800b498 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	c1100000 	.word	0xc1100000

0800b4a4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08c      	sub	sp, #48	@ 0x30
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b4ae:	f7f6 fa09 	bl	80018c4 <HAL_GetTick>
 800b4b2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f002 fba3 	bl	800dc0a <SDMMC_GetResponse>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4ce:	d102      	bne.n	800b4d6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4d4:	e0b0      	b.n	800b638 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2140      	movs	r1, #64	@ 0x40
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f002 fbd3 	bl	800dc88 <SDMMC_CmdBlockLength>
 800b4e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	e0a0      	b.n	800b638 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4fe:	041b      	lsls	r3, r3, #16
 800b500:	4619      	mov	r1, r3
 800b502:	4610      	mov	r0, r2
 800b504:	f002 fd0d 	bl	800df22 <SDMMC_CmdAppCommand>
 800b508:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	e08d      	b.n	800b638 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b51c:	f04f 33ff 	mov.w	r3, #4294967295
 800b520:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b522:	2340      	movs	r3, #64	@ 0x40
 800b524:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b526:	2360      	movs	r3, #96	@ 0x60
 800b528:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b52a:	2302      	movs	r3, #2
 800b52c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b52e:	2300      	movs	r3, #0
 800b530:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b532:	2301      	movs	r3, #1
 800b534:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f107 0208 	add.w	r2, r7, #8
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f002 fb75 	bl	800dc30 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f002 fdf5 	bl	800e13a <SDMMC_CmdStatusRegister>
 800b550:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d02b      	beq.n	800b5b0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	e069      	b.n	800b638 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b56a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d013      	beq.n	800b59a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b572:	2300      	movs	r3, #0
 800b574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b576:	e00d      	b.n	800b594 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 facf 	bl	800db20 <SDMMC_ReadFIFO>
 800b582:	4602      	mov	r2, r0
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	601a      	str	r2, [r3, #0]
        pData++;
 800b588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58a:	3304      	adds	r3, #4
 800b58c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b590:	3301      	adds	r3, #1
 800b592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b596:	2b07      	cmp	r3, #7
 800b598:	d9ee      	bls.n	800b578 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b59a:	f7f6 f993 	bl	80018c4 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a8:	d102      	bne.n	800b5b0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b5aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b5ae:	e043      	b.n	800b638 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0d2      	beq.n	800b564 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5c4:	f003 0308 	and.w	r3, r3, #8
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b5cc:	2308      	movs	r3, #8
 800b5ce:	e033      	b.n	800b638 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d6:	f003 0302 	and.w	r3, r3, #2
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e02a      	b.n	800b638 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e8:	f003 0320 	and.w	r3, r3, #32
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d017      	beq.n	800b620 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b5f0:	2320      	movs	r3, #32
 800b5f2:	e021      	b.n	800b638 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f002 fa91 	bl	800db20 <SDMMC_ReadFIFO>
 800b5fe:	4602      	mov	r2, r0
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	601a      	str	r2, [r3, #0]
    pData++;
 800b604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b606:	3304      	adds	r3, #4
 800b608:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b60a:	f7f6 f95b 	bl	80018c4 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b618:	d102      	bne.n	800b620 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b61a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b61e:	e00b      	b.n	800b638 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1e2      	bne.n	800b5f4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a03      	ldr	r2, [pc, #12]	@ (800b640 <SD_SendSDStatus+0x19c>)
 800b634:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3730      	adds	r7, #48	@ 0x30
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	18000f3a 	.word	0x18000f3a

0800b644 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b654:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b658:	e018      	b.n	800b68c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b662:	041b      	lsls	r3, r3, #16
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f002 fd44 	bl	800e0f4 <SDMMC_CmdSendStatus>
 800b66c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	e009      	b.n	800b68c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2100      	movs	r1, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f002 fac3 	bl	800dc0a <SDMMC_GetResponse>
 800b684:	4602      	mov	r2, r0
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f002 faad 	bl	800dc0a <SDMMC_GetResponse>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6ba:	d102      	bne.n	800b6c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b6bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b6c0:	e02f      	b.n	800b722 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b6c2:	f107 030c 	add.w	r3, r7, #12
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f879 	bl	800b7c0 <SD_FindSCR>
 800b6ce:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	e023      	b.n	800b722 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01c      	beq.n	800b71e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6ec:	041b      	lsls	r3, r3, #16
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	f002 fc16 	bl	800df22 <SDMMC_CmdAppCommand>
 800b6f6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	e00f      	b.n	800b722 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2102      	movs	r1, #2
 800b708:	4618      	mov	r0, r3
 800b70a:	f002 fc4d 	bl	800dfa8 <SDMMC_CmdBusWidth>
 800b70e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	e003      	b.n	800b722 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e001      	b.n	800b722 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b71e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	2300      	movs	r3, #0
 800b738:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2100      	movs	r1, #0
 800b740:	4618      	mov	r0, r3
 800b742:	f002 fa62 	bl	800dc0a <SDMMC_GetResponse>
 800b746:	4603      	mov	r3, r0
 800b748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b74c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b750:	d102      	bne.n	800b758 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b752:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b756:	e02f      	b.n	800b7b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b758:	f107 030c 	add.w	r3, r7, #12
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f82e 	bl	800b7c0 <SD_FindSCR>
 800b764:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	e023      	b.n	800b7b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d01c      	beq.n	800b7b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b782:	041b      	lsls	r3, r3, #16
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f002 fbcb 	bl	800df22 <SDMMC_CmdAppCommand>
 800b78c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	e00f      	b.n	800b7b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2100      	movs	r1, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f002 fc02 	bl	800dfa8 <SDMMC_CmdBusWidth>
 800b7a4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	e003      	b.n	800b7b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e001      	b.n	800b7b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08e      	sub	sp, #56	@ 0x38
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7ca:	f7f6 f87b 	bl	80018c4 <HAL_GetTick>
 800b7ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60bb      	str	r3, [r7, #8]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2108      	movs	r1, #8
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f002 fa4e 	bl	800dc88 <SDMMC_CmdBlockLength>
 800b7ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	e0ad      	b.n	800b954 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	4619      	mov	r1, r3
 800b804:	4610      	mov	r0, r2
 800b806:	f002 fb8c 	bl	800df22 <SDMMC_CmdAppCommand>
 800b80a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b814:	e09e      	b.n	800b954 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b816:	f04f 33ff 	mov.w	r3, #4294967295
 800b81a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b81c:	2308      	movs	r3, #8
 800b81e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b820:	2330      	movs	r3, #48	@ 0x30
 800b822:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b824:	2302      	movs	r3, #2
 800b826:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b828:	2300      	movs	r3, #0
 800b82a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f107 0210 	add.w	r2, r7, #16
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f002 f9f8 	bl	800dc30 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f002 fbd2 	bl	800dfee <SDMMC_CmdSendSCR>
 800b84a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d027      	beq.n	800b8a2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b854:	e07e      	b.n	800b954 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d113      	bne.n	800b88c <SD_FindSCR+0xcc>
 800b864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b866:	2b00      	cmp	r3, #0
 800b868:	d110      	bne.n	800b88c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4618      	mov	r0, r3
 800b870:	f002 f956 	bl	800db20 <SDMMC_ReadFIFO>
 800b874:	4603      	mov	r3, r0
 800b876:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f002 f94f 	bl	800db20 <SDMMC_ReadFIFO>
 800b882:	4603      	mov	r3, r0
 800b884:	60fb      	str	r3, [r7, #12]
      index++;
 800b886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b888:	3301      	adds	r3, #1
 800b88a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b88c:	f7f6 f81a 	bl	80018c4 <HAL_GetTick>
 800b890:	4602      	mov	r2, r0
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d102      	bne.n	800b8a2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b89c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8a0:	e058      	b.n	800b954 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8a8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0d1      	beq.n	800b856 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b8:	f003 0308 	and.w	r3, r3, #8
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2208      	movs	r2, #8
 800b8c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b8c8:	2308      	movs	r3, #8
 800b8ca:	e043      	b.n	800b954 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d2:	f003 0302 	and.w	r3, r3, #2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2202      	movs	r2, #2
 800b8e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e036      	b.n	800b954 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ec:	f003 0320 	and.w	r3, r3, #32
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b8fc:	2320      	movs	r3, #32
 800b8fe:	e029      	b.n	800b954 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a15      	ldr	r2, [pc, #84]	@ (800b95c <SD_FindSCR+0x19c>)
 800b906:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	061a      	lsls	r2, r3, #24
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	021b      	lsls	r3, r3, #8
 800b910:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b914:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	0a1b      	lsrs	r3, r3, #8
 800b91a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b91e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	0e1b      	lsrs	r3, r3, #24
 800b924:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	601a      	str	r2, [r3, #0]
    scr++;
 800b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92c:	3304      	adds	r3, #4
 800b92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	061a      	lsls	r2, r3, #24
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	021b      	lsls	r3, r3, #8
 800b938:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b93c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	0a1b      	lsrs	r3, r3, #8
 800b942:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b946:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	0e1b      	lsrs	r3, r3, #24
 800b94c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b950:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3738      	adds	r7, #56	@ 0x38
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	18000f3a 	.word	0x18000f3a

0800b960 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b96c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b972:	2b1f      	cmp	r3, #31
 800b974:	d936      	bls.n	800b9e4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]
 800b97a:	e027      	b.n	800b9cc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4618      	mov	r0, r3
 800b982:	f002 f8cd 	bl	800db20 <SDMMC_ReadFIFO>
 800b986:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	3301      	adds	r3, #1
 800b994:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	0a1b      	lsrs	r3, r3, #8
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	0e1b      	lsrs	r3, r3, #24
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2b07      	cmp	r3, #7
 800b9d0:	d9d4      	bls.n	800b97c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9dc:	f1a3 0220 	sub.w	r2, r3, #32
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	2b1f      	cmp	r3, #31
 800ba00:	d93a      	bls.n	800ba78 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e02b      	b.n	800ba60 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	021a      	lsls	r2, r3, #8
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	3301      	adds	r3, #1
 800ba24:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	041a      	lsls	r2, r3, #16
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3301      	adds	r3, #1
 800ba36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	061a      	lsls	r2, r3, #24
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	3301      	adds	r3, #1
 800ba48:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f107 020c 	add.w	r2, r7, #12
 800ba52:	4611      	mov	r1, r2
 800ba54:	4618      	mov	r0, r3
 800ba56:	f002 f870 	bl	800db3a <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b07      	cmp	r3, #7
 800ba64:	d9d0      	bls.n	800ba08 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	f1a3 0220 	sub.w	r2, r3, #32
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	621a      	str	r2, [r3, #32]
  }
}
 800ba78:	bf00      	nop
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e10f      	b.n	800bd02 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a87      	ldr	r2, [pc, #540]	@ (800bd0c <HAL_SPI_Init+0x23c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d00f      	beq.n	800bb12 <HAL_SPI_Init+0x42>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a86      	ldr	r2, [pc, #536]	@ (800bd10 <HAL_SPI_Init+0x240>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00a      	beq.n	800bb12 <HAL_SPI_Init+0x42>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a84      	ldr	r2, [pc, #528]	@ (800bd14 <HAL_SPI_Init+0x244>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d005      	beq.n	800bb12 <HAL_SPI_Init+0x42>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	2b0f      	cmp	r3, #15
 800bb0c:	d901      	bls.n	800bb12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e0f7      	b.n	800bd02 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f900 	bl	800bd18 <SPI_GetPacketSize>
 800bb18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a7b      	ldr	r2, [pc, #492]	@ (800bd0c <HAL_SPI_Init+0x23c>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00c      	beq.n	800bb3e <HAL_SPI_Init+0x6e>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a79      	ldr	r2, [pc, #484]	@ (800bd10 <HAL_SPI_Init+0x240>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d007      	beq.n	800bb3e <HAL_SPI_Init+0x6e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a78      	ldr	r2, [pc, #480]	@ (800bd14 <HAL_SPI_Init+0x244>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d002      	beq.n	800bb3e <HAL_SPI_Init+0x6e>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b08      	cmp	r3, #8
 800bb3c:	d811      	bhi.n	800bb62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb42:	4a72      	ldr	r2, [pc, #456]	@ (800bd0c <HAL_SPI_Init+0x23c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d009      	beq.n	800bb5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a70      	ldr	r2, [pc, #448]	@ (800bd10 <HAL_SPI_Init+0x240>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d004      	beq.n	800bb5c <HAL_SPI_Init+0x8c>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a6f      	ldr	r2, [pc, #444]	@ (800bd14 <HAL_SPI_Init+0x244>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d104      	bne.n	800bb66 <HAL_SPI_Init+0x96>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b10      	cmp	r3, #16
 800bb60:	d901      	bls.n	800bb66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e0cd      	b.n	800bd02 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7f5 fb68 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0201 	bic.w	r2, r2, #1
 800bb96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bba2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bbac:	d119      	bne.n	800bbe2 <HAL_SPI_Init+0x112>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbb6:	d103      	bne.n	800bbc0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d008      	beq.n	800bbd2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10c      	bne.n	800bbe2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bbcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbd0:	d107      	bne.n	800bbe2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bbe0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00f      	beq.n	800bc0e <HAL_SPI_Init+0x13e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	2b06      	cmp	r3, #6
 800bbf4:	d90b      	bls.n	800bc0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	e007      	b.n	800bc1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	69da      	ldr	r2, [r3, #28]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc26:	431a      	orrs	r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc30:	ea42 0103 	orr.w	r1, r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68da      	ldr	r2, [r3, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	431a      	orrs	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	431a      	orrs	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc72:	431a      	orrs	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc7e:	ea42 0103 	orr.w	r1, r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d113      	bne.n	800bcbe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bca8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bcbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f022 0201 	bic.w	r2, r2, #1
 800bccc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00a      	beq.n	800bcf0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	430a      	orrs	r2, r1
 800bcee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	40013000 	.word	0x40013000
 800bd10:	40003800 	.word	0x40003800
 800bd14:	40003c00 	.word	0x40003c00

0800bd18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd24:	095b      	lsrs	r3, r3, #5
 800bd26:	3301      	adds	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	3307      	adds	r3, #7
 800bd36:	08db      	lsrs	r3, r3, #3
 800bd38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e042      	b.n	800bde6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7f5 fad4 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2224      	movs	r2, #36	@ 0x24
 800bd7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 0201 	bic.w	r2, r2, #1
 800bd8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 fb19 	bl	800d3d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fcaa 	bl	800c6f8 <UART_SetConfig>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d101      	bne.n	800bdae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e01b      	b.n	800bde6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bdbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0201 	orr.w	r2, r2, #1
 800bddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 fb98 	bl	800d514 <UART_CheckIdleState>
 800bde4:	4603      	mov	r3, r0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b08a      	sub	sp, #40	@ 0x28
 800bdf2:	af02      	add	r7, sp, #8
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	603b      	str	r3, [r7, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be04:	2b20      	cmp	r3, #32
 800be06:	d17b      	bne.n	800bf00 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <HAL_UART_Transmit+0x26>
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e074      	b.n	800bf02 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2221      	movs	r2, #33	@ 0x21
 800be24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be28:	f7f5 fd4c 	bl	80018c4 <HAL_GetTick>
 800be2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	88fa      	ldrh	r2, [r7, #6]
 800be32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	88fa      	ldrh	r2, [r7, #6]
 800be3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be46:	d108      	bne.n	800be5a <HAL_UART_Transmit+0x6c>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d104      	bne.n	800be5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be50:	2300      	movs	r3, #0
 800be52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	61bb      	str	r3, [r7, #24]
 800be58:	e003      	b.n	800be62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be62:	e030      	b.n	800bec6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2200      	movs	r2, #0
 800be6c:	2180      	movs	r1, #128	@ 0x80
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f001 fbfa 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d005      	beq.n	800be86 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e03d      	b.n	800bf02 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10b      	bne.n	800bea4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	3302      	adds	r3, #2
 800bea0:	61bb      	str	r3, [r7, #24]
 800bea2:	e007      	b.n	800beb4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	781a      	ldrb	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	3301      	adds	r3, #1
 800beb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800beba:	b29b      	uxth	r3, r3
 800bebc:	3b01      	subs	r3, #1
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800becc:	b29b      	uxth	r3, r3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1c8      	bne.n	800be64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2200      	movs	r2, #0
 800beda:	2140      	movs	r1, #64	@ 0x40
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f001 fbc3 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d005      	beq.n	800bef4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2220      	movs	r2, #32
 800beec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e006      	b.n	800bf02 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2220      	movs	r2, #32
 800bef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	e000      	b.n	800bf02 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bf00:	2302      	movs	r3, #2
  }
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3720      	adds	r7, #32
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b0ba      	sub	sp, #232	@ 0xe8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bf36:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bf40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11b      	bne.n	800bf80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf4c:	f003 0320 	and.w	r3, r3, #32
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d015      	beq.n	800bf80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf58:	f003 0320 	and.w	r3, r3, #32
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d105      	bne.n	800bf6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d009      	beq.n	800bf80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 8393 	beq.w	800c69c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	4798      	blx	r3
      }
      return;
 800bf7e:	e38d      	b.n	800c69c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 8123 	beq.w	800c1d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bf8e:	4b8d      	ldr	r3, [pc, #564]	@ (800c1c4 <HAL_UART_IRQHandler+0x2b8>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d106      	bne.n	800bfa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bf9a:	4b8b      	ldr	r3, [pc, #556]	@ (800c1c8 <HAL_UART_IRQHandler+0x2bc>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f000 8116 	beq.w	800c1d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d011      	beq.n	800bfd4 <HAL_UART_IRQHandler+0xc8>
 800bfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfca:	f043 0201 	orr.w	r2, r3, #1
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d011      	beq.n	800c004 <HAL_UART_IRQHandler+0xf8>
 800bfe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00b      	beq.n	800c004 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2202      	movs	r2, #2
 800bff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bffa:	f043 0204 	orr.w	r2, r3, #4
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d011      	beq.n	800c034 <HAL_UART_IRQHandler+0x128>
 800c010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2204      	movs	r2, #4
 800c022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c02a:	f043 0202 	orr.w	r2, r3, #2
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c038:	f003 0308 	and.w	r3, r3, #8
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d017      	beq.n	800c070 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d105      	bne.n	800c058 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c04c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c050:	4b5c      	ldr	r3, [pc, #368]	@ (800c1c4 <HAL_UART_IRQHandler+0x2b8>)
 800c052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2208      	movs	r2, #8
 800c05e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c066:	f043 0208 	orr.w	r2, r3, #8
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d012      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x196>
 800c07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00c      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c098:	f043 0220 	orr.w	r2, r3, #32
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 82f9 	beq.w	800c6a0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d013      	beq.n	800c0e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0be:	f003 0320 	and.w	r3, r3, #32
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d105      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d007      	beq.n	800c0e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0f6:	2b40      	cmp	r3, #64	@ 0x40
 800c0f8:	d005      	beq.n	800c106 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c102:	2b00      	cmp	r3, #0
 800c104:	d054      	beq.n	800c1b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f001 fb1c 	bl	800d744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c116:	2b40      	cmp	r3, #64	@ 0x40
 800c118:	d146      	bne.n	800c1a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3308      	adds	r3, #8
 800c120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c14a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c156:	e841 2300 	strex	r3, r2, [r1]
 800c15a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c15e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1d9      	bne.n	800c11a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d017      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c176:	4a15      	ldr	r2, [pc, #84]	@ (800c1cc <HAL_UART_IRQHandler+0x2c0>)
 800c178:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c180:	4618      	mov	r0, r3
 800c182:	f7f8 fa2d 	bl	80045e0 <HAL_DMA_Abort_IT>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d019      	beq.n	800c1c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c19a:	4610      	mov	r0, r2
 800c19c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c19e:	e00f      	b.n	800c1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa93 	bl	800c6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1a6:	e00b      	b.n	800c1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fa8f 	bl	800c6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ae:	e007      	b.n	800c1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fa8b 	bl	800c6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c1be:	e26f      	b.n	800c6a0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c0:	bf00      	nop
    return;
 800c1c2:	e26d      	b.n	800c6a0 <HAL_UART_IRQHandler+0x794>
 800c1c4:	10000001 	.word	0x10000001
 800c1c8:	04000120 	.word	0x04000120
 800c1cc:	0800d811 	.word	0x0800d811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	f040 8203 	bne.w	800c5e0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1de:	f003 0310 	and.w	r3, r3, #16
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 81fc 	beq.w	800c5e0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 81f5 	beq.w	800c5e0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2210      	movs	r2, #16
 800c1fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c208:	2b40      	cmp	r3, #64	@ 0x40
 800c20a:	f040 816d 	bne.w	800c4e8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4aa4      	ldr	r2, [pc, #656]	@ (800c4a8 <HAL_UART_IRQHandler+0x59c>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d068      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4aa1      	ldr	r2, [pc, #644]	@ (800c4ac <HAL_UART_IRQHandler+0x5a0>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d061      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a9f      	ldr	r2, [pc, #636]	@ (800c4b0 <HAL_UART_IRQHandler+0x5a4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d05a      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a9c      	ldr	r2, [pc, #624]	@ (800c4b4 <HAL_UART_IRQHandler+0x5a8>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d053      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a9a      	ldr	r2, [pc, #616]	@ (800c4b8 <HAL_UART_IRQHandler+0x5ac>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d04c      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a97      	ldr	r2, [pc, #604]	@ (800c4bc <HAL_UART_IRQHandler+0x5b0>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d045      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a95      	ldr	r2, [pc, #596]	@ (800c4c0 <HAL_UART_IRQHandler+0x5b4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d03e      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a92      	ldr	r2, [pc, #584]	@ (800c4c4 <HAL_UART_IRQHandler+0x5b8>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d037      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a90      	ldr	r2, [pc, #576]	@ (800c4c8 <HAL_UART_IRQHandler+0x5bc>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d030      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a8d      	ldr	r2, [pc, #564]	@ (800c4cc <HAL_UART_IRQHandler+0x5c0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d029      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a8b      	ldr	r2, [pc, #556]	@ (800c4d0 <HAL_UART_IRQHandler+0x5c4>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d022      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a88      	ldr	r2, [pc, #544]	@ (800c4d4 <HAL_UART_IRQHandler+0x5c8>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d01b      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a86      	ldr	r2, [pc, #536]	@ (800c4d8 <HAL_UART_IRQHandler+0x5cc>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d014      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a83      	ldr	r2, [pc, #524]	@ (800c4dc <HAL_UART_IRQHandler+0x5d0>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00d      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a81      	ldr	r2, [pc, #516]	@ (800c4e0 <HAL_UART_IRQHandler+0x5d4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d006      	beq.n	800c2ee <HAL_UART_IRQHandler+0x3e2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a7e      	ldr	r2, [pc, #504]	@ (800c4e4 <HAL_UART_IRQHandler+0x5d8>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d106      	bne.n	800c2fc <HAL_UART_IRQHandler+0x3f0>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	e005      	b.n	800c308 <HAL_UART_IRQHandler+0x3fc>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	b29b      	uxth	r3, r3
 800c308:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c30c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80ad 	beq.w	800c470 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c31c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c320:	429a      	cmp	r2, r3
 800c322:	f080 80a5 	bcs.w	800c470 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c32c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c33c:	f000 8087 	beq.w	800c44e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c35c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c36e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c37a:	e841 2300 	strex	r3, r2, [r1]
 800c37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1da      	bne.n	800c340 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c39c:	f023 0301 	bic.w	r3, r3, #1
 800c3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c3ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c3b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c3c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e1      	bne.n	800c38a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3d0:	e853 3f00 	ldrex	r3, [r3]
 800c3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c3ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e3      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2220      	movs	r2, #32
 800c402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c41c:	f023 0310 	bic.w	r3, r3, #16
 800c420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e4      	bne.n	800c40c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c448:	4618      	mov	r0, r3
 800c44a:	f7f7 fdab 	bl	8003fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2202      	movs	r2, #2
 800c452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c460:	b29b      	uxth	r3, r3
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	b29b      	uxth	r3, r3
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f939 	bl	800c6e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c46e:	e119      	b.n	800c6a4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c47a:	429a      	cmp	r2, r3
 800c47c:	f040 8112 	bne.w	800c6a4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c48c:	f040 810a 	bne.w	800c6a4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2202      	movs	r2, #2
 800c494:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f91e 	bl	800c6e0 <HAL_UARTEx_RxEventCallback>
      return;
 800c4a4:	e0fe      	b.n	800c6a4 <HAL_UART_IRQHandler+0x798>
 800c4a6:	bf00      	nop
 800c4a8:	40020010 	.word	0x40020010
 800c4ac:	40020028 	.word	0x40020028
 800c4b0:	40020040 	.word	0x40020040
 800c4b4:	40020058 	.word	0x40020058
 800c4b8:	40020070 	.word	0x40020070
 800c4bc:	40020088 	.word	0x40020088
 800c4c0:	400200a0 	.word	0x400200a0
 800c4c4:	400200b8 	.word	0x400200b8
 800c4c8:	40020410 	.word	0x40020410
 800c4cc:	40020428 	.word	0x40020428
 800c4d0:	40020440 	.word	0x40020440
 800c4d4:	40020458 	.word	0x40020458
 800c4d8:	40020470 	.word	0x40020470
 800c4dc:	40020488 	.word	0x40020488
 800c4e0:	400204a0 	.word	0x400204a0
 800c4e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c502:	b29b      	uxth	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 80cf 	beq.w	800c6a8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800c50a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 80ca 	beq.w	800c6a8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51c:	e853 3f00 	ldrex	r3, [r3]
 800c520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c528:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c536:	647b      	str	r3, [r7, #68]	@ 0x44
 800c538:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c53c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c53e:	e841 2300 	strex	r3, r2, [r1]
 800c542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1e4      	bne.n	800c514 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	e853 3f00 	ldrex	r3, [r3]
 800c558:	623b      	str	r3, [r7, #32]
   return(result);
 800c55a:	6a3a      	ldr	r2, [r7, #32]
 800c55c:	4b55      	ldr	r3, [pc, #340]	@ (800c6b4 <HAL_UART_IRQHandler+0x7a8>)
 800c55e:	4013      	ands	r3, r2
 800c560:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3308      	adds	r3, #8
 800c56a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c56e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c570:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c576:	e841 2300 	strex	r3, r2, [r1]
 800c57a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1e3      	bne.n	800c54a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2220      	movs	r2, #32
 800c586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f023 0310 	bic.w	r3, r3, #16
 800c5aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c5b8:	61fb      	str	r3, [r7, #28]
 800c5ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	69b9      	ldr	r1, [r7, #24]
 800c5be:	69fa      	ldr	r2, [r7, #28]
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e4      	bne.n	800c596 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2202      	movs	r2, #2
 800c5d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f881 	bl	800c6e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5de:	e063      	b.n	800c6a8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00e      	beq.n	800c60a <HAL_UART_IRQHandler+0x6fe>
 800c5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f001 f941 	bl	800d88a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c608:	e051      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c60e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c612:	2b00      	cmp	r3, #0
 800c614:	d014      	beq.n	800c640 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d105      	bne.n	800c62e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d008      	beq.n	800c640 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c632:	2b00      	cmp	r3, #0
 800c634:	d03a      	beq.n	800c6ac <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	4798      	blx	r3
    }
    return;
 800c63e:	e035      	b.n	800c6ac <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d009      	beq.n	800c660 <HAL_UART_IRQHandler+0x754>
 800c64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f001 f8eb 	bl	800d834 <UART_EndTransmit_IT>
    return;
 800c65e:	e026      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d009      	beq.n	800c680 <HAL_UART_IRQHandler+0x774>
 800c66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c670:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 f91a 	bl	800d8b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c67e:	e016      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d010      	beq.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
 800c68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c690:	2b00      	cmp	r3, #0
 800c692:	da0c      	bge.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 f902 	bl	800d89e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c69a:	e008      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
      return;
 800c69c:	bf00      	nop
 800c69e:	e006      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
    return;
 800c6a0:	bf00      	nop
 800c6a2:	e004      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
      return;
 800c6a4:	bf00      	nop
 800c6a6:	e002      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
      return;
 800c6a8:	bf00      	nop
 800c6aa:	e000      	b.n	800c6ae <HAL_UART_IRQHandler+0x7a2>
    return;
 800c6ac:	bf00      	nop
  }
}
 800c6ae:	37e8      	adds	r7, #232	@ 0xe8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	effffffe 	.word	0xeffffffe

0800c6b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6fc:	b092      	sub	sp, #72	@ 0x48
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	431a      	orrs	r2, r3
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	431a      	orrs	r2, r3
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4bbe      	ldr	r3, [pc, #760]	@ (800ca20 <UART_SetConfig+0x328>)
 800c728:	4013      	ands	r3, r2
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	6812      	ldr	r2, [r2, #0]
 800c72e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c730:	430b      	orrs	r3, r1
 800c732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4ab3      	ldr	r2, [pc, #716]	@ (800ca24 <UART_SetConfig+0x32c>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d004      	beq.n	800c764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c760:	4313      	orrs	r3, r2
 800c762:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	4baf      	ldr	r3, [pc, #700]	@ (800ca28 <UART_SetConfig+0x330>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	6812      	ldr	r2, [r2, #0]
 800c772:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c774:	430b      	orrs	r3, r1
 800c776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77e:	f023 010f 	bic.w	r1, r3, #15
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4aa6      	ldr	r2, [pc, #664]	@ (800ca2c <UART_SetConfig+0x334>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d177      	bne.n	800c888 <UART_SetConfig+0x190>
 800c798:	4ba5      	ldr	r3, [pc, #660]	@ (800ca30 <UART_SetConfig+0x338>)
 800c79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c79c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c7a0:	2b28      	cmp	r3, #40	@ 0x28
 800c7a2:	d86d      	bhi.n	800c880 <UART_SetConfig+0x188>
 800c7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ac <UART_SetConfig+0xb4>)
 800c7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7aa:	bf00      	nop
 800c7ac:	0800c851 	.word	0x0800c851
 800c7b0:	0800c881 	.word	0x0800c881
 800c7b4:	0800c881 	.word	0x0800c881
 800c7b8:	0800c881 	.word	0x0800c881
 800c7bc:	0800c881 	.word	0x0800c881
 800c7c0:	0800c881 	.word	0x0800c881
 800c7c4:	0800c881 	.word	0x0800c881
 800c7c8:	0800c881 	.word	0x0800c881
 800c7cc:	0800c859 	.word	0x0800c859
 800c7d0:	0800c881 	.word	0x0800c881
 800c7d4:	0800c881 	.word	0x0800c881
 800c7d8:	0800c881 	.word	0x0800c881
 800c7dc:	0800c881 	.word	0x0800c881
 800c7e0:	0800c881 	.word	0x0800c881
 800c7e4:	0800c881 	.word	0x0800c881
 800c7e8:	0800c881 	.word	0x0800c881
 800c7ec:	0800c861 	.word	0x0800c861
 800c7f0:	0800c881 	.word	0x0800c881
 800c7f4:	0800c881 	.word	0x0800c881
 800c7f8:	0800c881 	.word	0x0800c881
 800c7fc:	0800c881 	.word	0x0800c881
 800c800:	0800c881 	.word	0x0800c881
 800c804:	0800c881 	.word	0x0800c881
 800c808:	0800c881 	.word	0x0800c881
 800c80c:	0800c869 	.word	0x0800c869
 800c810:	0800c881 	.word	0x0800c881
 800c814:	0800c881 	.word	0x0800c881
 800c818:	0800c881 	.word	0x0800c881
 800c81c:	0800c881 	.word	0x0800c881
 800c820:	0800c881 	.word	0x0800c881
 800c824:	0800c881 	.word	0x0800c881
 800c828:	0800c881 	.word	0x0800c881
 800c82c:	0800c871 	.word	0x0800c871
 800c830:	0800c881 	.word	0x0800c881
 800c834:	0800c881 	.word	0x0800c881
 800c838:	0800c881 	.word	0x0800c881
 800c83c:	0800c881 	.word	0x0800c881
 800c840:	0800c881 	.word	0x0800c881
 800c844:	0800c881 	.word	0x0800c881
 800c848:	0800c881 	.word	0x0800c881
 800c84c:	0800c879 	.word	0x0800c879
 800c850:	2301      	movs	r3, #1
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c856:	e326      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c858:	2304      	movs	r3, #4
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e322      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c860:	2308      	movs	r3, #8
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e31e      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c868:	2310      	movs	r3, #16
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e31a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c870:	2320      	movs	r3, #32
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e316      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c878:	2340      	movs	r3, #64	@ 0x40
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87e:	e312      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c880:	2380      	movs	r3, #128	@ 0x80
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c886:	e30e      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a69      	ldr	r2, [pc, #420]	@ (800ca34 <UART_SetConfig+0x33c>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d130      	bne.n	800c8f4 <UART_SetConfig+0x1fc>
 800c892:	4b67      	ldr	r3, [pc, #412]	@ (800ca30 <UART_SetConfig+0x338>)
 800c894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d826      	bhi.n	800c8ec <UART_SetConfig+0x1f4>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <UART_SetConfig+0x1ac>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8bd 	.word	0x0800c8bd
 800c8a8:	0800c8c5 	.word	0x0800c8c5
 800c8ac:	0800c8cd 	.word	0x0800c8cd
 800c8b0:	0800c8d5 	.word	0x0800c8d5
 800c8b4:	0800c8dd 	.word	0x0800c8dd
 800c8b8:	0800c8e5 	.word	0x0800c8e5
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e2f0      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8c4:	2304      	movs	r3, #4
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e2ec      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e2e8      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e2e4      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8dc:	2320      	movs	r3, #32
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e2e0      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8e4:	2340      	movs	r3, #64	@ 0x40
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e2dc      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8ec:	2380      	movs	r3, #128	@ 0x80
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f2:	e2d8      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a4f      	ldr	r2, [pc, #316]	@ (800ca38 <UART_SetConfig+0x340>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d130      	bne.n	800c960 <UART_SetConfig+0x268>
 800c8fe:	4b4c      	ldr	r3, [pc, #304]	@ (800ca30 <UART_SetConfig+0x338>)
 800c900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	2b05      	cmp	r3, #5
 800c908:	d826      	bhi.n	800c958 <UART_SetConfig+0x260>
 800c90a:	a201      	add	r2, pc, #4	@ (adr r2, 800c910 <UART_SetConfig+0x218>)
 800c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c910:	0800c929 	.word	0x0800c929
 800c914:	0800c931 	.word	0x0800c931
 800c918:	0800c939 	.word	0x0800c939
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c949 	.word	0x0800c949
 800c924:	0800c951 	.word	0x0800c951
 800c928:	2300      	movs	r3, #0
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e2ba      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c930:	2304      	movs	r3, #4
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e2b6      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c938:	2308      	movs	r3, #8
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e2b2      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c940:	2310      	movs	r3, #16
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e2ae      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c948:	2320      	movs	r3, #32
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e2aa      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c950:	2340      	movs	r3, #64	@ 0x40
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e2a6      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c958:	2380      	movs	r3, #128	@ 0x80
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95e:	e2a2      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a35      	ldr	r2, [pc, #212]	@ (800ca3c <UART_SetConfig+0x344>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d130      	bne.n	800c9cc <UART_SetConfig+0x2d4>
 800c96a:	4b31      	ldr	r3, [pc, #196]	@ (800ca30 <UART_SetConfig+0x338>)
 800c96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b05      	cmp	r3, #5
 800c974:	d826      	bhi.n	800c9c4 <UART_SetConfig+0x2cc>
 800c976:	a201      	add	r2, pc, #4	@ (adr r2, 800c97c <UART_SetConfig+0x284>)
 800c978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97c:	0800c995 	.word	0x0800c995
 800c980:	0800c99d 	.word	0x0800c99d
 800c984:	0800c9a5 	.word	0x0800c9a5
 800c988:	0800c9ad 	.word	0x0800c9ad
 800c98c:	0800c9b5 	.word	0x0800c9b5
 800c990:	0800c9bd 	.word	0x0800c9bd
 800c994:	2300      	movs	r3, #0
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99a:	e284      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c99c:	2304      	movs	r3, #4
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9a2:	e280      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9a4:	2308      	movs	r3, #8
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9aa:	e27c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9ac:	2310      	movs	r3, #16
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b2:	e278      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9b4:	2320      	movs	r3, #32
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ba:	e274      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9bc:	2340      	movs	r3, #64	@ 0x40
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c2:	e270      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9c4:	2380      	movs	r3, #128	@ 0x80
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ca:	e26c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a1b      	ldr	r2, [pc, #108]	@ (800ca40 <UART_SetConfig+0x348>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d142      	bne.n	800ca5c <UART_SetConfig+0x364>
 800c9d6:	4b16      	ldr	r3, [pc, #88]	@ (800ca30 <UART_SetConfig+0x338>)
 800c9d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d838      	bhi.n	800ca54 <UART_SetConfig+0x35c>
 800c9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e8 <UART_SetConfig+0x2f0>)
 800c9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e8:	0800ca01 	.word	0x0800ca01
 800c9ec:	0800ca09 	.word	0x0800ca09
 800c9f0:	0800ca11 	.word	0x0800ca11
 800c9f4:	0800ca19 	.word	0x0800ca19
 800c9f8:	0800ca45 	.word	0x0800ca45
 800c9fc:	0800ca4d 	.word	0x0800ca4d
 800ca00:	2300      	movs	r3, #0
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca06:	e24e      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca08:	2304      	movs	r3, #4
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0e:	e24a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca10:	2308      	movs	r3, #8
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca16:	e246      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca18:	2310      	movs	r3, #16
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1e:	e242      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca20:	cfff69f3 	.word	0xcfff69f3
 800ca24:	58000c00 	.word	0x58000c00
 800ca28:	11fff4ff 	.word	0x11fff4ff
 800ca2c:	40011000 	.word	0x40011000
 800ca30:	58024400 	.word	0x58024400
 800ca34:	40004400 	.word	0x40004400
 800ca38:	40004800 	.word	0x40004800
 800ca3c:	40004c00 	.word	0x40004c00
 800ca40:	40005000 	.word	0x40005000
 800ca44:	2320      	movs	r3, #32
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4a:	e22c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca4c:	2340      	movs	r3, #64	@ 0x40
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca52:	e228      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca54:	2380      	movs	r3, #128	@ 0x80
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5a:	e224      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4ab1      	ldr	r2, [pc, #708]	@ (800cd28 <UART_SetConfig+0x630>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d176      	bne.n	800cb54 <UART_SetConfig+0x45c>
 800ca66:	4bb1      	ldr	r3, [pc, #708]	@ (800cd2c <UART_SetConfig+0x634>)
 800ca68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca6e:	2b28      	cmp	r3, #40	@ 0x28
 800ca70:	d86c      	bhi.n	800cb4c <UART_SetConfig+0x454>
 800ca72:	a201      	add	r2, pc, #4	@ (adr r2, 800ca78 <UART_SetConfig+0x380>)
 800ca74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca78:	0800cb1d 	.word	0x0800cb1d
 800ca7c:	0800cb4d 	.word	0x0800cb4d
 800ca80:	0800cb4d 	.word	0x0800cb4d
 800ca84:	0800cb4d 	.word	0x0800cb4d
 800ca88:	0800cb4d 	.word	0x0800cb4d
 800ca8c:	0800cb4d 	.word	0x0800cb4d
 800ca90:	0800cb4d 	.word	0x0800cb4d
 800ca94:	0800cb4d 	.word	0x0800cb4d
 800ca98:	0800cb25 	.word	0x0800cb25
 800ca9c:	0800cb4d 	.word	0x0800cb4d
 800caa0:	0800cb4d 	.word	0x0800cb4d
 800caa4:	0800cb4d 	.word	0x0800cb4d
 800caa8:	0800cb4d 	.word	0x0800cb4d
 800caac:	0800cb4d 	.word	0x0800cb4d
 800cab0:	0800cb4d 	.word	0x0800cb4d
 800cab4:	0800cb4d 	.word	0x0800cb4d
 800cab8:	0800cb2d 	.word	0x0800cb2d
 800cabc:	0800cb4d 	.word	0x0800cb4d
 800cac0:	0800cb4d 	.word	0x0800cb4d
 800cac4:	0800cb4d 	.word	0x0800cb4d
 800cac8:	0800cb4d 	.word	0x0800cb4d
 800cacc:	0800cb4d 	.word	0x0800cb4d
 800cad0:	0800cb4d 	.word	0x0800cb4d
 800cad4:	0800cb4d 	.word	0x0800cb4d
 800cad8:	0800cb35 	.word	0x0800cb35
 800cadc:	0800cb4d 	.word	0x0800cb4d
 800cae0:	0800cb4d 	.word	0x0800cb4d
 800cae4:	0800cb4d 	.word	0x0800cb4d
 800cae8:	0800cb4d 	.word	0x0800cb4d
 800caec:	0800cb4d 	.word	0x0800cb4d
 800caf0:	0800cb4d 	.word	0x0800cb4d
 800caf4:	0800cb4d 	.word	0x0800cb4d
 800caf8:	0800cb3d 	.word	0x0800cb3d
 800cafc:	0800cb4d 	.word	0x0800cb4d
 800cb00:	0800cb4d 	.word	0x0800cb4d
 800cb04:	0800cb4d 	.word	0x0800cb4d
 800cb08:	0800cb4d 	.word	0x0800cb4d
 800cb0c:	0800cb4d 	.word	0x0800cb4d
 800cb10:	0800cb4d 	.word	0x0800cb4d
 800cb14:	0800cb4d 	.word	0x0800cb4d
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e1c0      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb24:	2304      	movs	r3, #4
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2a:	e1bc      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb32:	e1b8      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb34:	2310      	movs	r3, #16
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3a:	e1b4      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb3c:	2320      	movs	r3, #32
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e1b0      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb44:	2340      	movs	r3, #64	@ 0x40
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e1ac      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb4c:	2380      	movs	r3, #128	@ 0x80
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e1a8      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a75      	ldr	r2, [pc, #468]	@ (800cd30 <UART_SetConfig+0x638>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d130      	bne.n	800cbc0 <UART_SetConfig+0x4c8>
 800cb5e:	4b73      	ldr	r3, [pc, #460]	@ (800cd2c <UART_SetConfig+0x634>)
 800cb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb62:	f003 0307 	and.w	r3, r3, #7
 800cb66:	2b05      	cmp	r3, #5
 800cb68:	d826      	bhi.n	800cbb8 <UART_SetConfig+0x4c0>
 800cb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb70 <UART_SetConfig+0x478>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cb89 	.word	0x0800cb89
 800cb74:	0800cb91 	.word	0x0800cb91
 800cb78:	0800cb99 	.word	0x0800cb99
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cba9 	.word	0x0800cba9
 800cb84:	0800cbb1 	.word	0x0800cbb1
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8e:	e18a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb90:	2304      	movs	r3, #4
 800cb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb96:	e186      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cb98:	2308      	movs	r3, #8
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9e:	e182      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cba0:	2310      	movs	r3, #16
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba6:	e17e      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cba8:	2320      	movs	r3, #32
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbae:	e17a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cbb0:	2340      	movs	r3, #64	@ 0x40
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb6:	e176      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cbb8:	2380      	movs	r3, #128	@ 0x80
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbbe:	e172      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a5b      	ldr	r2, [pc, #364]	@ (800cd34 <UART_SetConfig+0x63c>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d130      	bne.n	800cc2c <UART_SetConfig+0x534>
 800cbca:	4b58      	ldr	r3, [pc, #352]	@ (800cd2c <UART_SetConfig+0x634>)
 800cbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b05      	cmp	r3, #5
 800cbd4:	d826      	bhi.n	800cc24 <UART_SetConfig+0x52c>
 800cbd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbdc <UART_SetConfig+0x4e4>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf5 	.word	0x0800cbf5
 800cbe0:	0800cbfd 	.word	0x0800cbfd
 800cbe4:	0800cc05 	.word	0x0800cc05
 800cbe8:	0800cc0d 	.word	0x0800cc0d
 800cbec:	0800cc15 	.word	0x0800cc15
 800cbf0:	0800cc1d 	.word	0x0800cc1d
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e154      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e150      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc04:	2308      	movs	r3, #8
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e14c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc0c:	2310      	movs	r3, #16
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e148      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc14:	2320      	movs	r3, #32
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e144      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc1c:	2340      	movs	r3, #64	@ 0x40
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e140      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc24:	2380      	movs	r3, #128	@ 0x80
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e13c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a41      	ldr	r2, [pc, #260]	@ (800cd38 <UART_SetConfig+0x640>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	f040 8082 	bne.w	800cd3c <UART_SetConfig+0x644>
 800cc38:	4b3c      	ldr	r3, [pc, #240]	@ (800cd2c <UART_SetConfig+0x634>)
 800cc3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc40:	2b28      	cmp	r3, #40	@ 0x28
 800cc42:	d86d      	bhi.n	800cd20 <UART_SetConfig+0x628>
 800cc44:	a201      	add	r2, pc, #4	@ (adr r2, 800cc4c <UART_SetConfig+0x554>)
 800cc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4a:	bf00      	nop
 800cc4c:	0800ccf1 	.word	0x0800ccf1
 800cc50:	0800cd21 	.word	0x0800cd21
 800cc54:	0800cd21 	.word	0x0800cd21
 800cc58:	0800cd21 	.word	0x0800cd21
 800cc5c:	0800cd21 	.word	0x0800cd21
 800cc60:	0800cd21 	.word	0x0800cd21
 800cc64:	0800cd21 	.word	0x0800cd21
 800cc68:	0800cd21 	.word	0x0800cd21
 800cc6c:	0800ccf9 	.word	0x0800ccf9
 800cc70:	0800cd21 	.word	0x0800cd21
 800cc74:	0800cd21 	.word	0x0800cd21
 800cc78:	0800cd21 	.word	0x0800cd21
 800cc7c:	0800cd21 	.word	0x0800cd21
 800cc80:	0800cd21 	.word	0x0800cd21
 800cc84:	0800cd21 	.word	0x0800cd21
 800cc88:	0800cd21 	.word	0x0800cd21
 800cc8c:	0800cd01 	.word	0x0800cd01
 800cc90:	0800cd21 	.word	0x0800cd21
 800cc94:	0800cd21 	.word	0x0800cd21
 800cc98:	0800cd21 	.word	0x0800cd21
 800cc9c:	0800cd21 	.word	0x0800cd21
 800cca0:	0800cd21 	.word	0x0800cd21
 800cca4:	0800cd21 	.word	0x0800cd21
 800cca8:	0800cd21 	.word	0x0800cd21
 800ccac:	0800cd09 	.word	0x0800cd09
 800ccb0:	0800cd21 	.word	0x0800cd21
 800ccb4:	0800cd21 	.word	0x0800cd21
 800ccb8:	0800cd21 	.word	0x0800cd21
 800ccbc:	0800cd21 	.word	0x0800cd21
 800ccc0:	0800cd21 	.word	0x0800cd21
 800ccc4:	0800cd21 	.word	0x0800cd21
 800ccc8:	0800cd21 	.word	0x0800cd21
 800cccc:	0800cd11 	.word	0x0800cd11
 800ccd0:	0800cd21 	.word	0x0800cd21
 800ccd4:	0800cd21 	.word	0x0800cd21
 800ccd8:	0800cd21 	.word	0x0800cd21
 800ccdc:	0800cd21 	.word	0x0800cd21
 800cce0:	0800cd21 	.word	0x0800cd21
 800cce4:	0800cd21 	.word	0x0800cd21
 800cce8:	0800cd21 	.word	0x0800cd21
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf6:	e0d6      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfe:	e0d2      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd00:	2308      	movs	r3, #8
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd06:	e0ce      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0e:	e0ca      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd10:	2320      	movs	r3, #32
 800cd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd16:	e0c6      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd18:	2340      	movs	r3, #64	@ 0x40
 800cd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1e:	e0c2      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd20:	2380      	movs	r3, #128	@ 0x80
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd26:	e0be      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cd28:	40011400 	.word	0x40011400
 800cd2c:	58024400 	.word	0x58024400
 800cd30:	40007800 	.word	0x40007800
 800cd34:	40007c00 	.word	0x40007c00
 800cd38:	40011800 	.word	0x40011800
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4aad      	ldr	r2, [pc, #692]	@ (800cff8 <UART_SetConfig+0x900>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d176      	bne.n	800ce34 <UART_SetConfig+0x73c>
 800cd46:	4bad      	ldr	r3, [pc, #692]	@ (800cffc <UART_SetConfig+0x904>)
 800cd48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd4e:	2b28      	cmp	r3, #40	@ 0x28
 800cd50:	d86c      	bhi.n	800ce2c <UART_SetConfig+0x734>
 800cd52:	a201      	add	r2, pc, #4	@ (adr r2, 800cd58 <UART_SetConfig+0x660>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cdfd 	.word	0x0800cdfd
 800cd5c:	0800ce2d 	.word	0x0800ce2d
 800cd60:	0800ce2d 	.word	0x0800ce2d
 800cd64:	0800ce2d 	.word	0x0800ce2d
 800cd68:	0800ce2d 	.word	0x0800ce2d
 800cd6c:	0800ce2d 	.word	0x0800ce2d
 800cd70:	0800ce2d 	.word	0x0800ce2d
 800cd74:	0800ce2d 	.word	0x0800ce2d
 800cd78:	0800ce05 	.word	0x0800ce05
 800cd7c:	0800ce2d 	.word	0x0800ce2d
 800cd80:	0800ce2d 	.word	0x0800ce2d
 800cd84:	0800ce2d 	.word	0x0800ce2d
 800cd88:	0800ce2d 	.word	0x0800ce2d
 800cd8c:	0800ce2d 	.word	0x0800ce2d
 800cd90:	0800ce2d 	.word	0x0800ce2d
 800cd94:	0800ce2d 	.word	0x0800ce2d
 800cd98:	0800ce0d 	.word	0x0800ce0d
 800cd9c:	0800ce2d 	.word	0x0800ce2d
 800cda0:	0800ce2d 	.word	0x0800ce2d
 800cda4:	0800ce2d 	.word	0x0800ce2d
 800cda8:	0800ce2d 	.word	0x0800ce2d
 800cdac:	0800ce2d 	.word	0x0800ce2d
 800cdb0:	0800ce2d 	.word	0x0800ce2d
 800cdb4:	0800ce2d 	.word	0x0800ce2d
 800cdb8:	0800ce15 	.word	0x0800ce15
 800cdbc:	0800ce2d 	.word	0x0800ce2d
 800cdc0:	0800ce2d 	.word	0x0800ce2d
 800cdc4:	0800ce2d 	.word	0x0800ce2d
 800cdc8:	0800ce2d 	.word	0x0800ce2d
 800cdcc:	0800ce2d 	.word	0x0800ce2d
 800cdd0:	0800ce2d 	.word	0x0800ce2d
 800cdd4:	0800ce2d 	.word	0x0800ce2d
 800cdd8:	0800ce1d 	.word	0x0800ce1d
 800cddc:	0800ce2d 	.word	0x0800ce2d
 800cde0:	0800ce2d 	.word	0x0800ce2d
 800cde4:	0800ce2d 	.word	0x0800ce2d
 800cde8:	0800ce2d 	.word	0x0800ce2d
 800cdec:	0800ce2d 	.word	0x0800ce2d
 800cdf0:	0800ce2d 	.word	0x0800ce2d
 800cdf4:	0800ce2d 	.word	0x0800ce2d
 800cdf8:	0800ce25 	.word	0x0800ce25
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce02:	e050      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce04:	2304      	movs	r3, #4
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0a:	e04c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce12:	e048      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce14:	2310      	movs	r3, #16
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1a:	e044      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce22:	e040      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce24:	2340      	movs	r3, #64	@ 0x40
 800ce26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2a:	e03c      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce2c:	2380      	movs	r3, #128	@ 0x80
 800ce2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce32:	e038      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a71      	ldr	r2, [pc, #452]	@ (800d000 <UART_SetConfig+0x908>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d130      	bne.n	800cea0 <UART_SetConfig+0x7a8>
 800ce3e:	4b6f      	ldr	r3, [pc, #444]	@ (800cffc <UART_SetConfig+0x904>)
 800ce40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d826      	bhi.n	800ce98 <UART_SetConfig+0x7a0>
 800ce4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce50 <UART_SetConfig+0x758>)
 800ce4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce50:	0800ce69 	.word	0x0800ce69
 800ce54:	0800ce71 	.word	0x0800ce71
 800ce58:	0800ce79 	.word	0x0800ce79
 800ce5c:	0800ce81 	.word	0x0800ce81
 800ce60:	0800ce89 	.word	0x0800ce89
 800ce64:	0800ce91 	.word	0x0800ce91
 800ce68:	2302      	movs	r3, #2
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6e:	e01a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce70:	2304      	movs	r3, #4
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce76:	e016      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce78:	2308      	movs	r3, #8
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7e:	e012      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce80:	2310      	movs	r3, #16
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce86:	e00e      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce88:	2320      	movs	r3, #32
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce8e:	e00a      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce90:	2340      	movs	r3, #64	@ 0x40
 800ce92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce96:	e006      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800ce98:	2380      	movs	r3, #128	@ 0x80
 800ce9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce9e:	e002      	b.n	800cea6 <UART_SetConfig+0x7ae>
 800cea0:	2380      	movs	r3, #128	@ 0x80
 800cea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a55      	ldr	r2, [pc, #340]	@ (800d000 <UART_SetConfig+0x908>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	f040 80f8 	bne.w	800d0a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ceb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ceb6:	2b20      	cmp	r3, #32
 800ceb8:	dc46      	bgt.n	800cf48 <UART_SetConfig+0x850>
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	db75      	blt.n	800cfaa <UART_SetConfig+0x8b2>
 800cebe:	3b02      	subs	r3, #2
 800cec0:	2b1e      	cmp	r3, #30
 800cec2:	d872      	bhi.n	800cfaa <UART_SetConfig+0x8b2>
 800cec4:	a201      	add	r2, pc, #4	@ (adr r2, 800cecc <UART_SetConfig+0x7d4>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800cf4f 	.word	0x0800cf4f
 800ced0:	0800cfab 	.word	0x0800cfab
 800ced4:	0800cf57 	.word	0x0800cf57
 800ced8:	0800cfab 	.word	0x0800cfab
 800cedc:	0800cfab 	.word	0x0800cfab
 800cee0:	0800cfab 	.word	0x0800cfab
 800cee4:	0800cf67 	.word	0x0800cf67
 800cee8:	0800cfab 	.word	0x0800cfab
 800ceec:	0800cfab 	.word	0x0800cfab
 800cef0:	0800cfab 	.word	0x0800cfab
 800cef4:	0800cfab 	.word	0x0800cfab
 800cef8:	0800cfab 	.word	0x0800cfab
 800cefc:	0800cfab 	.word	0x0800cfab
 800cf00:	0800cfab 	.word	0x0800cfab
 800cf04:	0800cf77 	.word	0x0800cf77
 800cf08:	0800cfab 	.word	0x0800cfab
 800cf0c:	0800cfab 	.word	0x0800cfab
 800cf10:	0800cfab 	.word	0x0800cfab
 800cf14:	0800cfab 	.word	0x0800cfab
 800cf18:	0800cfab 	.word	0x0800cfab
 800cf1c:	0800cfab 	.word	0x0800cfab
 800cf20:	0800cfab 	.word	0x0800cfab
 800cf24:	0800cfab 	.word	0x0800cfab
 800cf28:	0800cfab 	.word	0x0800cfab
 800cf2c:	0800cfab 	.word	0x0800cfab
 800cf30:	0800cfab 	.word	0x0800cfab
 800cf34:	0800cfab 	.word	0x0800cfab
 800cf38:	0800cfab 	.word	0x0800cfab
 800cf3c:	0800cfab 	.word	0x0800cfab
 800cf40:	0800cfab 	.word	0x0800cfab
 800cf44:	0800cf9d 	.word	0x0800cf9d
 800cf48:	2b40      	cmp	r3, #64	@ 0x40
 800cf4a:	d02a      	beq.n	800cfa2 <UART_SetConfig+0x8aa>
 800cf4c:	e02d      	b.n	800cfaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf4e:	f7fc f989 	bl	8009264 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf54:	e02f      	b.n	800cfb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fc f998 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf64:	e027      	b.n	800cfb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf66:	f107 0318 	add.w	r3, r7, #24
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fc fae4 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf74:	e01f      	b.n	800cfb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf76:	4b21      	ldr	r3, [pc, #132]	@ (800cffc <UART_SetConfig+0x904>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 0320 	and.w	r3, r3, #32
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf82:	4b1e      	ldr	r3, [pc, #120]	@ (800cffc <UART_SetConfig+0x904>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	08db      	lsrs	r3, r3, #3
 800cf88:	f003 0303 	and.w	r3, r3, #3
 800cf8c:	4a1d      	ldr	r2, [pc, #116]	@ (800d004 <UART_SetConfig+0x90c>)
 800cf8e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf94:	e00f      	b.n	800cfb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf96:	4b1b      	ldr	r3, [pc, #108]	@ (800d004 <UART_SetConfig+0x90c>)
 800cf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf9a:	e00c      	b.n	800cfb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	@ (800d008 <UART_SetConfig+0x910>)
 800cf9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa0:	e009      	b.n	800cfb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfa8:	e005      	b.n	800cfb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cfb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 81ee 	beq.w	800d39a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc2:	4a12      	ldr	r2, [pc, #72]	@ (800d00c <UART_SetConfig+0x914>)
 800cfc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfd0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4413      	add	r3, r2
 800cfdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d305      	bcc.n	800cfee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d910      	bls.n	800d010 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cff4:	e1d1      	b.n	800d39a <UART_SetConfig+0xca2>
 800cff6:	bf00      	nop
 800cff8:	40011c00 	.word	0x40011c00
 800cffc:	58024400 	.word	0x58024400
 800d000:	58000c00 	.word	0x58000c00
 800d004:	03d09000 	.word	0x03d09000
 800d008:	003d0900 	.word	0x003d0900
 800d00c:	0800f894 	.word	0x0800f894
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d012:	2200      	movs	r2, #0
 800d014:	60bb      	str	r3, [r7, #8]
 800d016:	60fa      	str	r2, [r7, #12]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01c:	4ac0      	ldr	r2, [pc, #768]	@ (800d320 <UART_SetConfig+0xc28>)
 800d01e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d022:	b29b      	uxth	r3, r3
 800d024:	2200      	movs	r2, #0
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	607a      	str	r2, [r7, #4]
 800d02a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d02e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d032:	f7f3 f96b 	bl	800030c <__aeabi_uldivmod>
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	4610      	mov	r0, r2
 800d03c:	4619      	mov	r1, r3
 800d03e:	f04f 0200 	mov.w	r2, #0
 800d042:	f04f 0300 	mov.w	r3, #0
 800d046:	020b      	lsls	r3, r1, #8
 800d048:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d04c:	0202      	lsls	r2, r0, #8
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	6849      	ldr	r1, [r1, #4]
 800d052:	0849      	lsrs	r1, r1, #1
 800d054:	2000      	movs	r0, #0
 800d056:	460c      	mov	r4, r1
 800d058:	4605      	mov	r5, r0
 800d05a:	eb12 0804 	adds.w	r8, r2, r4
 800d05e:	eb43 0905 	adc.w	r9, r3, r5
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	469a      	mov	sl, r3
 800d06a:	4693      	mov	fp, r2
 800d06c:	4652      	mov	r2, sl
 800d06e:	465b      	mov	r3, fp
 800d070:	4640      	mov	r0, r8
 800d072:	4649      	mov	r1, r9
 800d074:	f7f3 f94a 	bl	800030c <__aeabi_uldivmod>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4613      	mov	r3, r2
 800d07e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d086:	d308      	bcc.n	800d09a <UART_SetConfig+0x9a2>
 800d088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d08e:	d204      	bcs.n	800d09a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d096:	60da      	str	r2, [r3, #12]
 800d098:	e17f      	b.n	800d39a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0a0:	e17b      	b.n	800d39a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	69db      	ldr	r3, [r3, #28]
 800d0a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0aa:	f040 80bd 	bne.w	800d228 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d0ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0b2:	2b20      	cmp	r3, #32
 800d0b4:	dc48      	bgt.n	800d148 <UART_SetConfig+0xa50>
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	db7b      	blt.n	800d1b2 <UART_SetConfig+0xaba>
 800d0ba:	2b20      	cmp	r3, #32
 800d0bc:	d879      	bhi.n	800d1b2 <UART_SetConfig+0xaba>
 800d0be:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x9cc>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d14f 	.word	0x0800d14f
 800d0c8:	0800d157 	.word	0x0800d157
 800d0cc:	0800d1b3 	.word	0x0800d1b3
 800d0d0:	0800d1b3 	.word	0x0800d1b3
 800d0d4:	0800d15f 	.word	0x0800d15f
 800d0d8:	0800d1b3 	.word	0x0800d1b3
 800d0dc:	0800d1b3 	.word	0x0800d1b3
 800d0e0:	0800d1b3 	.word	0x0800d1b3
 800d0e4:	0800d16f 	.word	0x0800d16f
 800d0e8:	0800d1b3 	.word	0x0800d1b3
 800d0ec:	0800d1b3 	.word	0x0800d1b3
 800d0f0:	0800d1b3 	.word	0x0800d1b3
 800d0f4:	0800d1b3 	.word	0x0800d1b3
 800d0f8:	0800d1b3 	.word	0x0800d1b3
 800d0fc:	0800d1b3 	.word	0x0800d1b3
 800d100:	0800d1b3 	.word	0x0800d1b3
 800d104:	0800d17f 	.word	0x0800d17f
 800d108:	0800d1b3 	.word	0x0800d1b3
 800d10c:	0800d1b3 	.word	0x0800d1b3
 800d110:	0800d1b3 	.word	0x0800d1b3
 800d114:	0800d1b3 	.word	0x0800d1b3
 800d118:	0800d1b3 	.word	0x0800d1b3
 800d11c:	0800d1b3 	.word	0x0800d1b3
 800d120:	0800d1b3 	.word	0x0800d1b3
 800d124:	0800d1b3 	.word	0x0800d1b3
 800d128:	0800d1b3 	.word	0x0800d1b3
 800d12c:	0800d1b3 	.word	0x0800d1b3
 800d130:	0800d1b3 	.word	0x0800d1b3
 800d134:	0800d1b3 	.word	0x0800d1b3
 800d138:	0800d1b3 	.word	0x0800d1b3
 800d13c:	0800d1b3 	.word	0x0800d1b3
 800d140:	0800d1b3 	.word	0x0800d1b3
 800d144:	0800d1a5 	.word	0x0800d1a5
 800d148:	2b40      	cmp	r3, #64	@ 0x40
 800d14a:	d02e      	beq.n	800d1aa <UART_SetConfig+0xab2>
 800d14c:	e031      	b.n	800d1b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d14e:	f7fa f9eb 	bl	8007528 <HAL_RCC_GetPCLK1Freq>
 800d152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d154:	e033      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d156:	f7fa f9fd 	bl	8007554 <HAL_RCC_GetPCLK2Freq>
 800d15a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d15c:	e02f      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d162:	4618      	mov	r0, r3
 800d164:	f7fc f894 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16c:	e027      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d16e:	f107 0318 	add.w	r3, r7, #24
 800d172:	4618      	mov	r0, r3
 800d174:	f7fc f9e0 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d17c:	e01f      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d17e:	4b69      	ldr	r3, [pc, #420]	@ (800d324 <UART_SetConfig+0xc2c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d18a:	4b66      	ldr	r3, [pc, #408]	@ (800d324 <UART_SetConfig+0xc2c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	08db      	lsrs	r3, r3, #3
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	4a64      	ldr	r2, [pc, #400]	@ (800d328 <UART_SetConfig+0xc30>)
 800d196:	fa22 f303 	lsr.w	r3, r2, r3
 800d19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d19c:	e00f      	b.n	800d1be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d19e:	4b62      	ldr	r3, [pc, #392]	@ (800d328 <UART_SetConfig+0xc30>)
 800d1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a2:	e00c      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1a4:	4b61      	ldr	r3, [pc, #388]	@ (800d32c <UART_SetConfig+0xc34>)
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e009      	b.n	800d1be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1b0:	e005      	b.n	800d1be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 80ea 	beq.w	800d39a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ca:	4a55      	ldr	r2, [pc, #340]	@ (800d320 <UART_SetConfig+0xc28>)
 800d1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1d8:	005a      	lsls	r2, r3, #1
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	085b      	lsrs	r3, r3, #1
 800d1e0:	441a      	add	r2, r3
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ee:	2b0f      	cmp	r3, #15
 800d1f0:	d916      	bls.n	800d220 <UART_SetConfig+0xb28>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1f8:	d212      	bcs.n	800d220 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	f023 030f 	bic.w	r3, r3, #15
 800d202:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d206:	085b      	lsrs	r3, r3, #1
 800d208:	b29b      	uxth	r3, r3
 800d20a:	f003 0307 	and.w	r3, r3, #7
 800d20e:	b29a      	uxth	r2, r3
 800d210:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d212:	4313      	orrs	r3, r2
 800d214:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	e0bc      	b.n	800d39a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d226:	e0b8      	b.n	800d39a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d228:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d22c:	2b20      	cmp	r3, #32
 800d22e:	dc4b      	bgt.n	800d2c8 <UART_SetConfig+0xbd0>
 800d230:	2b00      	cmp	r3, #0
 800d232:	f2c0 8087 	blt.w	800d344 <UART_SetConfig+0xc4c>
 800d236:	2b20      	cmp	r3, #32
 800d238:	f200 8084 	bhi.w	800d344 <UART_SetConfig+0xc4c>
 800d23c:	a201      	add	r2, pc, #4	@ (adr r2, 800d244 <UART_SetConfig+0xb4c>)
 800d23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d242:	bf00      	nop
 800d244:	0800d2cf 	.word	0x0800d2cf
 800d248:	0800d2d7 	.word	0x0800d2d7
 800d24c:	0800d345 	.word	0x0800d345
 800d250:	0800d345 	.word	0x0800d345
 800d254:	0800d2df 	.word	0x0800d2df
 800d258:	0800d345 	.word	0x0800d345
 800d25c:	0800d345 	.word	0x0800d345
 800d260:	0800d345 	.word	0x0800d345
 800d264:	0800d2ef 	.word	0x0800d2ef
 800d268:	0800d345 	.word	0x0800d345
 800d26c:	0800d345 	.word	0x0800d345
 800d270:	0800d345 	.word	0x0800d345
 800d274:	0800d345 	.word	0x0800d345
 800d278:	0800d345 	.word	0x0800d345
 800d27c:	0800d345 	.word	0x0800d345
 800d280:	0800d345 	.word	0x0800d345
 800d284:	0800d2ff 	.word	0x0800d2ff
 800d288:	0800d345 	.word	0x0800d345
 800d28c:	0800d345 	.word	0x0800d345
 800d290:	0800d345 	.word	0x0800d345
 800d294:	0800d345 	.word	0x0800d345
 800d298:	0800d345 	.word	0x0800d345
 800d29c:	0800d345 	.word	0x0800d345
 800d2a0:	0800d345 	.word	0x0800d345
 800d2a4:	0800d345 	.word	0x0800d345
 800d2a8:	0800d345 	.word	0x0800d345
 800d2ac:	0800d345 	.word	0x0800d345
 800d2b0:	0800d345 	.word	0x0800d345
 800d2b4:	0800d345 	.word	0x0800d345
 800d2b8:	0800d345 	.word	0x0800d345
 800d2bc:	0800d345 	.word	0x0800d345
 800d2c0:	0800d345 	.word	0x0800d345
 800d2c4:	0800d337 	.word	0x0800d337
 800d2c8:	2b40      	cmp	r3, #64	@ 0x40
 800d2ca:	d037      	beq.n	800d33c <UART_SetConfig+0xc44>
 800d2cc:	e03a      	b.n	800d344 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ce:	f7fa f92b 	bl	8007528 <HAL_RCC_GetPCLK1Freq>
 800d2d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2d4:	e03c      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2d6:	f7fa f93d 	bl	8007554 <HAL_RCC_GetPCLK2Freq>
 800d2da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2dc:	e038      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fb ffd4 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ec:	e030      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2ee:	f107 0318 	add.w	r3, r7, #24
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fc f920 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2fc:	e028      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2fe:	4b09      	ldr	r3, [pc, #36]	@ (800d324 <UART_SetConfig+0xc2c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d012      	beq.n	800d330 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d30a:	4b06      	ldr	r3, [pc, #24]	@ (800d324 <UART_SetConfig+0xc2c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	08db      	lsrs	r3, r3, #3
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	4a04      	ldr	r2, [pc, #16]	@ (800d328 <UART_SetConfig+0xc30>)
 800d316:	fa22 f303 	lsr.w	r3, r2, r3
 800d31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d31c:	e018      	b.n	800d350 <UART_SetConfig+0xc58>
 800d31e:	bf00      	nop
 800d320:	0800f894 	.word	0x0800f894
 800d324:	58024400 	.word	0x58024400
 800d328:	03d09000 	.word	0x03d09000
 800d32c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d330:	4b24      	ldr	r3, [pc, #144]	@ (800d3c4 <UART_SetConfig+0xccc>)
 800d332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d334:	e00c      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d336:	4b24      	ldr	r3, [pc, #144]	@ (800d3c8 <UART_SetConfig+0xcd0>)
 800d338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33a:	e009      	b.n	800d350 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d33c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d342:	e005      	b.n	800d350 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d344:	2300      	movs	r3, #0
 800d346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d34e:	bf00      	nop
    }

    if (pclk != 0U)
 800d350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d021      	beq.n	800d39a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d35a:	4a1c      	ldr	r2, [pc, #112]	@ (800d3cc <UART_SetConfig+0xcd4>)
 800d35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d360:	461a      	mov	r2, r3
 800d362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d364:	fbb3 f2f2 	udiv	r2, r3, r2
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	085b      	lsrs	r3, r3, #1
 800d36e:	441a      	add	r2, r3
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	fbb2 f3f3 	udiv	r3, r2, r3
 800d378:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	2b0f      	cmp	r3, #15
 800d37e:	d909      	bls.n	800d394 <UART_SetConfig+0xc9c>
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d386:	d205      	bcs.n	800d394 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	60da      	str	r2, [r3, #12]
 800d392:	e002      	b.n	800d39a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3b6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3748      	adds	r7, #72	@ 0x48
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3c4:	03d09000 	.word	0x03d09000
 800d3c8:	003d0900 	.word	0x003d0900
 800d3cc:	0800f894 	.word	0x0800f894

0800d3d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3dc:	f003 0308 	and.w	r3, r3, #8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00a      	beq.n	800d41c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d420:	f003 0302 	and.w	r3, r3, #2
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00a      	beq.n	800d43e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d442:	f003 0304 	and.w	r3, r3, #4
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00a      	beq.n	800d460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	430a      	orrs	r2, r1
 800d45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d464:	f003 0310 	and.w	r3, r3, #16
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00a      	beq.n	800d482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	430a      	orrs	r2, r1
 800d480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d486:	f003 0320 	and.w	r3, r3, #32
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d01a      	beq.n	800d4e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4ce:	d10a      	bne.n	800d4e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	430a      	orrs	r2, r1
 800d506:	605a      	str	r2, [r3, #4]
  }
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b098      	sub	sp, #96	@ 0x60
 800d518:	af02      	add	r7, sp, #8
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d524:	f7f4 f9ce 	bl	80018c4 <HAL_GetTick>
 800d528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f003 0308 	and.w	r3, r3, #8
 800d534:	2b08      	cmp	r3, #8
 800d536:	d12f      	bne.n	800d598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d540:	2200      	movs	r2, #0
 800d542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f88e 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d022      	beq.n	800d598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55a:	e853 3f00 	ldrex	r3, [r3]
 800d55e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d566:	653b      	str	r3, [r7, #80]	@ 0x50
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d570:	647b      	str	r3, [r7, #68]	@ 0x44
 800d572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d578:	e841 2300 	strex	r3, r2, [r1]
 800d57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e6      	bne.n	800d552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2220      	movs	r2, #32
 800d588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d594:	2303      	movs	r3, #3
 800d596:	e063      	b.n	800d660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f003 0304 	and.w	r3, r3, #4
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d149      	bne.n	800d63a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f857 	bl	800d668 <UART_WaitOnFlagUntilTimeout>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d03c      	beq.n	800d63a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800d5ce:	6a3b      	ldr	r3, [r7, #32]
 800d5d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e6:	e841 2300 	strex	r3, r2, [r1]
 800d5ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e6      	bne.n	800d5c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	e853 3f00 	ldrex	r3, [r3]
 800d600:	60fb      	str	r3, [r7, #12]
   return(result);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f023 0301 	bic.w	r3, r3, #1
 800d608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3308      	adds	r3, #8
 800d610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d612:	61fa      	str	r2, [r7, #28]
 800d614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d616:	69b9      	ldr	r1, [r7, #24]
 800d618:	69fa      	ldr	r2, [r7, #28]
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	617b      	str	r3, [r7, #20]
   return(result);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1e5      	bne.n	800d5f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2220      	movs	r2, #32
 800d62a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e012      	b.n	800d660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2220      	movs	r2, #32
 800d646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3758      	adds	r7, #88	@ 0x58
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	4613      	mov	r3, r2
 800d676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d678:	e04f      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d04b      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d682:	f7f4 f91f 	bl	80018c4 <HAL_GetTick>
 800d686:	4602      	mov	r2, r0
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d302      	bcc.n	800d698 <UART_WaitOnFlagUntilTimeout+0x30>
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e04e      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0304 	and.w	r3, r3, #4
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d037      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b80      	cmp	r3, #128	@ 0x80
 800d6ae:	d034      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b40      	cmp	r3, #64	@ 0x40
 800d6b4:	d031      	beq.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	f003 0308 	and.w	r3, r3, #8
 800d6c0:	2b08      	cmp	r3, #8
 800d6c2:	d110      	bne.n	800d6e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2208      	movs	r2, #8
 800d6ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f839 	bl	800d744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2208      	movs	r2, #8
 800d6d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e029      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	69db      	ldr	r3, [r3, #28]
 800d6ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6f4:	d111      	bne.n	800d71a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 f81f 	bl	800d744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2220      	movs	r2, #32
 800d70a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e00f      	b.n	800d73a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69da      	ldr	r2, [r3, #28]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4013      	ands	r3, r2
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	429a      	cmp	r2, r3
 800d728:	bf0c      	ite	eq
 800d72a:	2301      	moveq	r3, #1
 800d72c:	2300      	movne	r3, #0
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	461a      	mov	r2, r3
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	429a      	cmp	r2, r3
 800d736:	d0a0      	beq.n	800d67a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d744:	b480      	push	{r7}
 800d746:	b095      	sub	sp, #84	@ 0x54
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d754:	e853 3f00 	ldrex	r3, [r3]
 800d758:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d76a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d76c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d772:	e841 2300 	strex	r3, r2, [r1]
 800d776:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1e6      	bne.n	800d74c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3308      	adds	r3, #8
 800d784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	e853 3f00 	ldrex	r3, [r3]
 800d78c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d78e:	69fa      	ldr	r2, [r7, #28]
 800d790:	4b1e      	ldr	r3, [pc, #120]	@ (800d80c <UART_EndRxTransfer+0xc8>)
 800d792:	4013      	ands	r3, r2
 800d794:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3308      	adds	r3, #8
 800d79c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d79e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7a6:	e841 2300 	strex	r3, r2, [r1]
 800d7aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e5      	bne.n	800d77e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d118      	bne.n	800d7ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	e853 3f00 	ldrex	r3, [r3]
 800d7c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f023 0310 	bic.w	r3, r3, #16
 800d7ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d8:	61bb      	str	r3, [r7, #24]
 800d7da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7dc:	6979      	ldr	r1, [r7, #20]
 800d7de:	69ba      	ldr	r2, [r7, #24]
 800d7e0:	e841 2300 	strex	r3, r2, [r1]
 800d7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1e6      	bne.n	800d7ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2220      	movs	r2, #32
 800d7f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d800:	bf00      	nop
 800d802:	3754      	adds	r7, #84	@ 0x54
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	effffffe 	.word	0xeffffffe

0800d810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d81c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f7fe ff50 	bl	800c6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d82c:	bf00      	nop
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	e853 3f00 	ldrex	r3, [r3]
 800d848:	60bb      	str	r3, [r7, #8]
   return(result);
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	461a      	mov	r2, r3
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	61bb      	str	r3, [r7, #24]
 800d85c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85e:	6979      	ldr	r1, [r7, #20]
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	e841 2300 	strex	r3, r2, [r1]
 800d866:	613b      	str	r3, [r7, #16]
   return(result);
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1e6      	bne.n	800d83c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2220      	movs	r2, #32
 800d872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7fe ff1b 	bl	800c6b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d882:	bf00      	nop
 800d884:	3720      	adds	r7, #32
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d88a:	b480      	push	{r7}
 800d88c:	b083      	sub	sp, #12
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d892:	bf00      	nop
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8a6:	bf00      	nop
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b083      	sub	sp, #12
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8ba:	bf00      	nop
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b085      	sub	sp, #20
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <HAL_UARTEx_DisableFifoMode+0x16>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e027      	b.n	800d92c <HAL_UARTEx_DisableFifoMode+0x66>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2224      	movs	r2, #36	@ 0x24
 800d8e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 0201 	bic.w	r2, r2, #1
 800d902:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d90a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3714      	adds	r7, #20
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d101      	bne.n	800d950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d94c:	2302      	movs	r3, #2
 800d94e:	e02d      	b.n	800d9ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2224      	movs	r2, #36	@ 0x24
 800d95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0201 	bic.w	r2, r2, #1
 800d976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	430a      	orrs	r2, r1
 800d98a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f84f 	bl	800da30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2220      	movs	r2, #32
 800d99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d101      	bne.n	800d9cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	e02d      	b.n	800da28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2224      	movs	r2, #36	@ 0x24
 800d9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f022 0201 	bic.w	r2, r2, #1
 800d9f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f811 	bl	800da30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2220      	movs	r2, #32
 800da1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d108      	bne.n	800da52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da50:	e031      	b.n	800dab6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da52:	2310      	movs	r3, #16
 800da54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da56:	2310      	movs	r3, #16
 800da58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	0e5b      	lsrs	r3, r3, #25
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0307 	and.w	r3, r3, #7
 800da68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	0f5b      	lsrs	r3, r3, #29
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da7a:	7bbb      	ldrb	r3, [r7, #14]
 800da7c:	7b3a      	ldrb	r2, [r7, #12]
 800da7e:	4911      	ldr	r1, [pc, #68]	@ (800dac4 <UARTEx_SetNbDataToProcess+0x94>)
 800da80:	5c8a      	ldrb	r2, [r1, r2]
 800da82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da86:	7b3a      	ldrb	r2, [r7, #12]
 800da88:	490f      	ldr	r1, [pc, #60]	@ (800dac8 <UARTEx_SetNbDataToProcess+0x98>)
 800da8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800da90:	b29a      	uxth	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	7b7a      	ldrb	r2, [r7, #13]
 800da9c:	4909      	ldr	r1, [pc, #36]	@ (800dac4 <UARTEx_SetNbDataToProcess+0x94>)
 800da9e:	5c8a      	ldrb	r2, [r1, r2]
 800daa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800daa4:	7b7a      	ldrb	r2, [r7, #13]
 800daa6:	4908      	ldr	r1, [pc, #32]	@ (800dac8 <UARTEx_SetNbDataToProcess+0x98>)
 800daa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dab6:	bf00      	nop
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	0800f8ac 	.word	0x0800f8ac
 800dac8:	0800f8b4 	.word	0x0800f8b4

0800dacc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dacc:	b084      	sub	sp, #16
 800dace:	b480      	push	{r7}
 800dad0:	b085      	sub	sp, #20
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	f107 001c 	add.w	r0, r7, #28
 800dada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dae2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dae4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dae6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800daea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800daec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800daee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800daf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800daf2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	4b07      	ldr	r3, [pc, #28]	@ (800db1c <SDMMC_Init+0x50>)
 800db00:	4013      	ands	r3, r2
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	431a      	orrs	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	b004      	add	sp, #16
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	ffc02c00 	.word	0xffc02c00

0800db20 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800db2e:	4618      	mov	r0, r3
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800db4e:	2300      	movs	r3, #0
}
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f043 0203 	orr.w	r2, r3, #3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800db7e:	b480      	push	{r7}
 800db80:	b083      	sub	sp, #12
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f003 0303 	and.w	r3, r3, #3
}
 800db8e:	4618      	mov	r0, r3
 800db90:	370c      	adds	r7, #12
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
	...

0800db9c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dbc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dbc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68da      	ldr	r2, [r3, #12]
 800dbd2:	4b06      	ldr	r3, [pc, #24]	@ (800dbec <SDMMC_SendCommand+0x50>)
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dbde:	2300      	movs	r3, #0
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	fffee0c0 	.word	0xfffee0c0

0800dbf0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	b2db      	uxtb	r3, r3
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3314      	adds	r3, #20
 800dc18:	461a      	mov	r2, r3
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc56:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800dc5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800dc62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	431a      	orrs	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800dc7a:	2300      	movs	r3, #0

}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dc96:	2310      	movs	r3, #16
 800dc98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca0:	2300      	movs	r3, #0
 800dca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcaa:	f107 0308 	add.w	r3, r7, #8
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff ff73 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dcb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcba:	2110      	movs	r1, #16
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fa5f 	bl	800e180 <SDMMC_GetCmdResp1>
 800dcc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcc4:	69fb      	ldr	r3, [r7, #28]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3720      	adds	r7, #32
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b088      	sub	sp, #32
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dcdc:	2311      	movs	r3, #17
 800dcde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dce6:	2300      	movs	r3, #0
 800dce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcf0:	f107 0308 	add.w	r3, r7, #8
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff ff50 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dcfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd00:	2111      	movs	r1, #17
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fa3c 	bl	800e180 <SDMMC_GetCmdResp1>
 800dd08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd0a:	69fb      	ldr	r3, [r7, #28]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3720      	adds	r7, #32
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dd22:	2312      	movs	r3, #18
 800dd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd36:	f107 0308 	add.w	r3, r7, #8
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff ff2d 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dd42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd46:	2112      	movs	r1, #18
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fa19 	bl	800e180 <SDMMC_GetCmdResp1>
 800dd4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd50:	69fb      	ldr	r3, [r7, #28]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dd68:	2318      	movs	r3, #24
 800dd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd72:	2300      	movs	r3, #0
 800dd74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff ff0a 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dd88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd8c:	2118      	movs	r1, #24
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f9f6 	bl	800e180 <SDMMC_GetCmdResp1>
 800dd94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd96:	69fb      	ldr	r3, [r7, #28]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3720      	adds	r7, #32
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ddae:	2319      	movs	r3, #25
 800ddb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddc2:	f107 0308 	add.w	r3, r7, #8
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff fee7 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ddce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddd2:	2119      	movs	r1, #25
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f9d3 	bl	800e180 <SDMMC_GetCmdResp1>
 800ddda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dddc:	69fb      	ldr	r3, [r7, #28]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3720      	adds	r7, #32
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
	...

0800dde8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b088      	sub	sp, #32
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ddf4:	230c      	movs	r3, #12
 800ddf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddfe:	2300      	movs	r3, #0
 800de00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de06:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de20:	f107 0308 	add.w	r3, r7, #8
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff feb8 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800de2c:	4a0b      	ldr	r2, [pc, #44]	@ (800de5c <SDMMC_CmdStopTransfer+0x74>)
 800de2e:	210c      	movs	r1, #12
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 f9a5 	bl	800e180 <SDMMC_GetCmdResp1>
 800de36:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de4a:	d101      	bne.n	800de50 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800de4c:	2300      	movs	r3, #0
 800de4e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800de50:	69fb      	ldr	r3, [r7, #28]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3720      	adds	r7, #32
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	05f5e100 	.word	0x05f5e100

0800de60 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800de6e:	2307      	movs	r3, #7
 800de70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fe87 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800de8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de92:	2107      	movs	r1, #7
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f973 	bl	800e180 <SDMMC_GetCmdResp1>
 800de9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de9c:	69fb      	ldr	r3, [r7, #28]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3720      	adds	r7, #32
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b088      	sub	sp, #32
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800deb6:	2300      	movs	r3, #0
 800deb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deba:	2300      	movs	r3, #0
 800debc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800debe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff fe66 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fb97 	bl	800e604 <SDMMC_GetCmdError>
 800ded6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded8:	69fb      	ldr	r3, [r7, #28]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3720      	adds	r7, #32
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b088      	sub	sp, #32
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800deea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800deee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800def0:	2308      	movs	r3, #8
 800def2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800def4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800def8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800defa:	2300      	movs	r3, #0
 800defc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800defe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df04:	f107 0308 	add.w	r3, r7, #8
 800df08:	4619      	mov	r1, r3
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff fe46 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fb29 	bl	800e568 <SDMMC_GetCmdResp7>
 800df16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df18:	69fb      	ldr	r3, [r7, #28]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3720      	adds	r7, #32
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b088      	sub	sp, #32
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800df30:	2337      	movs	r3, #55	@ 0x37
 800df32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df44:	f107 0308 	add.w	r3, r7, #8
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7ff fe26 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800df50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df54:	2137      	movs	r1, #55	@ 0x37
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 f912 	bl	800e180 <SDMMC_GetCmdResp1>
 800df5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df5e:	69fb      	ldr	r3, [r7, #28]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3720      	adds	r7, #32
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800df76:	2329      	movs	r3, #41	@ 0x29
 800df78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df80:	2300      	movs	r3, #0
 800df82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df8a:	f107 0308 	add.w	r3, r7, #8
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff fe03 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fa2e 	bl	800e3f8 <SDMMC_GetCmdResp3>
 800df9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df9e:	69fb      	ldr	r3, [r7, #28]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dfb6:	2306      	movs	r3, #6
 800dfb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfca:	f107 0308 	add.w	r3, r7, #8
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff fde3 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dfd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dfda:	2106      	movs	r1, #6
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8cf 	bl	800e180 <SDMMC_GetCmdResp1>
 800dfe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3720      	adds	r7, #32
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b088      	sub	sp, #32
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dffa:	2333      	movs	r3, #51	@ 0x33
 800dffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e004:	2300      	movs	r3, #0
 800e006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e00c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e00e:	f107 0308 	add.w	r3, r7, #8
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7ff fdc1 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e01a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e01e:	2133      	movs	r1, #51	@ 0x33
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f8ad 	bl	800e180 <SDMMC_GetCmdResp1>
 800e026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e028:	69fb      	ldr	r3, [r7, #28]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3720      	adds	r7, #32
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b088      	sub	sp, #32
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e03e:	2302      	movs	r3, #2
 800e040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e042:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e04c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e050:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e052:	f107 0308 	add.w	r3, r7, #8
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7ff fd9f 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f980 	bl	800e364 <SDMMC_GetCmdResp2>
 800e064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e066:	69fb      	ldr	r3, [r7, #28]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b088      	sub	sp, #32
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e07e:	2309      	movs	r3, #9
 800e080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e082:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e088:	2300      	movs	r3, #0
 800e08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e08c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e090:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e092:	f107 0308 	add.w	r3, r7, #8
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff fd7f 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f960 	bl	800e364 <SDMMC_GetCmdResp2>
 800e0a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3720      	adds	r7, #32
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e0be:	2303      	movs	r3, #3
 800e0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e0d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0d2:	f107 0308 	add.w	r3, r7, #8
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff fd5f 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	2103      	movs	r1, #3
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f9c8 	bl	800e478 <SDMMC_GetCmdResp6>
 800e0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3720      	adds	r7, #32
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e102:	230d      	movs	r3, #13
 800e104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e10a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e114:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e116:	f107 0308 	add.w	r3, r7, #8
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff fd3d 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e122:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e126:	210d      	movs	r1, #13
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 f829 	bl	800e180 <SDMMC_GetCmdResp1>
 800e12e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e130:	69fb      	ldr	r3, [r7, #28]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3720      	adds	r7, #32
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b088      	sub	sp, #32
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e142:	2300      	movs	r3, #0
 800e144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e146:	230d      	movs	r3, #13
 800e148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e14a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e14e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e15a:	f107 0308 	add.w	r3, r7, #8
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fd1b 	bl	800db9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e16a:	210d      	movs	r1, #13
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 f807 	bl	800e180 <SDMMC_GetCmdResp1>
 800e172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e174:	69fb      	ldr	r3, [r7, #28]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3720      	adds	r7, #32
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
	...

0800e180 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	460b      	mov	r3, r1
 800e18a:	607a      	str	r2, [r7, #4]
 800e18c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e18e:	4b70      	ldr	r3, [pc, #448]	@ (800e350 <SDMMC_GetCmdResp1+0x1d0>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a70      	ldr	r2, [pc, #448]	@ (800e354 <SDMMC_GetCmdResp1+0x1d4>)
 800e194:	fba2 2303 	umull	r2, r3, r2, r3
 800e198:	0a5a      	lsrs	r2, r3, #9
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	fb02 f303 	mul.w	r3, r2, r3
 800e1a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	1e5a      	subs	r2, r3, #1
 800e1a6:	61fa      	str	r2, [r7, #28]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d102      	bne.n	800e1b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1b0:	e0c9      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e1b8:	69ba      	ldr	r2, [r7, #24]
 800e1ba:	4b67      	ldr	r3, [pc, #412]	@ (800e358 <SDMMC_GetCmdResp1+0x1d8>)
 800e1bc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d0ef      	beq.n	800e1a2 <SDMMC_GetCmdResp1+0x22>
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1ea      	bne.n	800e1a2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d0:	f003 0304 	and.w	r3, r3, #4
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d004      	beq.n	800e1e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2204      	movs	r2, #4
 800e1dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1de:	2304      	movs	r3, #4
 800e1e0:	e0b1      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d004      	beq.n	800e1f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e0a6      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4a58      	ldr	r2, [pc, #352]	@ (800e35c <SDMMC_GetCmdResp1+0x1dc>)
 800e1fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff fcf6 	bl	800dbf0 <SDMMC_GetCommandResponse>
 800e204:	4603      	mov	r3, r0
 800e206:	461a      	mov	r2, r3
 800e208:	7afb      	ldrb	r3, [r7, #11]
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d001      	beq.n	800e212 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e20e:	2301      	movs	r3, #1
 800e210:	e099      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e212:	2100      	movs	r1, #0
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff fcf8 	bl	800dc0a <SDMMC_GetResponse>
 800e21a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	4b50      	ldr	r3, [pc, #320]	@ (800e360 <SDMMC_GetCmdResp1+0x1e0>)
 800e220:	4013      	ands	r3, r2
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e226:	2300      	movs	r3, #0
 800e228:	e08d      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	da02      	bge.n	800e236 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e230:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e234:	e087      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e240:	2340      	movs	r3, #64	@ 0x40
 800e242:	e080      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e24e:	2380      	movs	r3, #128	@ 0x80
 800e250:	e079      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e25c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e260:	e071      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e26c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e270:	e069      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e27c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e280:	e061      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e28c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e290:	e059      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e29c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e2a0:	e051      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d002      	beq.n	800e2b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e2b0:	e049      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e2bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e2c0:	e041      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e2cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2d0:	e039      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e2dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e2e0:	e031      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e2ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e2f0:	e029      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e2fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e300:	e021      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e30c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e310:	e019      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e31c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e320:	e011      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e32c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e330:	e009      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f003 0308 	and.w	r3, r3, #8
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e33c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e340:	e001      	b.n	800e346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e346:	4618      	mov	r0, r3
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	24000000 	.word	0x24000000
 800e354:	10624dd3 	.word	0x10624dd3
 800e358:	00200045 	.word	0x00200045
 800e35c:	002000c5 	.word	0x002000c5
 800e360:	fdffe008 	.word	0xfdffe008

0800e364 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e36c:	4b1f      	ldr	r3, [pc, #124]	@ (800e3ec <SDMMC_GetCmdResp2+0x88>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a1f      	ldr	r2, [pc, #124]	@ (800e3f0 <SDMMC_GetCmdResp2+0x8c>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	0a5b      	lsrs	r3, r3, #9
 800e378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e37c:	fb02 f303 	mul.w	r3, r2, r3
 800e380:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	1e5a      	subs	r2, r3, #1
 800e386:	60fa      	str	r2, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e38c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e390:	e026      	b.n	800e3e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e396:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0ef      	beq.n	800e382 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1ea      	bne.n	800e382 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3b0:	f003 0304 	and.w	r3, r3, #4
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2204      	movs	r2, #4
 800e3bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3be:	2304      	movs	r3, #4
 800e3c0:	e00e      	b.n	800e3e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d004      	beq.n	800e3d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e003      	b.n	800e3e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a06      	ldr	r2, [pc, #24]	@ (800e3f4 <SDMMC_GetCmdResp2+0x90>)
 800e3dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	24000000 	.word	0x24000000
 800e3f0:	10624dd3 	.word	0x10624dd3
 800e3f4:	002000c5 	.word	0x002000c5

0800e3f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e400:	4b1a      	ldr	r3, [pc, #104]	@ (800e46c <SDMMC_GetCmdResp3+0x74>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a1a      	ldr	r2, [pc, #104]	@ (800e470 <SDMMC_GetCmdResp3+0x78>)
 800e406:	fba2 2303 	umull	r2, r3, r2, r3
 800e40a:	0a5b      	lsrs	r3, r3, #9
 800e40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e410:	fb02 f303 	mul.w	r3, r2, r3
 800e414:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	60fa      	str	r2, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d102      	bne.n	800e426 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e424:	e01b      	b.n	800e45e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e42a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0ef      	beq.n	800e416 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1ea      	bne.n	800e416 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e444:	f003 0304 	and.w	r3, r3, #4
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d004      	beq.n	800e456 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2204      	movs	r2, #4
 800e450:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e452:	2304      	movs	r3, #4
 800e454:	e003      	b.n	800e45e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	4a06      	ldr	r2, [pc, #24]	@ (800e474 <SDMMC_GetCmdResp3+0x7c>)
 800e45a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3714      	adds	r7, #20
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	24000000 	.word	0x24000000
 800e470:	10624dd3 	.word	0x10624dd3
 800e474:	002000c5 	.word	0x002000c5

0800e478 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	460b      	mov	r3, r1
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e486:	4b35      	ldr	r3, [pc, #212]	@ (800e55c <SDMMC_GetCmdResp6+0xe4>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a35      	ldr	r2, [pc, #212]	@ (800e560 <SDMMC_GetCmdResp6+0xe8>)
 800e48c:	fba2 2303 	umull	r2, r3, r2, r3
 800e490:	0a5b      	lsrs	r3, r3, #9
 800e492:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e496:	fb02 f303 	mul.w	r3, r2, r3
 800e49a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	1e5a      	subs	r2, r3, #1
 800e4a0:	61fa      	str	r2, [r7, #28]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d102      	bne.n	800e4ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e4aa:	e052      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4b0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d0ef      	beq.n	800e49c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1ea      	bne.n	800e49c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ca:	f003 0304 	and.w	r3, r3, #4
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d004      	beq.n	800e4dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4d8:	2304      	movs	r3, #4
 800e4da:	e03a      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e02f      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e4f2:	68f8      	ldr	r0, [r7, #12]
 800e4f4:	f7ff fb7c 	bl	800dbf0 <SDMMC_GetCommandResponse>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	7afb      	ldrb	r3, [r7, #11]
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d001      	beq.n	800e506 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e502:	2301      	movs	r3, #1
 800e504:	e025      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	4a16      	ldr	r2, [pc, #88]	@ (800e564 <SDMMC_GetCmdResp6+0xec>)
 800e50a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e50c:	2100      	movs	r1, #0
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff fb7b 	bl	800dc0a <SDMMC_GetResponse>
 800e514:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d106      	bne.n	800e52e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	0c1b      	lsrs	r3, r3, #16
 800e524:	b29a      	uxth	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e011      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e53c:	e009      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e544:	2b00      	cmp	r3, #0
 800e546:	d002      	beq.n	800e54e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e54c:	e001      	b.n	800e552 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e54e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e552:	4618      	mov	r0, r3
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	24000000 	.word	0x24000000
 800e560:	10624dd3 	.word	0x10624dd3
 800e564:	002000c5 	.word	0x002000c5

0800e568 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e570:	4b22      	ldr	r3, [pc, #136]	@ (800e5fc <SDMMC_GetCmdResp7+0x94>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a22      	ldr	r2, [pc, #136]	@ (800e600 <SDMMC_GetCmdResp7+0x98>)
 800e576:	fba2 2303 	umull	r2, r3, r2, r3
 800e57a:	0a5b      	lsrs	r3, r3, #9
 800e57c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e580:	fb02 f303 	mul.w	r3, r2, r3
 800e584:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	1e5a      	subs	r2, r3, #1
 800e58a:	60fa      	str	r2, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d102      	bne.n	800e596 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e590:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e594:	e02c      	b.n	800e5f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e59a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0ef      	beq.n	800e586 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1ea      	bne.n	800e586 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d004      	beq.n	800e5c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2204      	movs	r2, #4
 800e5c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5c2:	2304      	movs	r3, #4
 800e5c4:	e014      	b.n	800e5f0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e009      	b.n	800e5f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2240      	movs	r2, #64	@ 0x40
 800e5ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5ee:	2300      	movs	r3, #0

}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	24000000 	.word	0x24000000
 800e600:	10624dd3 	.word	0x10624dd3

0800e604 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e60c:	4b11      	ldr	r3, [pc, #68]	@ (800e654 <SDMMC_GetCmdError+0x50>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a11      	ldr	r2, [pc, #68]	@ (800e658 <SDMMC_GetCmdError+0x54>)
 800e612:	fba2 2303 	umull	r2, r3, r2, r3
 800e616:	0a5b      	lsrs	r3, r3, #9
 800e618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e61c:	fb02 f303 	mul.w	r3, r2, r3
 800e620:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	1e5a      	subs	r2, r3, #1
 800e626:	60fa      	str	r2, [r7, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d102      	bne.n	800e632 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e62c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e630:	e009      	b.n	800e646 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0f1      	beq.n	800e622 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a06      	ldr	r2, [pc, #24]	@ (800e65c <SDMMC_GetCmdError+0x58>)
 800e642:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	24000000 	.word	0x24000000
 800e658:	10624dd3 	.word	0x10624dd3
 800e65c:	002000c5 	.word	0x002000c5

0800e660 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e664:	4904      	ldr	r1, [pc, #16]	@ (800e678 <MX_FATFS_Init+0x18>)
 800e666:	4805      	ldr	r0, [pc, #20]	@ (800e67c <MX_FATFS_Init+0x1c>)
 800e668:	f000 fa8e 	bl	800eb88 <FATFS_LinkDriver>
 800e66c:	4603      	mov	r3, r0
 800e66e:	461a      	mov	r2, r3
 800e670:	4b03      	ldr	r3, [pc, #12]	@ (800e680 <MX_FATFS_Init+0x20>)
 800e672:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e674:	bf00      	nop
 800e676:	bd80      	pop	{r7, pc}
 800e678:	24000440 	.word	0x24000440
 800e67c:	0800f8bc 	.word	0x0800f8bc
 800e680:	2400043c 	.word	0x2400043c

0800e684 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e68a:	2300      	movs	r3, #0
 800e68c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e68e:	f000 f885 	bl	800e79c <BSP_SD_IsDetected>
 800e692:	4603      	mov	r3, r0
 800e694:	2b01      	cmp	r3, #1
 800e696:	d001      	beq.n	800e69c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e698:	2302      	movs	r3, #2
 800e69a:	e012      	b.n	800e6c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e69c:	480b      	ldr	r0, [pc, #44]	@ (800e6cc <BSP_SD_Init+0x48>)
 800e69e:	f7fb fdb3 	bl	800a208 <HAL_SD_Init>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d109      	bne.n	800e6c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e6ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e6b0:	4806      	ldr	r0, [pc, #24]	@ (800e6cc <BSP_SD_Init+0x48>)
 800e6b2:	f7fc fc69 	bl	800af88 <HAL_SD_ConfigWideBusOperation>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	24000194 	.word	0x24000194

0800e6d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	68f9      	ldr	r1, [r7, #12]
 800e6e6:	4806      	ldr	r0, [pc, #24]	@ (800e700 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e6e8:	f7fb feae 	bl	800a448 <HAL_SD_ReadBlocks_DMA>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	24000194 	.word	0x24000194

0800e704 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	68f9      	ldr	r1, [r7, #12]
 800e71a:	4806      	ldr	r0, [pc, #24]	@ (800e734 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e71c:	f7fb ff3c 	bl	800a598 <HAL_SD_WriteBlocks_DMA>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	24000194 	.word	0x24000194

0800e738 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e73c:	4805      	ldr	r0, [pc, #20]	@ (800e754 <BSP_SD_GetCardState+0x1c>)
 800e73e:	f7fc fd35 	bl	800b1ac <HAL_SD_GetCardState>
 800e742:	4603      	mov	r3, r0
 800e744:	2b04      	cmp	r3, #4
 800e746:	bf14      	ite	ne
 800e748:	2301      	movne	r3, #1
 800e74a:	2300      	moveq	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
}
 800e74e:	4618      	mov	r0, r3
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	24000194 	.word	0x24000194

0800e758 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	4803      	ldr	r0, [pc, #12]	@ (800e770 <BSP_SD_GetCardInfo+0x18>)
 800e764:	f7fc fbe4 	bl	800af30 <HAL_SD_GetCardInfo>
}
 800e768:	bf00      	nop
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	24000194 	.word	0x24000194

0800e774 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e77c:	f000 f9a0 	bl	800eac0 <BSP_SD_WriteCpltCallback>
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e790:	f000 f9a2 	bl	800ead8 <BSP_SD_ReadCpltCallback>
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e7a6:	f000 f80b 	bl	800e7c0 <BSP_PlatformIsDetected>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	b2db      	uxtb	r3, r3
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	4806      	ldr	r0, [pc, #24]	@ (800e7e8 <BSP_PlatformIsDetected+0x28>)
 800e7ce:	f7f7 fc5b 	bl	8006088 <HAL_GPIO_ReadPin>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d001      	beq.n	800e7dc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	58020000 	.word	0x58020000

0800e7ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e7f4:	f7f3 f866 	bl	80018c4 <HAL_GetTick>
 800e7f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e7fa:	e006      	b.n	800e80a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e7fc:	f7ff ff9c 	bl	800e738 <BSP_SD_GetCardState>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e806:	2300      	movs	r3, #0
 800e808:	e009      	b.n	800e81e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e80a:	f7f3 f85b 	bl	80018c4 <HAL_GetTick>
 800e80e:	4602      	mov	r2, r0
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	429a      	cmp	r2, r3
 800e818:	d8f0      	bhi.n	800e7fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e81a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
	...

0800e828 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	4603      	mov	r3, r0
 800e830:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e832:	4b0b      	ldr	r3, [pc, #44]	@ (800e860 <SD_CheckStatus+0x38>)
 800e834:	2201      	movs	r2, #1
 800e836:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e838:	f7ff ff7e 	bl	800e738 <BSP_SD_GetCardState>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d107      	bne.n	800e852 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e842:	4b07      	ldr	r3, [pc, #28]	@ (800e860 <SD_CheckStatus+0x38>)
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f023 0301 	bic.w	r3, r3, #1
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	4b04      	ldr	r3, [pc, #16]	@ (800e860 <SD_CheckStatus+0x38>)
 800e850:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e852:	4b03      	ldr	r3, [pc, #12]	@ (800e860 <SD_CheckStatus+0x38>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	b2db      	uxtb	r3, r3
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	2400000d 	.word	0x2400000d

0800e864 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e86e:	f7ff ff09 	bl	800e684 <BSP_SD_Init>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d107      	bne.n	800e888 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7ff ffd4 	bl	800e828 <SD_CheckStatus>
 800e880:	4603      	mov	r3, r0
 800e882:	461a      	mov	r2, r3
 800e884:	4b04      	ldr	r3, [pc, #16]	@ (800e898 <SD_initialize+0x34>)
 800e886:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e888:	4b03      	ldr	r3, [pc, #12]	@ (800e898 <SD_initialize+0x34>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	b2db      	uxtb	r3, r3
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	2400000d 	.word	0x2400000d

0800e89c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e8a6:	79fb      	ldrb	r3, [r7, #7]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff ffbd 	bl	800e828 <SD_CheckStatus>
 800e8ae:	4603      	mov	r3, r0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	603b      	str	r3, [r7, #0]
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e8cc:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e8d0:	f7ff ff8c 	bl	800e7ec <SD_CheckStatusWithTimeout>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	da01      	bge.n	800e8de <SD_read+0x26>
  {
    return res;
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	e03b      	b.n	800e956 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	6879      	ldr	r1, [r7, #4]
 800e8e2:	68b8      	ldr	r0, [r7, #8]
 800e8e4:	f7ff fef4 	bl	800e6d0 <BSP_SD_ReadBlocks_DMA>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d132      	bne.n	800e954 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800e960 <SD_read+0xa8>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e8f4:	f7f2 ffe6 	bl	80018c4 <HAL_GetTick>
 800e8f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e8fa:	bf00      	nop
 800e8fc:	4b18      	ldr	r3, [pc, #96]	@ (800e960 <SD_read+0xa8>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <SD_read+0x5e>
 800e904:	f7f2 ffde 	bl	80018c4 <HAL_GetTick>
 800e908:	4602      	mov	r2, r0
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e912:	4293      	cmp	r3, r2
 800e914:	d9f2      	bls.n	800e8fc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e916:	4b12      	ldr	r3, [pc, #72]	@ (800e960 <SD_read+0xa8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d102      	bne.n	800e924 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e91e:	2301      	movs	r3, #1
 800e920:	75fb      	strb	r3, [r7, #23]
 800e922:	e017      	b.n	800e954 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e924:	4b0e      	ldr	r3, [pc, #56]	@ (800e960 <SD_read+0xa8>)
 800e926:	2200      	movs	r2, #0
 800e928:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e92a:	f7f2 ffcb 	bl	80018c4 <HAL_GetTick>
 800e92e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e930:	e007      	b.n	800e942 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e932:	f7ff ff01 	bl	800e738 <BSP_SD_GetCardState>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <SD_read+0x8a>
          {
            res = RES_OK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e940:	e008      	b.n	800e954 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e942:	f7f2 ffbf 	bl	80018c4 <HAL_GetTick>
 800e946:	4602      	mov	r2, r0
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e950:	4293      	cmp	r3, r2
 800e952:	d9ee      	bls.n	800e932 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e954:	7dfb      	ldrb	r3, [r7, #23]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3718      	adds	r7, #24
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	24000448 	.word	0x24000448

0800e964 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60b9      	str	r1, [r7, #8]
 800e96c:	607a      	str	r2, [r7, #4]
 800e96e:	603b      	str	r3, [r7, #0]
 800e970:	4603      	mov	r3, r0
 800e972:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e974:	2301      	movs	r3, #1
 800e976:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e978:	4b24      	ldr	r3, [pc, #144]	@ (800ea0c <SD_write+0xa8>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e97e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e982:	f7ff ff33 	bl	800e7ec <SD_CheckStatusWithTimeout>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	da01      	bge.n	800e990 <SD_write+0x2c>
  {
    return res;
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	e038      	b.n	800ea02 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e990:	683a      	ldr	r2, [r7, #0]
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	68b8      	ldr	r0, [r7, #8]
 800e996:	f7ff feb5 	bl	800e704 <BSP_SD_WriteBlocks_DMA>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d12f      	bne.n	800ea00 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e9a0:	f7f2 ff90 	bl	80018c4 <HAL_GetTick>
 800e9a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e9a6:	bf00      	nop
 800e9a8:	4b18      	ldr	r3, [pc, #96]	@ (800ea0c <SD_write+0xa8>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d108      	bne.n	800e9c2 <SD_write+0x5e>
 800e9b0:	f7f2 ff88 	bl	80018c4 <HAL_GetTick>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d9f2      	bls.n	800e9a8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ea0c <SD_write+0xa8>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d102      	bne.n	800e9d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	75fb      	strb	r3, [r7, #23]
 800e9ce:	e017      	b.n	800ea00 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800ea0c <SD_write+0xa8>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e9d6:	f7f2 ff75 	bl	80018c4 <HAL_GetTick>
 800e9da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e9dc:	e007      	b.n	800e9ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e9de:	f7ff feab 	bl	800e738 <BSP_SD_GetCardState>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d102      	bne.n	800e9ee <SD_write+0x8a>
          {
            res = RES_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	75fb      	strb	r3, [r7, #23]
            break;
 800e9ec:	e008      	b.n	800ea00 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e9ee:	f7f2 ff69 	bl	80018c4 <HAL_GetTick>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d9ee      	bls.n	800e9de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3718      	adds	r7, #24
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	24000444 	.word	0x24000444

0800ea10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b08c      	sub	sp, #48	@ 0x30
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	603a      	str	r2, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ea26:	4b25      	ldr	r3, [pc, #148]	@ (800eabc <SD_ioctl+0xac>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <SD_ioctl+0x28>
 800ea34:	2303      	movs	r3, #3
 800ea36:	e03c      	b.n	800eab2 <SD_ioctl+0xa2>

  switch (cmd)
 800ea38:	79bb      	ldrb	r3, [r7, #6]
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	d834      	bhi.n	800eaa8 <SD_ioctl+0x98>
 800ea3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea44 <SD_ioctl+0x34>)
 800ea40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea44:	0800ea55 	.word	0x0800ea55
 800ea48:	0800ea5d 	.word	0x0800ea5d
 800ea4c:	0800ea75 	.word	0x0800ea75
 800ea50:	0800ea8f 	.word	0x0800ea8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ea5a:	e028      	b.n	800eaae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea5c:	f107 0308 	add.w	r3, r7, #8
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff fe79 	bl	800e758 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ea66:	6a3a      	ldr	r2, [r7, #32]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ea72:	e01c      	b.n	800eaae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea74:	f107 0308 	add.w	r3, r7, #8
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fe6d 	bl	800e758 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ea8c:	e00f      	b.n	800eaae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea8e:	f107 0308 	add.w	r3, r7, #8
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff fe60 	bl	800e758 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	0a5a      	lsrs	r2, r3, #9
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eaa6:	e002      	b.n	800eaae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eaa8:	2304      	movs	r3, #4
 800eaaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800eaae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3730      	adds	r7, #48	@ 0x30
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	2400000d 	.word	0x2400000d

0800eac0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800eac0:	b480      	push	{r7}
 800eac2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800eac4:	4b03      	ldr	r3, [pc, #12]	@ (800ead4 <BSP_SD_WriteCpltCallback+0x14>)
 800eac6:	2201      	movs	r2, #1
 800eac8:	601a      	str	r2, [r3, #0]
}
 800eaca:	bf00      	nop
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	24000444 	.word	0x24000444

0800ead8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ead8:	b480      	push	{r7}
 800eada:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800eadc:	4b03      	ldr	r3, [pc, #12]	@ (800eaec <BSP_SD_ReadCpltCallback+0x14>)
 800eade:	2201      	movs	r2, #1
 800eae0:	601a      	str	r2, [r3, #0]
}
 800eae2:	bf00      	nop
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	24000448 	.word	0x24000448

0800eaf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	4613      	mov	r3, r2
 800eafc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eafe:	2301      	movs	r3, #1
 800eb00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb02:	2300      	movs	r3, #0
 800eb04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb06:	4b1f      	ldr	r3, [pc, #124]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb08:	7a5b      	ldrb	r3, [r3, #9]
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d131      	bne.n	800eb74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb10:	4b1c      	ldr	r3, [pc, #112]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb12:	7a5b      	ldrb	r3, [r3, #9]
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	461a      	mov	r2, r3
 800eb18:	4b1a      	ldr	r3, [pc, #104]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb1e:	4b19      	ldr	r3, [pc, #100]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb20:	7a5b      	ldrb	r3, [r3, #9]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	4a17      	ldr	r2, [pc, #92]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	4413      	add	r3, r2
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb2e:	4b15      	ldr	r3, [pc, #84]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb30:	7a5b      	ldrb	r3, [r3, #9]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	461a      	mov	r2, r3
 800eb36:	4b13      	ldr	r3, [pc, #76]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb38:	4413      	add	r3, r2
 800eb3a:	79fa      	ldrb	r2, [r7, #7]
 800eb3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb3e:	4b11      	ldr	r3, [pc, #68]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb40:	7a5b      	ldrb	r3, [r3, #9]
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	b2d1      	uxtb	r1, r2
 800eb48:	4a0e      	ldr	r2, [pc, #56]	@ (800eb84 <FATFS_LinkDriverEx+0x94>)
 800eb4a:	7251      	strb	r1, [r2, #9]
 800eb4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eb4e:	7dbb      	ldrb	r3, [r7, #22]
 800eb50:	3330      	adds	r3, #48	@ 0x30
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	223a      	movs	r2, #58	@ 0x3a
 800eb5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	3302      	adds	r3, #2
 800eb64:	222f      	movs	r2, #47	@ 0x2f
 800eb66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	3303      	adds	r3, #3
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	371c      	adds	r7, #28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	2400044c 	.word	0x2400044c

0800eb88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eb92:	2200      	movs	r2, #0
 800eb94:	6839      	ldr	r1, [r7, #0]
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff ffaa 	bl	800eaf0 <FATFS_LinkDriverEx>
 800eb9c:	4603      	mov	r3, r0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
	...

0800eba8 <sbrk_aligned>:
 800eba8:	b570      	push	{r4, r5, r6, lr}
 800ebaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ebe8 <sbrk_aligned+0x40>)
 800ebac:	460c      	mov	r4, r1
 800ebae:	6831      	ldr	r1, [r6, #0]
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	b911      	cbnz	r1, 800ebba <sbrk_aligned+0x12>
 800ebb4:	f000 fada 	bl	800f16c <_sbrk_r>
 800ebb8:	6030      	str	r0, [r6, #0]
 800ebba:	4621      	mov	r1, r4
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f000 fad5 	bl	800f16c <_sbrk_r>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	d103      	bne.n	800ebce <sbrk_aligned+0x26>
 800ebc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ebca:	4620      	mov	r0, r4
 800ebcc:	bd70      	pop	{r4, r5, r6, pc}
 800ebce:	1cc4      	adds	r4, r0, #3
 800ebd0:	f024 0403 	bic.w	r4, r4, #3
 800ebd4:	42a0      	cmp	r0, r4
 800ebd6:	d0f8      	beq.n	800ebca <sbrk_aligned+0x22>
 800ebd8:	1a21      	subs	r1, r4, r0
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 fac6 	bl	800f16c <_sbrk_r>
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	d1f2      	bne.n	800ebca <sbrk_aligned+0x22>
 800ebe4:	e7ef      	b.n	800ebc6 <sbrk_aligned+0x1e>
 800ebe6:	bf00      	nop
 800ebe8:	24000458 	.word	0x24000458

0800ebec <_malloc_r>:
 800ebec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebf0:	1ccd      	adds	r5, r1, #3
 800ebf2:	f025 0503 	bic.w	r5, r5, #3
 800ebf6:	3508      	adds	r5, #8
 800ebf8:	2d0c      	cmp	r5, #12
 800ebfa:	bf38      	it	cc
 800ebfc:	250c      	movcc	r5, #12
 800ebfe:	2d00      	cmp	r5, #0
 800ec00:	4606      	mov	r6, r0
 800ec02:	db01      	blt.n	800ec08 <_malloc_r+0x1c>
 800ec04:	42a9      	cmp	r1, r5
 800ec06:	d904      	bls.n	800ec12 <_malloc_r+0x26>
 800ec08:	230c      	movs	r3, #12
 800ec0a:	6033      	str	r3, [r6, #0]
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ece8 <_malloc_r+0xfc>
 800ec16:	f000 f869 	bl	800ecec <__malloc_lock>
 800ec1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec1e:	461c      	mov	r4, r3
 800ec20:	bb44      	cbnz	r4, 800ec74 <_malloc_r+0x88>
 800ec22:	4629      	mov	r1, r5
 800ec24:	4630      	mov	r0, r6
 800ec26:	f7ff ffbf 	bl	800eba8 <sbrk_aligned>
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	d158      	bne.n	800ece2 <_malloc_r+0xf6>
 800ec30:	f8d8 4000 	ldr.w	r4, [r8]
 800ec34:	4627      	mov	r7, r4
 800ec36:	2f00      	cmp	r7, #0
 800ec38:	d143      	bne.n	800ecc2 <_malloc_r+0xd6>
 800ec3a:	2c00      	cmp	r4, #0
 800ec3c:	d04b      	beq.n	800ecd6 <_malloc_r+0xea>
 800ec3e:	6823      	ldr	r3, [r4, #0]
 800ec40:	4639      	mov	r1, r7
 800ec42:	4630      	mov	r0, r6
 800ec44:	eb04 0903 	add.w	r9, r4, r3
 800ec48:	f000 fa90 	bl	800f16c <_sbrk_r>
 800ec4c:	4581      	cmp	r9, r0
 800ec4e:	d142      	bne.n	800ecd6 <_malloc_r+0xea>
 800ec50:	6821      	ldr	r1, [r4, #0]
 800ec52:	1a6d      	subs	r5, r5, r1
 800ec54:	4629      	mov	r1, r5
 800ec56:	4630      	mov	r0, r6
 800ec58:	f7ff ffa6 	bl	800eba8 <sbrk_aligned>
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	d03a      	beq.n	800ecd6 <_malloc_r+0xea>
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	442b      	add	r3, r5
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	f8d8 3000 	ldr.w	r3, [r8]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	bb62      	cbnz	r2, 800ecc8 <_malloc_r+0xdc>
 800ec6e:	f8c8 7000 	str.w	r7, [r8]
 800ec72:	e00f      	b.n	800ec94 <_malloc_r+0xa8>
 800ec74:	6822      	ldr	r2, [r4, #0]
 800ec76:	1b52      	subs	r2, r2, r5
 800ec78:	d420      	bmi.n	800ecbc <_malloc_r+0xd0>
 800ec7a:	2a0b      	cmp	r2, #11
 800ec7c:	d917      	bls.n	800ecae <_malloc_r+0xc2>
 800ec7e:	1961      	adds	r1, r4, r5
 800ec80:	42a3      	cmp	r3, r4
 800ec82:	6025      	str	r5, [r4, #0]
 800ec84:	bf18      	it	ne
 800ec86:	6059      	strne	r1, [r3, #4]
 800ec88:	6863      	ldr	r3, [r4, #4]
 800ec8a:	bf08      	it	eq
 800ec8c:	f8c8 1000 	streq.w	r1, [r8]
 800ec90:	5162      	str	r2, [r4, r5]
 800ec92:	604b      	str	r3, [r1, #4]
 800ec94:	4630      	mov	r0, r6
 800ec96:	f000 f82f 	bl	800ecf8 <__malloc_unlock>
 800ec9a:	f104 000b 	add.w	r0, r4, #11
 800ec9e:	1d23      	adds	r3, r4, #4
 800eca0:	f020 0007 	bic.w	r0, r0, #7
 800eca4:	1ac2      	subs	r2, r0, r3
 800eca6:	bf1c      	itt	ne
 800eca8:	1a1b      	subne	r3, r3, r0
 800ecaa:	50a3      	strne	r3, [r4, r2]
 800ecac:	e7af      	b.n	800ec0e <_malloc_r+0x22>
 800ecae:	6862      	ldr	r2, [r4, #4]
 800ecb0:	42a3      	cmp	r3, r4
 800ecb2:	bf0c      	ite	eq
 800ecb4:	f8c8 2000 	streq.w	r2, [r8]
 800ecb8:	605a      	strne	r2, [r3, #4]
 800ecba:	e7eb      	b.n	800ec94 <_malloc_r+0xa8>
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	6864      	ldr	r4, [r4, #4]
 800ecc0:	e7ae      	b.n	800ec20 <_malloc_r+0x34>
 800ecc2:	463c      	mov	r4, r7
 800ecc4:	687f      	ldr	r7, [r7, #4]
 800ecc6:	e7b6      	b.n	800ec36 <_malloc_r+0x4a>
 800ecc8:	461a      	mov	r2, r3
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	42a3      	cmp	r3, r4
 800ecce:	d1fb      	bne.n	800ecc8 <_malloc_r+0xdc>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	6053      	str	r3, [r2, #4]
 800ecd4:	e7de      	b.n	800ec94 <_malloc_r+0xa8>
 800ecd6:	230c      	movs	r3, #12
 800ecd8:	6033      	str	r3, [r6, #0]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f000 f80c 	bl	800ecf8 <__malloc_unlock>
 800ece0:	e794      	b.n	800ec0c <_malloc_r+0x20>
 800ece2:	6005      	str	r5, [r0, #0]
 800ece4:	e7d6      	b.n	800ec94 <_malloc_r+0xa8>
 800ece6:	bf00      	nop
 800ece8:	2400045c 	.word	0x2400045c

0800ecec <__malloc_lock>:
 800ecec:	4801      	ldr	r0, [pc, #4]	@ (800ecf4 <__malloc_lock+0x8>)
 800ecee:	f000 ba8a 	b.w	800f206 <__retarget_lock_acquire_recursive>
 800ecf2:	bf00      	nop
 800ecf4:	240005a0 	.word	0x240005a0

0800ecf8 <__malloc_unlock>:
 800ecf8:	4801      	ldr	r0, [pc, #4]	@ (800ed00 <__malloc_unlock+0x8>)
 800ecfa:	f000 ba85 	b.w	800f208 <__retarget_lock_release_recursive>
 800ecfe:	bf00      	nop
 800ed00:	240005a0 	.word	0x240005a0

0800ed04 <std>:
 800ed04:	2300      	movs	r3, #0
 800ed06:	b510      	push	{r4, lr}
 800ed08:	4604      	mov	r4, r0
 800ed0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed12:	6083      	str	r3, [r0, #8]
 800ed14:	8181      	strh	r1, [r0, #12]
 800ed16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed18:	81c2      	strh	r2, [r0, #14]
 800ed1a:	6183      	str	r3, [r0, #24]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	2208      	movs	r2, #8
 800ed20:	305c      	adds	r0, #92	@ 0x5c
 800ed22:	f000 f9e7 	bl	800f0f4 <memset>
 800ed26:	4b0d      	ldr	r3, [pc, #52]	@ (800ed5c <std+0x58>)
 800ed28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed60 <std+0x5c>)
 800ed2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed64 <std+0x60>)
 800ed30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed32:	4b0d      	ldr	r3, [pc, #52]	@ (800ed68 <std+0x64>)
 800ed34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed36:	4b0d      	ldr	r3, [pc, #52]	@ (800ed6c <std+0x68>)
 800ed38:	6224      	str	r4, [r4, #32]
 800ed3a:	429c      	cmp	r4, r3
 800ed3c:	d006      	beq.n	800ed4c <std+0x48>
 800ed3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed42:	4294      	cmp	r4, r2
 800ed44:	d002      	beq.n	800ed4c <std+0x48>
 800ed46:	33d0      	adds	r3, #208	@ 0xd0
 800ed48:	429c      	cmp	r4, r3
 800ed4a:	d105      	bne.n	800ed58 <std+0x54>
 800ed4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed54:	f000 ba56 	b.w	800f204 <__retarget_lock_init_recursive>
 800ed58:	bd10      	pop	{r4, pc}
 800ed5a:	bf00      	nop
 800ed5c:	0800ef45 	.word	0x0800ef45
 800ed60:	0800ef67 	.word	0x0800ef67
 800ed64:	0800ef9f 	.word	0x0800ef9f
 800ed68:	0800efc3 	.word	0x0800efc3
 800ed6c:	24000460 	.word	0x24000460

0800ed70 <stdio_exit_handler>:
 800ed70:	4a02      	ldr	r2, [pc, #8]	@ (800ed7c <stdio_exit_handler+0xc>)
 800ed72:	4903      	ldr	r1, [pc, #12]	@ (800ed80 <stdio_exit_handler+0x10>)
 800ed74:	4803      	ldr	r0, [pc, #12]	@ (800ed84 <stdio_exit_handler+0x14>)
 800ed76:	f000 b869 	b.w	800ee4c <_fwalk_sglue>
 800ed7a:	bf00      	nop
 800ed7c:	24000010 	.word	0x24000010
 800ed80:	0800f3a9 	.word	0x0800f3a9
 800ed84:	24000020 	.word	0x24000020

0800ed88 <cleanup_stdio>:
 800ed88:	6841      	ldr	r1, [r0, #4]
 800ed8a:	4b0c      	ldr	r3, [pc, #48]	@ (800edbc <cleanup_stdio+0x34>)
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	4604      	mov	r4, r0
 800ed92:	d001      	beq.n	800ed98 <cleanup_stdio+0x10>
 800ed94:	f000 fb08 	bl	800f3a8 <_fflush_r>
 800ed98:	68a1      	ldr	r1, [r4, #8]
 800ed9a:	4b09      	ldr	r3, [pc, #36]	@ (800edc0 <cleanup_stdio+0x38>)
 800ed9c:	4299      	cmp	r1, r3
 800ed9e:	d002      	beq.n	800eda6 <cleanup_stdio+0x1e>
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fb01 	bl	800f3a8 <_fflush_r>
 800eda6:	68e1      	ldr	r1, [r4, #12]
 800eda8:	4b06      	ldr	r3, [pc, #24]	@ (800edc4 <cleanup_stdio+0x3c>)
 800edaa:	4299      	cmp	r1, r3
 800edac:	d004      	beq.n	800edb8 <cleanup_stdio+0x30>
 800edae:	4620      	mov	r0, r4
 800edb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edb4:	f000 baf8 	b.w	800f3a8 <_fflush_r>
 800edb8:	bd10      	pop	{r4, pc}
 800edba:	bf00      	nop
 800edbc:	24000460 	.word	0x24000460
 800edc0:	240004c8 	.word	0x240004c8
 800edc4:	24000530 	.word	0x24000530

0800edc8 <global_stdio_init.part.0>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	4b0b      	ldr	r3, [pc, #44]	@ (800edf8 <global_stdio_init.part.0+0x30>)
 800edcc:	4c0b      	ldr	r4, [pc, #44]	@ (800edfc <global_stdio_init.part.0+0x34>)
 800edce:	4a0c      	ldr	r2, [pc, #48]	@ (800ee00 <global_stdio_init.part.0+0x38>)
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	4620      	mov	r0, r4
 800edd4:	2200      	movs	r2, #0
 800edd6:	2104      	movs	r1, #4
 800edd8:	f7ff ff94 	bl	800ed04 <std>
 800eddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ede0:	2201      	movs	r2, #1
 800ede2:	2109      	movs	r1, #9
 800ede4:	f7ff ff8e 	bl	800ed04 <std>
 800ede8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800edec:	2202      	movs	r2, #2
 800edee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edf2:	2112      	movs	r1, #18
 800edf4:	f7ff bf86 	b.w	800ed04 <std>
 800edf8:	24000598 	.word	0x24000598
 800edfc:	24000460 	.word	0x24000460
 800ee00:	0800ed71 	.word	0x0800ed71

0800ee04 <__sfp_lock_acquire>:
 800ee04:	4801      	ldr	r0, [pc, #4]	@ (800ee0c <__sfp_lock_acquire+0x8>)
 800ee06:	f000 b9fe 	b.w	800f206 <__retarget_lock_acquire_recursive>
 800ee0a:	bf00      	nop
 800ee0c:	240005a1 	.word	0x240005a1

0800ee10 <__sfp_lock_release>:
 800ee10:	4801      	ldr	r0, [pc, #4]	@ (800ee18 <__sfp_lock_release+0x8>)
 800ee12:	f000 b9f9 	b.w	800f208 <__retarget_lock_release_recursive>
 800ee16:	bf00      	nop
 800ee18:	240005a1 	.word	0x240005a1

0800ee1c <__sinit>:
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	4604      	mov	r4, r0
 800ee20:	f7ff fff0 	bl	800ee04 <__sfp_lock_acquire>
 800ee24:	6a23      	ldr	r3, [r4, #32]
 800ee26:	b11b      	cbz	r3, 800ee30 <__sinit+0x14>
 800ee28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee2c:	f7ff bff0 	b.w	800ee10 <__sfp_lock_release>
 800ee30:	4b04      	ldr	r3, [pc, #16]	@ (800ee44 <__sinit+0x28>)
 800ee32:	6223      	str	r3, [r4, #32]
 800ee34:	4b04      	ldr	r3, [pc, #16]	@ (800ee48 <__sinit+0x2c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1f5      	bne.n	800ee28 <__sinit+0xc>
 800ee3c:	f7ff ffc4 	bl	800edc8 <global_stdio_init.part.0>
 800ee40:	e7f2      	b.n	800ee28 <__sinit+0xc>
 800ee42:	bf00      	nop
 800ee44:	0800ed89 	.word	0x0800ed89
 800ee48:	24000598 	.word	0x24000598

0800ee4c <_fwalk_sglue>:
 800ee4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee50:	4607      	mov	r7, r0
 800ee52:	4688      	mov	r8, r1
 800ee54:	4614      	mov	r4, r2
 800ee56:	2600      	movs	r6, #0
 800ee58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee60:	d505      	bpl.n	800ee6e <_fwalk_sglue+0x22>
 800ee62:	6824      	ldr	r4, [r4, #0]
 800ee64:	2c00      	cmp	r4, #0
 800ee66:	d1f7      	bne.n	800ee58 <_fwalk_sglue+0xc>
 800ee68:	4630      	mov	r0, r6
 800ee6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee6e:	89ab      	ldrh	r3, [r5, #12]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d907      	bls.n	800ee84 <_fwalk_sglue+0x38>
 800ee74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	d003      	beq.n	800ee84 <_fwalk_sglue+0x38>
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4638      	mov	r0, r7
 800ee80:	47c0      	blx	r8
 800ee82:	4306      	orrs	r6, r0
 800ee84:	3568      	adds	r5, #104	@ 0x68
 800ee86:	e7e9      	b.n	800ee5c <_fwalk_sglue+0x10>

0800ee88 <_puts_r>:
 800ee88:	6a03      	ldr	r3, [r0, #32]
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	6884      	ldr	r4, [r0, #8]
 800ee8e:	4605      	mov	r5, r0
 800ee90:	460e      	mov	r6, r1
 800ee92:	b90b      	cbnz	r3, 800ee98 <_puts_r+0x10>
 800ee94:	f7ff ffc2 	bl	800ee1c <__sinit>
 800ee98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee9a:	07db      	lsls	r3, r3, #31
 800ee9c:	d405      	bmi.n	800eeaa <_puts_r+0x22>
 800ee9e:	89a3      	ldrh	r3, [r4, #12]
 800eea0:	0598      	lsls	r0, r3, #22
 800eea2:	d402      	bmi.n	800eeaa <_puts_r+0x22>
 800eea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eea6:	f000 f9ae 	bl	800f206 <__retarget_lock_acquire_recursive>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	0719      	lsls	r1, r3, #28
 800eeae:	d502      	bpl.n	800eeb6 <_puts_r+0x2e>
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d135      	bne.n	800ef22 <_puts_r+0x9a>
 800eeb6:	4621      	mov	r1, r4
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f000 f8c5 	bl	800f048 <__swsetup_r>
 800eebe:	b380      	cbz	r0, 800ef22 <_puts_r+0x9a>
 800eec0:	f04f 35ff 	mov.w	r5, #4294967295
 800eec4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eec6:	07da      	lsls	r2, r3, #31
 800eec8:	d405      	bmi.n	800eed6 <_puts_r+0x4e>
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	059b      	lsls	r3, r3, #22
 800eece:	d402      	bmi.n	800eed6 <_puts_r+0x4e>
 800eed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eed2:	f000 f999 	bl	800f208 <__retarget_lock_release_recursive>
 800eed6:	4628      	mov	r0, r5
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	da04      	bge.n	800eee8 <_puts_r+0x60>
 800eede:	69a2      	ldr	r2, [r4, #24]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	dc17      	bgt.n	800ef14 <_puts_r+0x8c>
 800eee4:	290a      	cmp	r1, #10
 800eee6:	d015      	beq.n	800ef14 <_puts_r+0x8c>
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	6022      	str	r2, [r4, #0]
 800eeee:	7019      	strb	r1, [r3, #0]
 800eef0:	68a3      	ldr	r3, [r4, #8]
 800eef2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eef6:	3b01      	subs	r3, #1
 800eef8:	60a3      	str	r3, [r4, #8]
 800eefa:	2900      	cmp	r1, #0
 800eefc:	d1ed      	bne.n	800eeda <_puts_r+0x52>
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	da11      	bge.n	800ef26 <_puts_r+0x9e>
 800ef02:	4622      	mov	r2, r4
 800ef04:	210a      	movs	r1, #10
 800ef06:	4628      	mov	r0, r5
 800ef08:	f000 f85f 	bl	800efca <__swbuf_r>
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	d0d7      	beq.n	800eec0 <_puts_r+0x38>
 800ef10:	250a      	movs	r5, #10
 800ef12:	e7d7      	b.n	800eec4 <_puts_r+0x3c>
 800ef14:	4622      	mov	r2, r4
 800ef16:	4628      	mov	r0, r5
 800ef18:	f000 f857 	bl	800efca <__swbuf_r>
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	d1e7      	bne.n	800eef0 <_puts_r+0x68>
 800ef20:	e7ce      	b.n	800eec0 <_puts_r+0x38>
 800ef22:	3e01      	subs	r6, #1
 800ef24:	e7e4      	b.n	800eef0 <_puts_r+0x68>
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	6022      	str	r2, [r4, #0]
 800ef2c:	220a      	movs	r2, #10
 800ef2e:	701a      	strb	r2, [r3, #0]
 800ef30:	e7ee      	b.n	800ef10 <_puts_r+0x88>
	...

0800ef34 <puts>:
 800ef34:	4b02      	ldr	r3, [pc, #8]	@ (800ef40 <puts+0xc>)
 800ef36:	4601      	mov	r1, r0
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	f7ff bfa5 	b.w	800ee88 <_puts_r>
 800ef3e:	bf00      	nop
 800ef40:	2400001c 	.word	0x2400001c

0800ef44 <__sread>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	460c      	mov	r4, r1
 800ef48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef4c:	f000 f8fc 	bl	800f148 <_read_r>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	bfab      	itete	ge
 800ef54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef56:	89a3      	ldrhlt	r3, [r4, #12]
 800ef58:	181b      	addge	r3, r3, r0
 800ef5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef5e:	bfac      	ite	ge
 800ef60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef62:	81a3      	strhlt	r3, [r4, #12]
 800ef64:	bd10      	pop	{r4, pc}

0800ef66 <__swrite>:
 800ef66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6a:	461f      	mov	r7, r3
 800ef6c:	898b      	ldrh	r3, [r1, #12]
 800ef6e:	05db      	lsls	r3, r3, #23
 800ef70:	4605      	mov	r5, r0
 800ef72:	460c      	mov	r4, r1
 800ef74:	4616      	mov	r6, r2
 800ef76:	d505      	bpl.n	800ef84 <__swrite+0x1e>
 800ef78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f000 f8d0 	bl	800f124 <_lseek_r>
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef8e:	81a3      	strh	r3, [r4, #12]
 800ef90:	4632      	mov	r2, r6
 800ef92:	463b      	mov	r3, r7
 800ef94:	4628      	mov	r0, r5
 800ef96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9a:	f000 b8f7 	b.w	800f18c <_write_r>

0800ef9e <__sseek>:
 800ef9e:	b510      	push	{r4, lr}
 800efa0:	460c      	mov	r4, r1
 800efa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa6:	f000 f8bd 	bl	800f124 <_lseek_r>
 800efaa:	1c43      	adds	r3, r0, #1
 800efac:	89a3      	ldrh	r3, [r4, #12]
 800efae:	bf15      	itete	ne
 800efb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800efb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800efb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800efba:	81a3      	strheq	r3, [r4, #12]
 800efbc:	bf18      	it	ne
 800efbe:	81a3      	strhne	r3, [r4, #12]
 800efc0:	bd10      	pop	{r4, pc}

0800efc2 <__sclose>:
 800efc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc6:	f000 b89d 	b.w	800f104 <_close_r>

0800efca <__swbuf_r>:
 800efca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efcc:	460e      	mov	r6, r1
 800efce:	4614      	mov	r4, r2
 800efd0:	4605      	mov	r5, r0
 800efd2:	b118      	cbz	r0, 800efdc <__swbuf_r+0x12>
 800efd4:	6a03      	ldr	r3, [r0, #32]
 800efd6:	b90b      	cbnz	r3, 800efdc <__swbuf_r+0x12>
 800efd8:	f7ff ff20 	bl	800ee1c <__sinit>
 800efdc:	69a3      	ldr	r3, [r4, #24]
 800efde:	60a3      	str	r3, [r4, #8]
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	071a      	lsls	r2, r3, #28
 800efe4:	d501      	bpl.n	800efea <__swbuf_r+0x20>
 800efe6:	6923      	ldr	r3, [r4, #16]
 800efe8:	b943      	cbnz	r3, 800effc <__swbuf_r+0x32>
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f000 f82b 	bl	800f048 <__swsetup_r>
 800eff2:	b118      	cbz	r0, 800effc <__swbuf_r+0x32>
 800eff4:	f04f 37ff 	mov.w	r7, #4294967295
 800eff8:	4638      	mov	r0, r7
 800effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	6922      	ldr	r2, [r4, #16]
 800f000:	1a98      	subs	r0, r3, r2
 800f002:	6963      	ldr	r3, [r4, #20]
 800f004:	b2f6      	uxtb	r6, r6
 800f006:	4283      	cmp	r3, r0
 800f008:	4637      	mov	r7, r6
 800f00a:	dc05      	bgt.n	800f018 <__swbuf_r+0x4e>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 f9ca 	bl	800f3a8 <_fflush_r>
 800f014:	2800      	cmp	r0, #0
 800f016:	d1ed      	bne.n	800eff4 <__swbuf_r+0x2a>
 800f018:	68a3      	ldr	r3, [r4, #8]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	60a3      	str	r3, [r4, #8]
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	6022      	str	r2, [r4, #0]
 800f024:	701e      	strb	r6, [r3, #0]
 800f026:	6962      	ldr	r2, [r4, #20]
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d004      	beq.n	800f038 <__swbuf_r+0x6e>
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	07db      	lsls	r3, r3, #31
 800f032:	d5e1      	bpl.n	800eff8 <__swbuf_r+0x2e>
 800f034:	2e0a      	cmp	r6, #10
 800f036:	d1df      	bne.n	800eff8 <__swbuf_r+0x2e>
 800f038:	4621      	mov	r1, r4
 800f03a:	4628      	mov	r0, r5
 800f03c:	f000 f9b4 	bl	800f3a8 <_fflush_r>
 800f040:	2800      	cmp	r0, #0
 800f042:	d0d9      	beq.n	800eff8 <__swbuf_r+0x2e>
 800f044:	e7d6      	b.n	800eff4 <__swbuf_r+0x2a>
	...

0800f048 <__swsetup_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	4b29      	ldr	r3, [pc, #164]	@ (800f0f0 <__swsetup_r+0xa8>)
 800f04c:	4605      	mov	r5, r0
 800f04e:	6818      	ldr	r0, [r3, #0]
 800f050:	460c      	mov	r4, r1
 800f052:	b118      	cbz	r0, 800f05c <__swsetup_r+0x14>
 800f054:	6a03      	ldr	r3, [r0, #32]
 800f056:	b90b      	cbnz	r3, 800f05c <__swsetup_r+0x14>
 800f058:	f7ff fee0 	bl	800ee1c <__sinit>
 800f05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f060:	0719      	lsls	r1, r3, #28
 800f062:	d422      	bmi.n	800f0aa <__swsetup_r+0x62>
 800f064:	06da      	lsls	r2, r3, #27
 800f066:	d407      	bmi.n	800f078 <__swsetup_r+0x30>
 800f068:	2209      	movs	r2, #9
 800f06a:	602a      	str	r2, [r5, #0]
 800f06c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	f04f 30ff 	mov.w	r0, #4294967295
 800f076:	e033      	b.n	800f0e0 <__swsetup_r+0x98>
 800f078:	0758      	lsls	r0, r3, #29
 800f07a:	d512      	bpl.n	800f0a2 <__swsetup_r+0x5a>
 800f07c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f07e:	b141      	cbz	r1, 800f092 <__swsetup_r+0x4a>
 800f080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f084:	4299      	cmp	r1, r3
 800f086:	d002      	beq.n	800f08e <__swsetup_r+0x46>
 800f088:	4628      	mov	r0, r5
 800f08a:	f000 f8bf 	bl	800f20c <_free_r>
 800f08e:	2300      	movs	r3, #0
 800f090:	6363      	str	r3, [r4, #52]	@ 0x34
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	2300      	movs	r3, #0
 800f09c:	6063      	str	r3, [r4, #4]
 800f09e:	6923      	ldr	r3, [r4, #16]
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	f043 0308 	orr.w	r3, r3, #8
 800f0a8:	81a3      	strh	r3, [r4, #12]
 800f0aa:	6923      	ldr	r3, [r4, #16]
 800f0ac:	b94b      	cbnz	r3, 800f0c2 <__swsetup_r+0x7a>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0b8:	d003      	beq.n	800f0c2 <__swsetup_r+0x7a>
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f000 f9c1 	bl	800f444 <__smakebuf_r>
 800f0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c6:	f013 0201 	ands.w	r2, r3, #1
 800f0ca:	d00a      	beq.n	800f0e2 <__swsetup_r+0x9a>
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	60a2      	str	r2, [r4, #8]
 800f0d0:	6962      	ldr	r2, [r4, #20]
 800f0d2:	4252      	negs	r2, r2
 800f0d4:	61a2      	str	r2, [r4, #24]
 800f0d6:	6922      	ldr	r2, [r4, #16]
 800f0d8:	b942      	cbnz	r2, 800f0ec <__swsetup_r+0xa4>
 800f0da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0de:	d1c5      	bne.n	800f06c <__swsetup_r+0x24>
 800f0e0:	bd38      	pop	{r3, r4, r5, pc}
 800f0e2:	0799      	lsls	r1, r3, #30
 800f0e4:	bf58      	it	pl
 800f0e6:	6962      	ldrpl	r2, [r4, #20]
 800f0e8:	60a2      	str	r2, [r4, #8]
 800f0ea:	e7f4      	b.n	800f0d6 <__swsetup_r+0x8e>
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	e7f7      	b.n	800f0e0 <__swsetup_r+0x98>
 800f0f0:	2400001c 	.word	0x2400001c

0800f0f4 <memset>:
 800f0f4:	4402      	add	r2, r0
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d100      	bne.n	800f0fe <memset+0xa>
 800f0fc:	4770      	bx	lr
 800f0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800f102:	e7f9      	b.n	800f0f8 <memset+0x4>

0800f104 <_close_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	4d06      	ldr	r5, [pc, #24]	@ (800f120 <_close_r+0x1c>)
 800f108:	2300      	movs	r3, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	602b      	str	r3, [r5, #0]
 800f110:	f7f2 fa45 	bl	800159e <_close>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_close_r+0x1a>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_close_r+0x1a>
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	2400059c 	.word	0x2400059c

0800f124 <_lseek_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d07      	ldr	r5, [pc, #28]	@ (800f144 <_lseek_r+0x20>)
 800f128:	4604      	mov	r4, r0
 800f12a:	4608      	mov	r0, r1
 800f12c:	4611      	mov	r1, r2
 800f12e:	2200      	movs	r2, #0
 800f130:	602a      	str	r2, [r5, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	f7f2 fa5a 	bl	80015ec <_lseek>
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	d102      	bne.n	800f142 <_lseek_r+0x1e>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	b103      	cbz	r3, 800f142 <_lseek_r+0x1e>
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	2400059c 	.word	0x2400059c

0800f148 <_read_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4d07      	ldr	r5, [pc, #28]	@ (800f168 <_read_r+0x20>)
 800f14c:	4604      	mov	r4, r0
 800f14e:	4608      	mov	r0, r1
 800f150:	4611      	mov	r1, r2
 800f152:	2200      	movs	r2, #0
 800f154:	602a      	str	r2, [r5, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	f7f2 fa04 	bl	8001564 <_read>
 800f15c:	1c43      	adds	r3, r0, #1
 800f15e:	d102      	bne.n	800f166 <_read_r+0x1e>
 800f160:	682b      	ldr	r3, [r5, #0]
 800f162:	b103      	cbz	r3, 800f166 <_read_r+0x1e>
 800f164:	6023      	str	r3, [r4, #0]
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	2400059c 	.word	0x2400059c

0800f16c <_sbrk_r>:
 800f16c:	b538      	push	{r3, r4, r5, lr}
 800f16e:	4d06      	ldr	r5, [pc, #24]	@ (800f188 <_sbrk_r+0x1c>)
 800f170:	2300      	movs	r3, #0
 800f172:	4604      	mov	r4, r0
 800f174:	4608      	mov	r0, r1
 800f176:	602b      	str	r3, [r5, #0]
 800f178:	f7f2 fa46 	bl	8001608 <_sbrk>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d102      	bne.n	800f186 <_sbrk_r+0x1a>
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	b103      	cbz	r3, 800f186 <_sbrk_r+0x1a>
 800f184:	6023      	str	r3, [r4, #0]
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	2400059c 	.word	0x2400059c

0800f18c <_write_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4d07      	ldr	r5, [pc, #28]	@ (800f1ac <_write_r+0x20>)
 800f190:	4604      	mov	r4, r0
 800f192:	4608      	mov	r0, r1
 800f194:	4611      	mov	r1, r2
 800f196:	2200      	movs	r2, #0
 800f198:	602a      	str	r2, [r5, #0]
 800f19a:	461a      	mov	r2, r3
 800f19c:	f7f1 fe6c 	bl	8000e78 <_write>
 800f1a0:	1c43      	adds	r3, r0, #1
 800f1a2:	d102      	bne.n	800f1aa <_write_r+0x1e>
 800f1a4:	682b      	ldr	r3, [r5, #0]
 800f1a6:	b103      	cbz	r3, 800f1aa <_write_r+0x1e>
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	bd38      	pop	{r3, r4, r5, pc}
 800f1ac:	2400059c 	.word	0x2400059c

0800f1b0 <__errno>:
 800f1b0:	4b01      	ldr	r3, [pc, #4]	@ (800f1b8 <__errno+0x8>)
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	2400001c 	.word	0x2400001c

0800f1bc <__libc_init_array>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	4d0d      	ldr	r5, [pc, #52]	@ (800f1f4 <__libc_init_array+0x38>)
 800f1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800f1f8 <__libc_init_array+0x3c>)
 800f1c2:	1b64      	subs	r4, r4, r5
 800f1c4:	10a4      	asrs	r4, r4, #2
 800f1c6:	2600      	movs	r6, #0
 800f1c8:	42a6      	cmp	r6, r4
 800f1ca:	d109      	bne.n	800f1e0 <__libc_init_array+0x24>
 800f1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800f1fc <__libc_init_array+0x40>)
 800f1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800f200 <__libc_init_array+0x44>)
 800f1d0:	f000 f996 	bl	800f500 <_init>
 800f1d4:	1b64      	subs	r4, r4, r5
 800f1d6:	10a4      	asrs	r4, r4, #2
 800f1d8:	2600      	movs	r6, #0
 800f1da:	42a6      	cmp	r6, r4
 800f1dc:	d105      	bne.n	800f1ea <__libc_init_array+0x2e>
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1e4:	4798      	blx	r3
 800f1e6:	3601      	adds	r6, #1
 800f1e8:	e7ee      	b.n	800f1c8 <__libc_init_array+0xc>
 800f1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ee:	4798      	blx	r3
 800f1f0:	3601      	adds	r6, #1
 800f1f2:	e7f2      	b.n	800f1da <__libc_init_array+0x1e>
 800f1f4:	0800f8d8 	.word	0x0800f8d8
 800f1f8:	0800f8d8 	.word	0x0800f8d8
 800f1fc:	0800f8d8 	.word	0x0800f8d8
 800f200:	0800f8dc 	.word	0x0800f8dc

0800f204 <__retarget_lock_init_recursive>:
 800f204:	4770      	bx	lr

0800f206 <__retarget_lock_acquire_recursive>:
 800f206:	4770      	bx	lr

0800f208 <__retarget_lock_release_recursive>:
 800f208:	4770      	bx	lr
	...

0800f20c <_free_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	4605      	mov	r5, r0
 800f210:	2900      	cmp	r1, #0
 800f212:	d041      	beq.n	800f298 <_free_r+0x8c>
 800f214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f218:	1f0c      	subs	r4, r1, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	bfb8      	it	lt
 800f21e:	18e4      	addlt	r4, r4, r3
 800f220:	f7ff fd64 	bl	800ecec <__malloc_lock>
 800f224:	4a1d      	ldr	r2, [pc, #116]	@ (800f29c <_free_r+0x90>)
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	b933      	cbnz	r3, 800f238 <_free_r+0x2c>
 800f22a:	6063      	str	r3, [r4, #4]
 800f22c:	6014      	str	r4, [r2, #0]
 800f22e:	4628      	mov	r0, r5
 800f230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f234:	f7ff bd60 	b.w	800ecf8 <__malloc_unlock>
 800f238:	42a3      	cmp	r3, r4
 800f23a:	d908      	bls.n	800f24e <_free_r+0x42>
 800f23c:	6820      	ldr	r0, [r4, #0]
 800f23e:	1821      	adds	r1, r4, r0
 800f240:	428b      	cmp	r3, r1
 800f242:	bf01      	itttt	eq
 800f244:	6819      	ldreq	r1, [r3, #0]
 800f246:	685b      	ldreq	r3, [r3, #4]
 800f248:	1809      	addeq	r1, r1, r0
 800f24a:	6021      	streq	r1, [r4, #0]
 800f24c:	e7ed      	b.n	800f22a <_free_r+0x1e>
 800f24e:	461a      	mov	r2, r3
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	b10b      	cbz	r3, 800f258 <_free_r+0x4c>
 800f254:	42a3      	cmp	r3, r4
 800f256:	d9fa      	bls.n	800f24e <_free_r+0x42>
 800f258:	6811      	ldr	r1, [r2, #0]
 800f25a:	1850      	adds	r0, r2, r1
 800f25c:	42a0      	cmp	r0, r4
 800f25e:	d10b      	bne.n	800f278 <_free_r+0x6c>
 800f260:	6820      	ldr	r0, [r4, #0]
 800f262:	4401      	add	r1, r0
 800f264:	1850      	adds	r0, r2, r1
 800f266:	4283      	cmp	r3, r0
 800f268:	6011      	str	r1, [r2, #0]
 800f26a:	d1e0      	bne.n	800f22e <_free_r+0x22>
 800f26c:	6818      	ldr	r0, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	6053      	str	r3, [r2, #4]
 800f272:	4408      	add	r0, r1
 800f274:	6010      	str	r0, [r2, #0]
 800f276:	e7da      	b.n	800f22e <_free_r+0x22>
 800f278:	d902      	bls.n	800f280 <_free_r+0x74>
 800f27a:	230c      	movs	r3, #12
 800f27c:	602b      	str	r3, [r5, #0]
 800f27e:	e7d6      	b.n	800f22e <_free_r+0x22>
 800f280:	6820      	ldr	r0, [r4, #0]
 800f282:	1821      	adds	r1, r4, r0
 800f284:	428b      	cmp	r3, r1
 800f286:	bf04      	itt	eq
 800f288:	6819      	ldreq	r1, [r3, #0]
 800f28a:	685b      	ldreq	r3, [r3, #4]
 800f28c:	6063      	str	r3, [r4, #4]
 800f28e:	bf04      	itt	eq
 800f290:	1809      	addeq	r1, r1, r0
 800f292:	6021      	streq	r1, [r4, #0]
 800f294:	6054      	str	r4, [r2, #4]
 800f296:	e7ca      	b.n	800f22e <_free_r+0x22>
 800f298:	bd38      	pop	{r3, r4, r5, pc}
 800f29a:	bf00      	nop
 800f29c:	2400045c 	.word	0x2400045c

0800f2a0 <__sflush_r>:
 800f2a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	0716      	lsls	r6, r2, #28
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	460c      	mov	r4, r1
 800f2ae:	d454      	bmi.n	800f35a <__sflush_r+0xba>
 800f2b0:	684b      	ldr	r3, [r1, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dc02      	bgt.n	800f2bc <__sflush_r+0x1c>
 800f2b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	dd48      	ble.n	800f34e <__sflush_r+0xae>
 800f2bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2be:	2e00      	cmp	r6, #0
 800f2c0:	d045      	beq.n	800f34e <__sflush_r+0xae>
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2c8:	682f      	ldr	r7, [r5, #0]
 800f2ca:	6a21      	ldr	r1, [r4, #32]
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	d030      	beq.n	800f332 <__sflush_r+0x92>
 800f2d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	0759      	lsls	r1, r3, #29
 800f2d6:	d505      	bpl.n	800f2e4 <__sflush_r+0x44>
 800f2d8:	6863      	ldr	r3, [r4, #4]
 800f2da:	1ad2      	subs	r2, r2, r3
 800f2dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2de:	b10b      	cbz	r3, 800f2e4 <__sflush_r+0x44>
 800f2e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2e2:	1ad2      	subs	r2, r2, r3
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2e8:	6a21      	ldr	r1, [r4, #32]
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b0      	blx	r6
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	89a3      	ldrh	r3, [r4, #12]
 800f2f2:	d106      	bne.n	800f302 <__sflush_r+0x62>
 800f2f4:	6829      	ldr	r1, [r5, #0]
 800f2f6:	291d      	cmp	r1, #29
 800f2f8:	d82b      	bhi.n	800f352 <__sflush_r+0xb2>
 800f2fa:	4a2a      	ldr	r2, [pc, #168]	@ (800f3a4 <__sflush_r+0x104>)
 800f2fc:	40ca      	lsrs	r2, r1
 800f2fe:	07d6      	lsls	r6, r2, #31
 800f300:	d527      	bpl.n	800f352 <__sflush_r+0xb2>
 800f302:	2200      	movs	r2, #0
 800f304:	6062      	str	r2, [r4, #4]
 800f306:	04d9      	lsls	r1, r3, #19
 800f308:	6922      	ldr	r2, [r4, #16]
 800f30a:	6022      	str	r2, [r4, #0]
 800f30c:	d504      	bpl.n	800f318 <__sflush_r+0x78>
 800f30e:	1c42      	adds	r2, r0, #1
 800f310:	d101      	bne.n	800f316 <__sflush_r+0x76>
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	b903      	cbnz	r3, 800f318 <__sflush_r+0x78>
 800f316:	6560      	str	r0, [r4, #84]	@ 0x54
 800f318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f31a:	602f      	str	r7, [r5, #0]
 800f31c:	b1b9      	cbz	r1, 800f34e <__sflush_r+0xae>
 800f31e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f322:	4299      	cmp	r1, r3
 800f324:	d002      	beq.n	800f32c <__sflush_r+0x8c>
 800f326:	4628      	mov	r0, r5
 800f328:	f7ff ff70 	bl	800f20c <_free_r>
 800f32c:	2300      	movs	r3, #0
 800f32e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f330:	e00d      	b.n	800f34e <__sflush_r+0xae>
 800f332:	2301      	movs	r3, #1
 800f334:	4628      	mov	r0, r5
 800f336:	47b0      	blx	r6
 800f338:	4602      	mov	r2, r0
 800f33a:	1c50      	adds	r0, r2, #1
 800f33c:	d1c9      	bne.n	800f2d2 <__sflush_r+0x32>
 800f33e:	682b      	ldr	r3, [r5, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0c6      	beq.n	800f2d2 <__sflush_r+0x32>
 800f344:	2b1d      	cmp	r3, #29
 800f346:	d001      	beq.n	800f34c <__sflush_r+0xac>
 800f348:	2b16      	cmp	r3, #22
 800f34a:	d11e      	bne.n	800f38a <__sflush_r+0xea>
 800f34c:	602f      	str	r7, [r5, #0]
 800f34e:	2000      	movs	r0, #0
 800f350:	e022      	b.n	800f398 <__sflush_r+0xf8>
 800f352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f356:	b21b      	sxth	r3, r3
 800f358:	e01b      	b.n	800f392 <__sflush_r+0xf2>
 800f35a:	690f      	ldr	r7, [r1, #16]
 800f35c:	2f00      	cmp	r7, #0
 800f35e:	d0f6      	beq.n	800f34e <__sflush_r+0xae>
 800f360:	0793      	lsls	r3, r2, #30
 800f362:	680e      	ldr	r6, [r1, #0]
 800f364:	bf08      	it	eq
 800f366:	694b      	ldreq	r3, [r1, #20]
 800f368:	600f      	str	r7, [r1, #0]
 800f36a:	bf18      	it	ne
 800f36c:	2300      	movne	r3, #0
 800f36e:	eba6 0807 	sub.w	r8, r6, r7
 800f372:	608b      	str	r3, [r1, #8]
 800f374:	f1b8 0f00 	cmp.w	r8, #0
 800f378:	dde9      	ble.n	800f34e <__sflush_r+0xae>
 800f37a:	6a21      	ldr	r1, [r4, #32]
 800f37c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f37e:	4643      	mov	r3, r8
 800f380:	463a      	mov	r2, r7
 800f382:	4628      	mov	r0, r5
 800f384:	47b0      	blx	r6
 800f386:	2800      	cmp	r0, #0
 800f388:	dc08      	bgt.n	800f39c <__sflush_r+0xfc>
 800f38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f392:	81a3      	strh	r3, [r4, #12]
 800f394:	f04f 30ff 	mov.w	r0, #4294967295
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39c:	4407      	add	r7, r0
 800f39e:	eba8 0800 	sub.w	r8, r8, r0
 800f3a2:	e7e7      	b.n	800f374 <__sflush_r+0xd4>
 800f3a4:	20400001 	.word	0x20400001

0800f3a8 <_fflush_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	690b      	ldr	r3, [r1, #16]
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	b913      	cbnz	r3, 800f3b8 <_fflush_r+0x10>
 800f3b2:	2500      	movs	r5, #0
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	bd38      	pop	{r3, r4, r5, pc}
 800f3b8:	b118      	cbz	r0, 800f3c2 <_fflush_r+0x1a>
 800f3ba:	6a03      	ldr	r3, [r0, #32]
 800f3bc:	b90b      	cbnz	r3, 800f3c2 <_fflush_r+0x1a>
 800f3be:	f7ff fd2d 	bl	800ee1c <__sinit>
 800f3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0f3      	beq.n	800f3b2 <_fflush_r+0xa>
 800f3ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3cc:	07d0      	lsls	r0, r2, #31
 800f3ce:	d404      	bmi.n	800f3da <_fflush_r+0x32>
 800f3d0:	0599      	lsls	r1, r3, #22
 800f3d2:	d402      	bmi.n	800f3da <_fflush_r+0x32>
 800f3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3d6:	f7ff ff16 	bl	800f206 <__retarget_lock_acquire_recursive>
 800f3da:	4628      	mov	r0, r5
 800f3dc:	4621      	mov	r1, r4
 800f3de:	f7ff ff5f 	bl	800f2a0 <__sflush_r>
 800f3e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3e4:	07da      	lsls	r2, r3, #31
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	d4e4      	bmi.n	800f3b4 <_fflush_r+0xc>
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	059b      	lsls	r3, r3, #22
 800f3ee:	d4e1      	bmi.n	800f3b4 <_fflush_r+0xc>
 800f3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3f2:	f7ff ff09 	bl	800f208 <__retarget_lock_release_recursive>
 800f3f6:	e7dd      	b.n	800f3b4 <_fflush_r+0xc>

0800f3f8 <__swhatbuf_r>:
 800f3f8:	b570      	push	{r4, r5, r6, lr}
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f400:	2900      	cmp	r1, #0
 800f402:	b096      	sub	sp, #88	@ 0x58
 800f404:	4615      	mov	r5, r2
 800f406:	461e      	mov	r6, r3
 800f408:	da0d      	bge.n	800f426 <__swhatbuf_r+0x2e>
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f410:	f04f 0100 	mov.w	r1, #0
 800f414:	bf14      	ite	ne
 800f416:	2340      	movne	r3, #64	@ 0x40
 800f418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f41c:	2000      	movs	r0, #0
 800f41e:	6031      	str	r1, [r6, #0]
 800f420:	602b      	str	r3, [r5, #0]
 800f422:	b016      	add	sp, #88	@ 0x58
 800f424:	bd70      	pop	{r4, r5, r6, pc}
 800f426:	466a      	mov	r2, sp
 800f428:	f000 f848 	bl	800f4bc <_fstat_r>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	dbec      	blt.n	800f40a <__swhatbuf_r+0x12>
 800f430:	9901      	ldr	r1, [sp, #4]
 800f432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f43a:	4259      	negs	r1, r3
 800f43c:	4159      	adcs	r1, r3
 800f43e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f442:	e7eb      	b.n	800f41c <__swhatbuf_r+0x24>

0800f444 <__smakebuf_r>:
 800f444:	898b      	ldrh	r3, [r1, #12]
 800f446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f448:	079d      	lsls	r5, r3, #30
 800f44a:	4606      	mov	r6, r0
 800f44c:	460c      	mov	r4, r1
 800f44e:	d507      	bpl.n	800f460 <__smakebuf_r+0x1c>
 800f450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	6123      	str	r3, [r4, #16]
 800f458:	2301      	movs	r3, #1
 800f45a:	6163      	str	r3, [r4, #20]
 800f45c:	b003      	add	sp, #12
 800f45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f460:	ab01      	add	r3, sp, #4
 800f462:	466a      	mov	r2, sp
 800f464:	f7ff ffc8 	bl	800f3f8 <__swhatbuf_r>
 800f468:	9f00      	ldr	r7, [sp, #0]
 800f46a:	4605      	mov	r5, r0
 800f46c:	4639      	mov	r1, r7
 800f46e:	4630      	mov	r0, r6
 800f470:	f7ff fbbc 	bl	800ebec <_malloc_r>
 800f474:	b948      	cbnz	r0, 800f48a <__smakebuf_r+0x46>
 800f476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f47a:	059a      	lsls	r2, r3, #22
 800f47c:	d4ee      	bmi.n	800f45c <__smakebuf_r+0x18>
 800f47e:	f023 0303 	bic.w	r3, r3, #3
 800f482:	f043 0302 	orr.w	r3, r3, #2
 800f486:	81a3      	strh	r3, [r4, #12]
 800f488:	e7e2      	b.n	800f450 <__smakebuf_r+0xc>
 800f48a:	89a3      	ldrh	r3, [r4, #12]
 800f48c:	6020      	str	r0, [r4, #0]
 800f48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f49a:	b15b      	cbz	r3, 800f4b4 <__smakebuf_r+0x70>
 800f49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f000 f81d 	bl	800f4e0 <_isatty_r>
 800f4a6:	b128      	cbz	r0, 800f4b4 <__smakebuf_r+0x70>
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	f023 0303 	bic.w	r3, r3, #3
 800f4ae:	f043 0301 	orr.w	r3, r3, #1
 800f4b2:	81a3      	strh	r3, [r4, #12]
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	431d      	orrs	r5, r3
 800f4b8:	81a5      	strh	r5, [r4, #12]
 800f4ba:	e7cf      	b.n	800f45c <__smakebuf_r+0x18>

0800f4bc <_fstat_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	4d07      	ldr	r5, [pc, #28]	@ (800f4dc <_fstat_r+0x20>)
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	4608      	mov	r0, r1
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	602b      	str	r3, [r5, #0]
 800f4ca:	f7f2 f874 	bl	80015b6 <_fstat>
 800f4ce:	1c43      	adds	r3, r0, #1
 800f4d0:	d102      	bne.n	800f4d8 <_fstat_r+0x1c>
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	b103      	cbz	r3, 800f4d8 <_fstat_r+0x1c>
 800f4d6:	6023      	str	r3, [r4, #0]
 800f4d8:	bd38      	pop	{r3, r4, r5, pc}
 800f4da:	bf00      	nop
 800f4dc:	2400059c 	.word	0x2400059c

0800f4e0 <_isatty_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d06      	ldr	r5, [pc, #24]	@ (800f4fc <_isatty_r+0x1c>)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	f7f2 f873 	bl	80015d6 <_isatty>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d102      	bne.n	800f4fa <_isatty_r+0x1a>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	b103      	cbz	r3, 800f4fa <_isatty_r+0x1a>
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	2400059c 	.word	0x2400059c

0800f500 <_init>:
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	bf00      	nop
 800f504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f506:	bc08      	pop	{r3}
 800f508:	469e      	mov	lr, r3
 800f50a:	4770      	bx	lr

0800f50c <_fini>:
 800f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50e:	bf00      	nop
 800f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f512:	bc08      	pop	{r3}
 800f514:	469e      	mov	lr, r3
 800f516:	4770      	bx	lr
